
AFEC_LM35DZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042a4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004042a4  004042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004042ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000018c  204009b8  00404c64  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400b44  00404df0  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402b48  00406df4  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015cd7  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e64  00000000  00000000  00036716  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000049f5  00000000  00000000  0003957a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a78  00000000  00000000  0003df6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  0003e9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e479  00000000  00000000  0003f4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ba9b  00000000  00000000  0005d920  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008c2d7  00000000  00000000  000693bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002344  00000000  00000000  000f5694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 2b 40 20 89 0a 40 00 85 0a 40 00 85 0a 40 00     H+@ ..@...@...@.
  400010:	85 0a 40 00 85 0a 40 00 85 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	85 0a 40 00 85 0a 40 00 00 00 00 00 85 0a 40 00     ..@...@.......@.
  40003c:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  40004c:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  40005c:	85 0a 40 00 85 0a 40 00 00 00 00 00 ad 08 40 00     ..@...@.......@.
  40006c:	c1 08 40 00 d5 08 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  40007c:	85 0a 40 00 e9 08 40 00 fd 08 40 00 85 0a 40 00     ..@...@...@...@.
  40008c:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  40009c:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  4000ac:	85 0a 40 00 85 0a 40 00 99 05 40 00 85 0a 40 00     ..@...@...@...@.
  4000bc:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  4000cc:	85 0a 40 00 00 00 00 00 85 0a 40 00 00 00 00 00     ..@.......@.....
  4000dc:	85 0a 40 00 ad 05 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  4000ec:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  4000fc:	85 0a 40 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ..@...@...@...@.
  40010c:	85 0a 40 00 85 0a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 85 0a 40 00 85 0a 40 00 85 0a 40 00     ......@...@...@.
  40012c:	85 0a 40 00 85 0a 40 00 00 00 00 00 85 0a 40 00     ..@...@.......@.
  40013c:	85 0a 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	004042ac 	.word	0x004042ac

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004042ac 	.word	0x004042ac
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	004042ac 	.word	0x004042ac
  4001a8:	00000000 	.word	0x00000000

004001ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001b0:	b980      	cbnz	r0, 4001d4 <_read+0x28>
  4001b2:	460c      	mov	r4, r1
  4001b4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001b6:	2a00      	cmp	r2, #0
  4001b8:	dd0f      	ble.n	4001da <_read+0x2e>
  4001ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001bc:	4e08      	ldr	r6, [pc, #32]	; (4001e0 <_read+0x34>)
  4001be:	4d09      	ldr	r5, [pc, #36]	; (4001e4 <_read+0x38>)
  4001c0:	6830      	ldr	r0, [r6, #0]
  4001c2:	4621      	mov	r1, r4
  4001c4:	682b      	ldr	r3, [r5, #0]
  4001c6:	4798      	blx	r3
		ptr++;
  4001c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ca:	42bc      	cmp	r4, r7
  4001cc:	d1f8      	bne.n	4001c0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ce:	4640      	mov	r0, r8
  4001d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001d4:	f04f 38ff 	mov.w	r8, #4294967295
  4001d8:	e7f9      	b.n	4001ce <_read+0x22>
	for (; len > 0; --len) {
  4001da:	4680      	mov	r8, r0
  4001dc:	e7f7      	b.n	4001ce <_read+0x22>
  4001de:	bf00      	nop
  4001e0:	20400a90 	.word	0x20400a90
  4001e4:	20400a88 	.word	0x20400a88

004001e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001e8:	3801      	subs	r0, #1
  4001ea:	2802      	cmp	r0, #2
  4001ec:	d815      	bhi.n	40021a <_write+0x32>
{
  4001ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f2:	460e      	mov	r6, r1
  4001f4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001f6:	b19a      	cbz	r2, 400220 <_write+0x38>
  4001f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400234 <_write+0x4c>
  4001fe:	4f0c      	ldr	r7, [pc, #48]	; (400230 <_write+0x48>)
  400200:	f8d8 0000 	ldr.w	r0, [r8]
  400204:	f815 1b01 	ldrb.w	r1, [r5], #1
  400208:	683b      	ldr	r3, [r7, #0]
  40020a:	4798      	blx	r3
  40020c:	2800      	cmp	r0, #0
  40020e:	db0a      	blt.n	400226 <_write+0x3e>
  400210:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400212:	3c01      	subs	r4, #1
  400214:	d1f4      	bne.n	400200 <_write+0x18>
  400216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40021a:	f04f 30ff 	mov.w	r0, #4294967295
  40021e:	4770      	bx	lr
	for (; len != 0; --len) {
  400220:	4610      	mov	r0, r2
  400222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400226:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40022e:	bf00      	nop
  400230:	20400a8c 	.word	0x20400a8c
  400234:	20400a90 	.word	0x20400a90

00400238 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400238:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40023a:	010b      	lsls	r3, r1, #4
  40023c:	4293      	cmp	r3, r2
  40023e:	d914      	bls.n	40026a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400240:	00c9      	lsls	r1, r1, #3
  400242:	084b      	lsrs	r3, r1, #1
  400244:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400248:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40024c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40024e:	1e5c      	subs	r4, r3, #1
  400250:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400254:	428c      	cmp	r4, r1
  400256:	d901      	bls.n	40025c <usart_set_async_baudrate+0x24>
		return 1;
  400258:	2001      	movs	r0, #1
  40025a:	e017      	b.n	40028c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40025c:	6841      	ldr	r1, [r0, #4]
  40025e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400262:	6041      	str	r1, [r0, #4]
  400264:	e00c      	b.n	400280 <usart_set_async_baudrate+0x48>
		return 1;
  400266:	2001      	movs	r0, #1
  400268:	e010      	b.n	40028c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40026a:	0859      	lsrs	r1, r3, #1
  40026c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400270:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400274:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400276:	1e5c      	subs	r4, r3, #1
  400278:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40027c:	428c      	cmp	r4, r1
  40027e:	d8f2      	bhi.n	400266 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400280:	0412      	lsls	r2, r2, #16
  400282:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400286:	431a      	orrs	r2, r3
  400288:	6202      	str	r2, [r0, #32]

	return 0;
  40028a:	2000      	movs	r0, #0
}
  40028c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400290:	4770      	bx	lr
	...

00400294 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400294:	4b08      	ldr	r3, [pc, #32]	; (4002b8 <usart_reset+0x24>)
  400296:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40029a:	2300      	movs	r3, #0
  40029c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40029e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4002a0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4002a2:	2388      	movs	r3, #136	; 0x88
  4002a4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4002a6:	2324      	movs	r3, #36	; 0x24
  4002a8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4002aa:	f44f 7380 	mov.w	r3, #256	; 0x100
  4002ae:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4002b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4002b4:	6003      	str	r3, [r0, #0]
  4002b6:	4770      	bx	lr
  4002b8:	55534100 	.word	0x55534100

004002bc <usart_init_rs232>:
{
  4002bc:	b570      	push	{r4, r5, r6, lr}
  4002be:	4605      	mov	r5, r0
  4002c0:	460c      	mov	r4, r1
  4002c2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4002c4:	4b0f      	ldr	r3, [pc, #60]	; (400304 <usart_init_rs232+0x48>)
  4002c6:	4798      	blx	r3
	ul_reg_val = 0;
  4002c8:	2200      	movs	r2, #0
  4002ca:	4b0f      	ldr	r3, [pc, #60]	; (400308 <usart_init_rs232+0x4c>)
  4002cc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002ce:	b1a4      	cbz	r4, 4002fa <usart_init_rs232+0x3e>
  4002d0:	4632      	mov	r2, r6
  4002d2:	6821      	ldr	r1, [r4, #0]
  4002d4:	4628      	mov	r0, r5
  4002d6:	4b0d      	ldr	r3, [pc, #52]	; (40030c <usart_init_rs232+0x50>)
  4002d8:	4798      	blx	r3
  4002da:	4602      	mov	r2, r0
  4002dc:	b978      	cbnz	r0, 4002fe <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002de:	6863      	ldr	r3, [r4, #4]
  4002e0:	68a1      	ldr	r1, [r4, #8]
  4002e2:	430b      	orrs	r3, r1
  4002e4:	6921      	ldr	r1, [r4, #16]
  4002e6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002e8:	68e1      	ldr	r1, [r4, #12]
  4002ea:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002ec:	4906      	ldr	r1, [pc, #24]	; (400308 <usart_init_rs232+0x4c>)
  4002ee:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4002f0:	6869      	ldr	r1, [r5, #4]
  4002f2:	430b      	orrs	r3, r1
  4002f4:	606b      	str	r3, [r5, #4]
}
  4002f6:	4610      	mov	r0, r2
  4002f8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4002fa:	2201      	movs	r2, #1
  4002fc:	e7fb      	b.n	4002f6 <usart_init_rs232+0x3a>
  4002fe:	2201      	movs	r2, #1
  400300:	e7f9      	b.n	4002f6 <usart_init_rs232+0x3a>
  400302:	bf00      	nop
  400304:	00400295 	.word	0x00400295
  400308:	204009d4 	.word	0x204009d4
  40030c:	00400239 	.word	0x00400239

00400310 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400310:	2340      	movs	r3, #64	; 0x40
  400312:	6003      	str	r3, [r0, #0]
  400314:	4770      	bx	lr

00400316 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400316:	2310      	movs	r3, #16
  400318:	6003      	str	r3, [r0, #0]
  40031a:	4770      	bx	lr

0040031c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40031c:	6943      	ldr	r3, [r0, #20]
  40031e:	f013 0f02 	tst.w	r3, #2
  400322:	d004      	beq.n	40032e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400324:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400328:	61c1      	str	r1, [r0, #28]
	return 0;
  40032a:	2000      	movs	r0, #0
  40032c:	4770      	bx	lr
		return 1;
  40032e:	2001      	movs	r0, #1
}
  400330:	4770      	bx	lr

00400332 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400332:	6943      	ldr	r3, [r0, #20]
  400334:	f013 0f01 	tst.w	r3, #1
  400338:	d005      	beq.n	400346 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40033a:	6983      	ldr	r3, [r0, #24]
  40033c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400340:	600b      	str	r3, [r1, #0]
	return 0;
  400342:	2000      	movs	r0, #0
  400344:	4770      	bx	lr
		return 1;
  400346:	2001      	movs	r0, #1
}
  400348:	4770      	bx	lr
	...

0040034c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40034c:	b570      	push	{r4, r5, r6, lr}
  40034e:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400350:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400352:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400354:	4013      	ands	r3, r2
  400356:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400358:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40035a:	4e1c      	ldr	r6, [pc, #112]	; (4003cc <afec_process_callback+0x80>)
  40035c:	4d1c      	ldr	r5, [pc, #112]	; (4003d0 <afec_process_callback+0x84>)
  40035e:	42a8      	cmp	r0, r5
  400360:	bf14      	ite	ne
  400362:	2000      	movne	r0, #0
  400364:	2001      	moveq	r0, #1
  400366:	0105      	lsls	r5, r0, #4
  400368:	e00b      	b.n	400382 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40036a:	2c0e      	cmp	r4, #14
  40036c:	d81e      	bhi.n	4003ac <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40036e:	9a01      	ldr	r2, [sp, #4]
  400370:	f104 010c 	add.w	r1, r4, #12
  400374:	2301      	movs	r3, #1
  400376:	408b      	lsls	r3, r1
  400378:	4213      	tst	r3, r2
  40037a:	d110      	bne.n	40039e <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40037c:	3401      	adds	r4, #1
  40037e:	2c10      	cmp	r4, #16
  400380:	d022      	beq.n	4003c8 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400382:	2c0b      	cmp	r4, #11
  400384:	d8f1      	bhi.n	40036a <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400386:	9a01      	ldr	r2, [sp, #4]
  400388:	2301      	movs	r3, #1
  40038a:	40a3      	lsls	r3, r4
  40038c:	4213      	tst	r3, r2
  40038e:	d0f5      	beq.n	40037c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400390:	192b      	adds	r3, r5, r4
  400392:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400396:	2b00      	cmp	r3, #0
  400398:	d0f0      	beq.n	40037c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40039a:	4798      	blx	r3
  40039c:	e7ee      	b.n	40037c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40039e:	192b      	adds	r3, r5, r4
  4003a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4003a4:	2b00      	cmp	r3, #0
  4003a6:	d0e9      	beq.n	40037c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4003a8:	4798      	blx	r3
  4003aa:	e7e7      	b.n	40037c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4003ac:	9a01      	ldr	r2, [sp, #4]
  4003ae:	f104 010f 	add.w	r1, r4, #15
  4003b2:	2301      	movs	r3, #1
  4003b4:	408b      	lsls	r3, r1
  4003b6:	4213      	tst	r3, r2
  4003b8:	d0e0      	beq.n	40037c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4003ba:	192b      	adds	r3, r5, r4
  4003bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4003c0:	2b00      	cmp	r3, #0
  4003c2:	d0db      	beq.n	40037c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4003c4:	4798      	blx	r3
  4003c6:	e7d9      	b.n	40037c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4003c8:	b002      	add	sp, #8
  4003ca:	bd70      	pop	{r4, r5, r6, pc}
  4003cc:	20400a9c 	.word	0x20400a9c
  4003d0:	40064000 	.word	0x40064000

004003d4 <afec_ch_set_config>:
{
  4003d4:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4003d6:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4003d8:	2301      	movs	r3, #1
  4003da:	408b      	lsls	r3, r1
  4003dc:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4003e0:	7815      	ldrb	r5, [r2, #0]
  4003e2:	2d00      	cmp	r5, #0
  4003e4:	bf08      	it	eq
  4003e6:	2300      	moveq	r3, #0
  4003e8:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4003ea:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4003ec:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4003ee:	004b      	lsls	r3, r1, #1
  4003f0:	2103      	movs	r1, #3
  4003f2:	4099      	lsls	r1, r3
  4003f4:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4003f8:	7851      	ldrb	r1, [r2, #1]
  4003fa:	4099      	lsls	r1, r3
  4003fc:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4003fe:	6541      	str	r1, [r0, #84]	; 0x54
}
  400400:	bc30      	pop	{r4, r5}
  400402:	4770      	bx	lr

00400404 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400404:	2200      	movs	r2, #0
  400406:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400408:	4b08      	ldr	r3, [pc, #32]	; (40042c <afec_get_config_defaults+0x28>)
  40040a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40040c:	4b08      	ldr	r3, [pc, #32]	; (400430 <afec_get_config_defaults+0x2c>)
  40040e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400414:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  400416:	2302      	movs	r3, #2
  400418:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40041a:	2301      	movs	r3, #1
  40041c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40041e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400420:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400422:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400424:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400426:	7583      	strb	r3, [r0, #22]
  400428:	4770      	bx	lr
  40042a:	bf00      	nop
  40042c:	11e1a300 	.word	0x11e1a300
  400430:	005b8d80 	.word	0x005b8d80

00400434 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400434:	2300      	movs	r3, #0
  400436:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400438:	2301      	movs	r3, #1
  40043a:	7043      	strb	r3, [r0, #1]
  40043c:	4770      	bx	lr
	...

00400440 <afec_init>:
	return afec->AFEC_ISR;
  400440:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400442:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400446:	d001      	beq.n	40044c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400448:	2019      	movs	r0, #25
  40044a:	4770      	bx	lr
{
  40044c:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40044e:	2301      	movs	r3, #1
  400450:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400452:	7ccb      	ldrb	r3, [r1, #19]
  400454:	2b00      	cmp	r3, #0
  400456:	bf18      	it	ne
  400458:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40045c:	684b      	ldr	r3, [r1, #4]
  40045e:	688c      	ldr	r4, [r1, #8]
  400460:	fbb3 f3f4 	udiv	r3, r3, r4
  400464:	3b01      	subs	r3, #1
  400466:	021b      	lsls	r3, r3, #8
  400468:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40046a:	68cc      	ldr	r4, [r1, #12]
  40046c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400470:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400472:	7c0c      	ldrb	r4, [r1, #16]
  400474:	0624      	lsls	r4, r4, #24
  400476:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40047a:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  40047c:	7c4c      	ldrb	r4, [r1, #17]
  40047e:	0724      	lsls	r4, r4, #28
  400480:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400484:	4323      	orrs	r3, r4
  400486:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400488:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40048a:	7d0b      	ldrb	r3, [r1, #20]
  40048c:	2b00      	cmp	r3, #0
  40048e:	bf14      	ite	ne
  400490:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400494:	2300      	moveq	r3, #0
  400496:	680a      	ldr	r2, [r1, #0]
  400498:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40049a:	7d4a      	ldrb	r2, [r1, #21]
  40049c:	2a00      	cmp	r2, #0
  40049e:	bf14      	ite	ne
  4004a0:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4004a4:	2200      	moveq	r2, #0
			(config->resolution) |
  4004a6:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4004a8:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4004aa:	7d8b      	ldrb	r3, [r1, #22]
  4004ac:	021b      	lsls	r3, r3, #8
  4004ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4004b2:	f043 030c 	orr.w	r3, r3, #12
  4004b6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4004ba:	4b0f      	ldr	r3, [pc, #60]	; (4004f8 <afec_init+0xb8>)
  4004bc:	4298      	cmp	r0, r3
  4004be:	d006      	beq.n	4004ce <afec_init+0x8e>
	if(afec == AFEC1) {
  4004c0:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <afec_init+0xbc>)
  4004c2:	4298      	cmp	r0, r3
  4004c4:	d00d      	beq.n	4004e2 <afec_init+0xa2>
	return STATUS_OK;
  4004c6:	2000      	movs	r0, #0
}
  4004c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004cc:	4770      	bx	lr
  4004ce:	4b0c      	ldr	r3, [pc, #48]	; (400500 <afec_init+0xc0>)
  4004d0:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4004d4:	2200      	movs	r2, #0
  4004d6:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4004da:	428b      	cmp	r3, r1
  4004dc:	d1fb      	bne.n	4004d6 <afec_init+0x96>
	return STATUS_OK;
  4004de:	2000      	movs	r0, #0
  4004e0:	e7f2      	b.n	4004c8 <afec_init+0x88>
  4004e2:	4b08      	ldr	r3, [pc, #32]	; (400504 <afec_init+0xc4>)
  4004e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4004e8:	2200      	movs	r2, #0
  4004ea:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4004ee:	428b      	cmp	r3, r1
  4004f0:	d1fb      	bne.n	4004ea <afec_init+0xaa>
	return STATUS_OK;
  4004f2:	2000      	movs	r0, #0
  4004f4:	e7e8      	b.n	4004c8 <afec_init+0x88>
  4004f6:	bf00      	nop
  4004f8:	4003c000 	.word	0x4003c000
  4004fc:	40064000 	.word	0x40064000
  400500:	20400a98 	.word	0x20400a98
  400504:	20400adc 	.word	0x20400adc

00400508 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400508:	4b0c      	ldr	r3, [pc, #48]	; (40053c <afec_enable_interrupt+0x34>)
  40050a:	4299      	cmp	r1, r3
  40050c:	d007      	beq.n	40051e <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40050e:	290b      	cmp	r1, #11
  400510:	d80b      	bhi.n	40052a <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400512:	d006      	beq.n	400522 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6241      	str	r1, [r0, #36]	; 0x24
  40051c:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40051e:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400520:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400522:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400526:	6243      	str	r3, [r0, #36]	; 0x24
  400528:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40052a:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40052c:	bf94      	ite	ls
  40052e:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400530:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400532:	2301      	movs	r3, #1
  400534:	fa03 f101 	lsl.w	r1, r3, r1
  400538:	6241      	str	r1, [r0, #36]	; 0x24
  40053a:	4770      	bx	lr
  40053c:	47000fff 	.word	0x47000fff

00400540 <afec_set_callback>:
{
  400540:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400542:	4c11      	ldr	r4, [pc, #68]	; (400588 <afec_set_callback+0x48>)
  400544:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400546:	bf0c      	ite	eq
  400548:	2410      	moveq	r4, #16
  40054a:	2400      	movne	r4, #0
  40054c:	440c      	add	r4, r1
  40054e:	4d0f      	ldr	r5, [pc, #60]	; (40058c <afec_set_callback+0x4c>)
  400550:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400554:	d10a      	bne.n	40056c <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400556:	4a0e      	ldr	r2, [pc, #56]	; (400590 <afec_set_callback+0x50>)
  400558:	f44f 7480 	mov.w	r4, #256	; 0x100
  40055c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400560:	015b      	lsls	r3, r3, #5
  400562:	b2db      	uxtb	r3, r3
  400564:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400568:	6054      	str	r4, [r2, #4]
  40056a:	e009      	b.n	400580 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40056c:	4a08      	ldr	r2, [pc, #32]	; (400590 <afec_set_callback+0x50>)
  40056e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400572:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400576:	015b      	lsls	r3, r3, #5
  400578:	b2db      	uxtb	r3, r3
  40057a:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40057e:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400580:	4b04      	ldr	r3, [pc, #16]	; (400594 <afec_set_callback+0x54>)
  400582:	4798      	blx	r3
  400584:	bd38      	pop	{r3, r4, r5, pc}
  400586:	bf00      	nop
  400588:	40064000 	.word	0x40064000
  40058c:	20400a9c 	.word	0x20400a9c
  400590:	e000e100 	.word	0xe000e100
  400594:	00400509 	.word	0x00400509

00400598 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400598:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40059a:	4802      	ldr	r0, [pc, #8]	; (4005a4 <AFEC0_Handler+0xc>)
  40059c:	4b02      	ldr	r3, [pc, #8]	; (4005a8 <AFEC0_Handler+0x10>)
  40059e:	4798      	blx	r3
  4005a0:	bd08      	pop	{r3, pc}
  4005a2:	bf00      	nop
  4005a4:	4003c000 	.word	0x4003c000
  4005a8:	0040034d 	.word	0x0040034d

004005ac <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4005ac:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4005ae:	4802      	ldr	r0, [pc, #8]	; (4005b8 <AFEC1_Handler+0xc>)
  4005b0:	4b02      	ldr	r3, [pc, #8]	; (4005bc <AFEC1_Handler+0x10>)
  4005b2:	4798      	blx	r3
  4005b4:	bd08      	pop	{r3, pc}
  4005b6:	bf00      	nop
  4005b8:	40064000 	.word	0x40064000
  4005bc:	0040034d 	.word	0x0040034d

004005c0 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4005c0:	b500      	push	{lr}
  4005c2:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4005c4:	4b13      	ldr	r3, [pc, #76]	; (400614 <afec_enable+0x54>)
  4005c6:	4298      	cmp	r0, r3
  4005c8:	bf0c      	ite	eq
  4005ca:	2028      	moveq	r0, #40	; 0x28
  4005cc:	201d      	movne	r0, #29
  4005ce:	4b12      	ldr	r3, [pc, #72]	; (400618 <afec_enable+0x58>)
  4005d0:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4005d2:	4b12      	ldr	r3, [pc, #72]	; (40061c <afec_enable+0x5c>)
  4005d4:	789b      	ldrb	r3, [r3, #2]
  4005d6:	2bff      	cmp	r3, #255	; 0xff
  4005d8:	d01a      	beq.n	400610 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005da:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4005de:	fab3 f383 	clz	r3, r3
  4005e2:	095b      	lsrs	r3, r3, #5
  4005e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4005e6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005ec:	2200      	movs	r2, #0
  4005ee:	4b0c      	ldr	r3, [pc, #48]	; (400620 <afec_enable+0x60>)
  4005f0:	701a      	strb	r2, [r3, #0]
	return flags;
  4005f2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4005f4:	4a09      	ldr	r2, [pc, #36]	; (40061c <afec_enable+0x5c>)
  4005f6:	7893      	ldrb	r3, [r2, #2]
  4005f8:	3301      	adds	r3, #1
  4005fa:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005fc:	b129      	cbz	r1, 40060a <afec_enable+0x4a>
		cpu_irq_enable();
  4005fe:	2201      	movs	r2, #1
  400600:	4b07      	ldr	r3, [pc, #28]	; (400620 <afec_enable+0x60>)
  400602:	701a      	strb	r2, [r3, #0]
  400604:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400608:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40060a:	b003      	add	sp, #12
  40060c:	f85d fb04 	ldr.w	pc, [sp], #4
  400610:	e7fe      	b.n	400610 <afec_enable+0x50>
  400612:	bf00      	nop
  400614:	40064000 	.word	0x40064000
  400618:	00400a31 	.word	0x00400a31
  40061c:	20400a94 	.word	0x20400a94
  400620:	20400000 	.word	0x20400000

00400624 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400624:	6943      	ldr	r3, [r0, #20]
  400626:	f013 0f02 	tst.w	r3, #2
  40062a:	d002      	beq.n	400632 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40062c:	61c1      	str	r1, [r0, #28]
	return 0;
  40062e:	2000      	movs	r0, #0
  400630:	4770      	bx	lr
		return 1;
  400632:	2001      	movs	r0, #1
}
  400634:	4770      	bx	lr

00400636 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400636:	6943      	ldr	r3, [r0, #20]
  400638:	f013 0f01 	tst.w	r3, #1
  40063c:	d003      	beq.n	400646 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40063e:	6983      	ldr	r3, [r0, #24]
  400640:	700b      	strb	r3, [r1, #0]
	return 0;
  400642:	2000      	movs	r0, #0
  400644:	4770      	bx	lr
		return 1;
  400646:	2001      	movs	r0, #1
}
  400648:	4770      	bx	lr
	...

0040064c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40064c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40064e:	4810      	ldr	r0, [pc, #64]	; (400690 <sysclk_init+0x44>)
  400650:	4b10      	ldr	r3, [pc, #64]	; (400694 <sysclk_init+0x48>)
  400652:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400654:	213e      	movs	r1, #62	; 0x3e
  400656:	2000      	movs	r0, #0
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <sysclk_init+0x4c>)
  40065a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40065c:	4c0f      	ldr	r4, [pc, #60]	; (40069c <sysclk_init+0x50>)
  40065e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400660:	2800      	cmp	r0, #0
  400662:	d0fc      	beq.n	40065e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <sysclk_init+0x54>)
  400666:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400668:	4a0e      	ldr	r2, [pc, #56]	; (4006a4 <sysclk_init+0x58>)
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <sysclk_init+0x5c>)
  40066c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40066e:	4c0f      	ldr	r4, [pc, #60]	; (4006ac <sysclk_init+0x60>)
  400670:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400672:	2800      	cmp	r0, #0
  400674:	d0fc      	beq.n	400670 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400676:	2002      	movs	r0, #2
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <sysclk_init+0x64>)
  40067a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40067c:	2000      	movs	r0, #0
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <sysclk_init+0x68>)
  400680:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <sysclk_init+0x6c>)
  400684:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400686:	4802      	ldr	r0, [pc, #8]	; (400690 <sysclk_init+0x44>)
  400688:	4b02      	ldr	r3, [pc, #8]	; (400694 <sysclk_init+0x48>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	11e1a300 	.word	0x11e1a300
  400694:	00400c5d 	.word	0x00400c5d
  400698:	004009ad 	.word	0x004009ad
  40069c:	00400a01 	.word	0x00400a01
  4006a0:	00400a11 	.word	0x00400a11
  4006a4:	20183f01 	.word	0x20183f01
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	00400a21 	.word	0x00400a21
  4006b0:	00400911 	.word	0x00400911
  4006b4:	00400949 	.word	0x00400949
  4006b8:	00400b51 	.word	0x00400b51

004006bc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4006be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4006c2:	4b5c      	ldr	r3, [pc, #368]	; (400834 <board_init+0x178>)
  4006c4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4006c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4006ca:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4006ce:	4b5a      	ldr	r3, [pc, #360]	; (400838 <board_init+0x17c>)
  4006d0:	2200      	movs	r2, #0
  4006d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4006d6:	695a      	ldr	r2, [r3, #20]
  4006d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4006dc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4006de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4006e2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4006e6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4006ea:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4006ee:	f007 0007 	and.w	r0, r7, #7
  4006f2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4006f4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4006f8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4006fc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400700:	f3bf 8f4f 	dsb	sy
  400704:	f04f 34ff 	mov.w	r4, #4294967295
  400708:	fa04 fc00 	lsl.w	ip, r4, r0
  40070c:	fa06 f000 	lsl.w	r0, r6, r0
  400710:	fa04 f40e 	lsl.w	r4, r4, lr
  400714:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400718:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40071a:	463a      	mov	r2, r7
  40071c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40071e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400722:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400726:	3a01      	subs	r2, #1
  400728:	4423      	add	r3, r4
  40072a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40072e:	d1f6      	bne.n	40071e <board_init+0x62>
        } while(sets--);
  400730:	3e01      	subs	r6, #1
  400732:	4460      	add	r0, ip
  400734:	f1b6 3fff 	cmp.w	r6, #4294967295
  400738:	d1ef      	bne.n	40071a <board_init+0x5e>
  40073a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40073e:	4b3e      	ldr	r3, [pc, #248]	; (400838 <board_init+0x17c>)
  400740:	695a      	ldr	r2, [r3, #20]
  400742:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400746:	615a      	str	r2, [r3, #20]
  400748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40074c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400750:	4a3a      	ldr	r2, [pc, #232]	; (40083c <board_init+0x180>)
  400752:	493b      	ldr	r1, [pc, #236]	; (400840 <board_init+0x184>)
  400754:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400756:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40075a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40075c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400760:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400764:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400768:	f022 0201 	bic.w	r2, r2, #1
  40076c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400770:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400774:	f022 0201 	bic.w	r2, r2, #1
  400778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40077c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400780:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400784:	200a      	movs	r0, #10
  400786:	4c2f      	ldr	r4, [pc, #188]	; (400844 <board_init+0x188>)
  400788:	47a0      	blx	r4
  40078a:	200b      	movs	r0, #11
  40078c:	47a0      	blx	r4
  40078e:	200c      	movs	r0, #12
  400790:	47a0      	blx	r4
  400792:	2010      	movs	r0, #16
  400794:	47a0      	blx	r4
  400796:	2011      	movs	r0, #17
  400798:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40079a:	4b2b      	ldr	r3, [pc, #172]	; (400848 <board_init+0x18c>)
  40079c:	f44f 7280 	mov.w	r2, #256	; 0x100
  4007a0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007a6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4007a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4007ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4007b0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4007b6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4007b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007bc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4007be:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4007c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4007c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4007c6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4007ca:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4007cc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4007ce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4007d2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4007d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4007d8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4007dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4007e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007e4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4007e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4007ea:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4007ec:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4007ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4007f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4007f4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4007f8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4007fa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4007fc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400800:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400802:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400804:	4a11      	ldr	r2, [pc, #68]	; (40084c <board_init+0x190>)
  400806:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40080a:	f043 0310 	orr.w	r3, r3, #16
  40080e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400812:	4b0f      	ldr	r3, [pc, #60]	; (400850 <board_init+0x194>)
  400814:	2210      	movs	r2, #16
  400816:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40081c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40081e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400824:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400826:	4311      	orrs	r1, r2
  400828:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40082a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40082c:	4311      	orrs	r1, r2
  40082e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400830:	605a      	str	r2, [r3, #4]
  400832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400834:	400e1850 	.word	0x400e1850
  400838:	e000ed00 	.word	0xe000ed00
  40083c:	400e0c00 	.word	0x400e0c00
  400840:	5a00080c 	.word	0x5a00080c
  400844:	00400a31 	.word	0x00400a31
  400848:	400e1200 	.word	0x400e1200
  40084c:	40088000 	.word	0x40088000
  400850:	400e1000 	.word	0x400e1000

00400854 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400854:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400856:	4770      	bx	lr

00400858 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400858:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40085a:	4770      	bx	lr

0040085c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40085c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400860:	4604      	mov	r4, r0
  400862:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400864:	4b0e      	ldr	r3, [pc, #56]	; (4008a0 <pio_handler_process+0x44>)
  400866:	4798      	blx	r3
  400868:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40086a:	4620      	mov	r0, r4
  40086c:	4b0d      	ldr	r3, [pc, #52]	; (4008a4 <pio_handler_process+0x48>)
  40086e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400870:	4005      	ands	r5, r0
  400872:	d013      	beq.n	40089c <pio_handler_process+0x40>
  400874:	4c0c      	ldr	r4, [pc, #48]	; (4008a8 <pio_handler_process+0x4c>)
  400876:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40087a:	e003      	b.n	400884 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40087c:	42b4      	cmp	r4, r6
  40087e:	d00d      	beq.n	40089c <pio_handler_process+0x40>
  400880:	3410      	adds	r4, #16
		while (status != 0) {
  400882:	b15d      	cbz	r5, 40089c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400884:	6820      	ldr	r0, [r4, #0]
  400886:	4540      	cmp	r0, r8
  400888:	d1f8      	bne.n	40087c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40088a:	6861      	ldr	r1, [r4, #4]
  40088c:	4229      	tst	r1, r5
  40088e:	d0f5      	beq.n	40087c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400890:	68e3      	ldr	r3, [r4, #12]
  400892:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400894:	6863      	ldr	r3, [r4, #4]
  400896:	ea25 0503 	bic.w	r5, r5, r3
  40089a:	e7ef      	b.n	40087c <pio_handler_process+0x20>
  40089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008a0:	00400855 	.word	0x00400855
  4008a4:	00400859 	.word	0x00400859
  4008a8:	204009d8 	.word	0x204009d8

004008ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4008ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4008ae:	210a      	movs	r1, #10
  4008b0:	4801      	ldr	r0, [pc, #4]	; (4008b8 <PIOA_Handler+0xc>)
  4008b2:	4b02      	ldr	r3, [pc, #8]	; (4008bc <PIOA_Handler+0x10>)
  4008b4:	4798      	blx	r3
  4008b6:	bd08      	pop	{r3, pc}
  4008b8:	400e0e00 	.word	0x400e0e00
  4008bc:	0040085d 	.word	0x0040085d

004008c0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4008c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4008c2:	210b      	movs	r1, #11
  4008c4:	4801      	ldr	r0, [pc, #4]	; (4008cc <PIOB_Handler+0xc>)
  4008c6:	4b02      	ldr	r3, [pc, #8]	; (4008d0 <PIOB_Handler+0x10>)
  4008c8:	4798      	blx	r3
  4008ca:	bd08      	pop	{r3, pc}
  4008cc:	400e1000 	.word	0x400e1000
  4008d0:	0040085d 	.word	0x0040085d

004008d4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4008d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4008d6:	210c      	movs	r1, #12
  4008d8:	4801      	ldr	r0, [pc, #4]	; (4008e0 <PIOC_Handler+0xc>)
  4008da:	4b02      	ldr	r3, [pc, #8]	; (4008e4 <PIOC_Handler+0x10>)
  4008dc:	4798      	blx	r3
  4008de:	bd08      	pop	{r3, pc}
  4008e0:	400e1200 	.word	0x400e1200
  4008e4:	0040085d 	.word	0x0040085d

004008e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4008e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4008ea:	2110      	movs	r1, #16
  4008ec:	4801      	ldr	r0, [pc, #4]	; (4008f4 <PIOD_Handler+0xc>)
  4008ee:	4b02      	ldr	r3, [pc, #8]	; (4008f8 <PIOD_Handler+0x10>)
  4008f0:	4798      	blx	r3
  4008f2:	bd08      	pop	{r3, pc}
  4008f4:	400e1400 	.word	0x400e1400
  4008f8:	0040085d 	.word	0x0040085d

004008fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4008fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4008fe:	2111      	movs	r1, #17
  400900:	4801      	ldr	r0, [pc, #4]	; (400908 <PIOE_Handler+0xc>)
  400902:	4b02      	ldr	r3, [pc, #8]	; (40090c <PIOE_Handler+0x10>)
  400904:	4798      	blx	r3
  400906:	bd08      	pop	{r3, pc}
  400908:	400e1600 	.word	0x400e1600
  40090c:	0040085d 	.word	0x0040085d

00400910 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400910:	2803      	cmp	r0, #3
  400912:	d011      	beq.n	400938 <pmc_mck_set_division+0x28>
  400914:	2804      	cmp	r0, #4
  400916:	d012      	beq.n	40093e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400918:	2802      	cmp	r0, #2
  40091a:	bf0c      	ite	eq
  40091c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400920:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400922:	4a08      	ldr	r2, [pc, #32]	; (400944 <pmc_mck_set_division+0x34>)
  400924:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40092a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40092c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40092e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400930:	f013 0f08 	tst.w	r3, #8
  400934:	d0fb      	beq.n	40092e <pmc_mck_set_division+0x1e>
}
  400936:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400938:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40093c:	e7f1      	b.n	400922 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40093e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400942:	e7ee      	b.n	400922 <pmc_mck_set_division+0x12>
  400944:	400e0600 	.word	0x400e0600

00400948 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400948:	4a17      	ldr	r2, [pc, #92]	; (4009a8 <pmc_switch_mck_to_pllack+0x60>)
  40094a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40094c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400950:	4318      	orrs	r0, r3
  400952:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400954:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400956:	f013 0f08 	tst.w	r3, #8
  40095a:	d10a      	bne.n	400972 <pmc_switch_mck_to_pllack+0x2a>
  40095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400960:	4911      	ldr	r1, [pc, #68]	; (4009a8 <pmc_switch_mck_to_pllack+0x60>)
  400962:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400964:	f012 0f08 	tst.w	r2, #8
  400968:	d103      	bne.n	400972 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40096a:	3b01      	subs	r3, #1
  40096c:	d1f9      	bne.n	400962 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40096e:	2001      	movs	r0, #1
  400970:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400972:	4a0d      	ldr	r2, [pc, #52]	; (4009a8 <pmc_switch_mck_to_pllack+0x60>)
  400974:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400976:	f023 0303 	bic.w	r3, r3, #3
  40097a:	f043 0302 	orr.w	r3, r3, #2
  40097e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400980:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400982:	f013 0f08 	tst.w	r3, #8
  400986:	d10a      	bne.n	40099e <pmc_switch_mck_to_pllack+0x56>
  400988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40098c:	4906      	ldr	r1, [pc, #24]	; (4009a8 <pmc_switch_mck_to_pllack+0x60>)
  40098e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400990:	f012 0f08 	tst.w	r2, #8
  400994:	d105      	bne.n	4009a2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400996:	3b01      	subs	r3, #1
  400998:	d1f9      	bne.n	40098e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40099a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40099c:	4770      	bx	lr
	return 0;
  40099e:	2000      	movs	r0, #0
  4009a0:	4770      	bx	lr
  4009a2:	2000      	movs	r0, #0
  4009a4:	4770      	bx	lr
  4009a6:	bf00      	nop
  4009a8:	400e0600 	.word	0x400e0600

004009ac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009ac:	b9a0      	cbnz	r0, 4009d8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009ae:	480e      	ldr	r0, [pc, #56]	; (4009e8 <pmc_switch_mainck_to_xtal+0x3c>)
  4009b0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4009b2:	0209      	lsls	r1, r1, #8
  4009b4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009b6:	4a0d      	ldr	r2, [pc, #52]	; (4009ec <pmc_switch_mainck_to_xtal+0x40>)
  4009b8:	401a      	ands	r2, r3
  4009ba:	4b0d      	ldr	r3, [pc, #52]	; (4009f0 <pmc_switch_mainck_to_xtal+0x44>)
  4009bc:	4313      	orrs	r3, r2
  4009be:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009c0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4009c2:	4602      	mov	r2, r0
  4009c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009c6:	f013 0f01 	tst.w	r3, #1
  4009ca:	d0fb      	beq.n	4009c4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4009cc:	4a06      	ldr	r2, [pc, #24]	; (4009e8 <pmc_switch_mainck_to_xtal+0x3c>)
  4009ce:	6a11      	ldr	r1, [r2, #32]
  4009d0:	4b08      	ldr	r3, [pc, #32]	; (4009f4 <pmc_switch_mainck_to_xtal+0x48>)
  4009d2:	430b      	orrs	r3, r1
  4009d4:	6213      	str	r3, [r2, #32]
  4009d6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009d8:	4903      	ldr	r1, [pc, #12]	; (4009e8 <pmc_switch_mainck_to_xtal+0x3c>)
  4009da:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009dc:	4a06      	ldr	r2, [pc, #24]	; (4009f8 <pmc_switch_mainck_to_xtal+0x4c>)
  4009de:	401a      	ands	r2, r3
  4009e0:	4b06      	ldr	r3, [pc, #24]	; (4009fc <pmc_switch_mainck_to_xtal+0x50>)
  4009e2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009e4:	620b      	str	r3, [r1, #32]
  4009e6:	4770      	bx	lr
  4009e8:	400e0600 	.word	0x400e0600
  4009ec:	ffc8fffc 	.word	0xffc8fffc
  4009f0:	00370001 	.word	0x00370001
  4009f4:	01370000 	.word	0x01370000
  4009f8:	fec8fffc 	.word	0xfec8fffc
  4009fc:	01370002 	.word	0x01370002

00400a00 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a00:	4b02      	ldr	r3, [pc, #8]	; (400a0c <pmc_osc_is_ready_mainck+0xc>)
  400a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a04:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e0600 	.word	0x400e0600

00400a10 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a14:	4b01      	ldr	r3, [pc, #4]	; (400a1c <pmc_disable_pllack+0xc>)
  400a16:	629a      	str	r2, [r3, #40]	; 0x28
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	400e0600 	.word	0x400e0600

00400a20 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a20:	4b02      	ldr	r3, [pc, #8]	; (400a2c <pmc_is_locked_pllack+0xc>)
  400a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a24:	f000 0002 	and.w	r0, r0, #2
  400a28:	4770      	bx	lr
  400a2a:	bf00      	nop
  400a2c:	400e0600 	.word	0x400e0600

00400a30 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400a30:	283f      	cmp	r0, #63	; 0x3f
  400a32:	d81e      	bhi.n	400a72 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400a34:	281f      	cmp	r0, #31
  400a36:	d80c      	bhi.n	400a52 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a38:	4b11      	ldr	r3, [pc, #68]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a3a:	699a      	ldr	r2, [r3, #24]
  400a3c:	2301      	movs	r3, #1
  400a3e:	4083      	lsls	r3, r0
  400a40:	4393      	bics	r3, r2
  400a42:	d018      	beq.n	400a76 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a44:	2301      	movs	r3, #1
  400a46:	fa03 f000 	lsl.w	r0, r3, r0
  400a4a:	4b0d      	ldr	r3, [pc, #52]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a4c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a4e:	2000      	movs	r0, #0
  400a50:	4770      	bx	lr
		ul_id -= 32;
  400a52:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400a54:	4b0a      	ldr	r3, [pc, #40]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a56:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400a5a:	2301      	movs	r3, #1
  400a5c:	4083      	lsls	r3, r0
  400a5e:	4393      	bics	r3, r2
  400a60:	d00b      	beq.n	400a7a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400a62:	2301      	movs	r3, #1
  400a64:	fa03 f000 	lsl.w	r0, r3, r0
  400a68:	4b05      	ldr	r3, [pc, #20]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a6a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400a6e:	2000      	movs	r0, #0
  400a70:	4770      	bx	lr
		return 1;
  400a72:	2001      	movs	r0, #1
  400a74:	4770      	bx	lr
	return 0;
  400a76:	2000      	movs	r0, #0
  400a78:	4770      	bx	lr
  400a7a:	2000      	movs	r0, #0
}
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop
  400a80:	400e0600 	.word	0x400e0600

00400a84 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a84:	e7fe      	b.n	400a84 <Dummy_Handler>
	...

00400a88 <Reset_Handler>:
{
  400a88:	b500      	push	{lr}
  400a8a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400a8c:	4b25      	ldr	r3, [pc, #148]	; (400b24 <Reset_Handler+0x9c>)
  400a8e:	4a26      	ldr	r2, [pc, #152]	; (400b28 <Reset_Handler+0xa0>)
  400a90:	429a      	cmp	r2, r3
  400a92:	d010      	beq.n	400ab6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400a94:	4b25      	ldr	r3, [pc, #148]	; (400b2c <Reset_Handler+0xa4>)
  400a96:	4a23      	ldr	r2, [pc, #140]	; (400b24 <Reset_Handler+0x9c>)
  400a98:	429a      	cmp	r2, r3
  400a9a:	d20c      	bcs.n	400ab6 <Reset_Handler+0x2e>
  400a9c:	3b01      	subs	r3, #1
  400a9e:	1a9b      	subs	r3, r3, r2
  400aa0:	f023 0303 	bic.w	r3, r3, #3
  400aa4:	3304      	adds	r3, #4
  400aa6:	4413      	add	r3, r2
  400aa8:	491f      	ldr	r1, [pc, #124]	; (400b28 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400aaa:	f851 0b04 	ldr.w	r0, [r1], #4
  400aae:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400ab2:	429a      	cmp	r2, r3
  400ab4:	d1f9      	bne.n	400aaa <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400ab6:	4b1e      	ldr	r3, [pc, #120]	; (400b30 <Reset_Handler+0xa8>)
  400ab8:	4a1e      	ldr	r2, [pc, #120]	; (400b34 <Reset_Handler+0xac>)
  400aba:	429a      	cmp	r2, r3
  400abc:	d20a      	bcs.n	400ad4 <Reset_Handler+0x4c>
  400abe:	3b01      	subs	r3, #1
  400ac0:	1a9b      	subs	r3, r3, r2
  400ac2:	f023 0303 	bic.w	r3, r3, #3
  400ac6:	3304      	adds	r3, #4
  400ac8:	4413      	add	r3, r2
                *pDest++ = 0;
  400aca:	2100      	movs	r1, #0
  400acc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ad0:	4293      	cmp	r3, r2
  400ad2:	d1fb      	bne.n	400acc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ad4:	4a18      	ldr	r2, [pc, #96]	; (400b38 <Reset_Handler+0xb0>)
  400ad6:	4b19      	ldr	r3, [pc, #100]	; (400b3c <Reset_Handler+0xb4>)
  400ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400adc:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ade:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ae2:	fab3 f383 	clz	r3, r3
  400ae6:	095b      	lsrs	r3, r3, #5
  400ae8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400aea:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400aec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400af0:	2200      	movs	r2, #0
  400af2:	4b13      	ldr	r3, [pc, #76]	; (400b40 <Reset_Handler+0xb8>)
  400af4:	701a      	strb	r2, [r3, #0]
	return flags;
  400af6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400af8:	4a12      	ldr	r2, [pc, #72]	; (400b44 <Reset_Handler+0xbc>)
  400afa:	6813      	ldr	r3, [r2, #0]
  400afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b06:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400b0a:	b129      	cbz	r1, 400b18 <Reset_Handler+0x90>
		cpu_irq_enable();
  400b0c:	2201      	movs	r2, #1
  400b0e:	4b0c      	ldr	r3, [pc, #48]	; (400b40 <Reset_Handler+0xb8>)
  400b10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400b12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b16:	b662      	cpsie	i
        __libc_init_array();
  400b18:	4b0b      	ldr	r3, [pc, #44]	; (400b48 <Reset_Handler+0xc0>)
  400b1a:	4798      	blx	r3
        main();
  400b1c:	4b0b      	ldr	r3, [pc, #44]	; (400b4c <Reset_Handler+0xc4>)
  400b1e:	4798      	blx	r3
  400b20:	e7fe      	b.n	400b20 <Reset_Handler+0x98>
  400b22:	bf00      	nop
  400b24:	20400000 	.word	0x20400000
  400b28:	004042ac 	.word	0x004042ac
  400b2c:	204009b8 	.word	0x204009b8
  400b30:	20400b44 	.word	0x20400b44
  400b34:	204009b8 	.word	0x204009b8
  400b38:	e000ed00 	.word	0xe000ed00
  400b3c:	00400000 	.word	0x00400000
  400b40:	20400000 	.word	0x20400000
  400b44:	e000ed88 	.word	0xe000ed88
  400b48:	004010d5 	.word	0x004010d5
  400b4c:	00400fcd 	.word	0x00400fcd

00400b50 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400b50:	4b3b      	ldr	r3, [pc, #236]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b54:	f003 0303 	and.w	r3, r3, #3
  400b58:	2b01      	cmp	r3, #1
  400b5a:	d01d      	beq.n	400b98 <SystemCoreClockUpdate+0x48>
  400b5c:	b183      	cbz	r3, 400b80 <SystemCoreClockUpdate+0x30>
  400b5e:	2b02      	cmp	r3, #2
  400b60:	d036      	beq.n	400bd0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b62:	4b37      	ldr	r3, [pc, #220]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b6a:	2b70      	cmp	r3, #112	; 0x70
  400b6c:	d05f      	beq.n	400c2e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b6e:	4b34      	ldr	r3, [pc, #208]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400b72:	4934      	ldr	r1, [pc, #208]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400b74:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b78:	680b      	ldr	r3, [r1, #0]
  400b7a:	40d3      	lsrs	r3, r2
  400b7c:	600b      	str	r3, [r1, #0]
  400b7e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b80:	4b31      	ldr	r3, [pc, #196]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400b82:	695b      	ldr	r3, [r3, #20]
  400b84:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b88:	bf14      	ite	ne
  400b8a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b8e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b92:	4b2c      	ldr	r3, [pc, #176]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400b94:	601a      	str	r2, [r3, #0]
  400b96:	e7e4      	b.n	400b62 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b98:	4b29      	ldr	r3, [pc, #164]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400b9a:	6a1b      	ldr	r3, [r3, #32]
  400b9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ba0:	d003      	beq.n	400baa <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ba2:	4a2a      	ldr	r2, [pc, #168]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400ba4:	4b27      	ldr	r3, [pc, #156]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	e7db      	b.n	400b62 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400baa:	4a29      	ldr	r2, [pc, #164]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bac:	4b25      	ldr	r3, [pc, #148]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bae:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400bb0:	4b23      	ldr	r3, [pc, #140]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400bb2:	6a1b      	ldr	r3, [r3, #32]
  400bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bb8:	2b10      	cmp	r3, #16
  400bba:	d005      	beq.n	400bc8 <SystemCoreClockUpdate+0x78>
  400bbc:	2b20      	cmp	r3, #32
  400bbe:	d1d0      	bne.n	400b62 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400bc0:	4a22      	ldr	r2, [pc, #136]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400bc2:	4b20      	ldr	r3, [pc, #128]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bc4:	601a      	str	r2, [r3, #0]
          break;
  400bc6:	e7cc      	b.n	400b62 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400bc8:	4a22      	ldr	r2, [pc, #136]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400bca:	4b1e      	ldr	r3, [pc, #120]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bcc:	601a      	str	r2, [r3, #0]
          break;
  400bce:	e7c8      	b.n	400b62 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400bd0:	4b1b      	ldr	r3, [pc, #108]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400bd2:	6a1b      	ldr	r3, [r3, #32]
  400bd4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bd8:	d016      	beq.n	400c08 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400bda:	4a1c      	ldr	r2, [pc, #112]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400bdc:	4b19      	ldr	r3, [pc, #100]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bde:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400be0:	4b17      	ldr	r3, [pc, #92]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400be4:	f003 0303 	and.w	r3, r3, #3
  400be8:	2b02      	cmp	r3, #2
  400bea:	d1ba      	bne.n	400b62 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bec:	4a14      	ldr	r2, [pc, #80]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400bee:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400bf2:	4814      	ldr	r0, [pc, #80]	; (400c44 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bf4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400bf8:	6803      	ldr	r3, [r0, #0]
  400bfa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bfe:	b2d2      	uxtb	r2, r2
  400c00:	fbb3 f3f2 	udiv	r3, r3, r2
  400c04:	6003      	str	r3, [r0, #0]
  400c06:	e7ac      	b.n	400b62 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c08:	4a11      	ldr	r2, [pc, #68]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400c0a:	4b0e      	ldr	r3, [pc, #56]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400c0c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c0e:	4b0c      	ldr	r3, [pc, #48]	; (400c40 <SystemCoreClockUpdate+0xf0>)
  400c10:	6a1b      	ldr	r3, [r3, #32]
  400c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c16:	2b10      	cmp	r3, #16
  400c18:	d005      	beq.n	400c26 <SystemCoreClockUpdate+0xd6>
  400c1a:	2b20      	cmp	r3, #32
  400c1c:	d1e0      	bne.n	400be0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400c1e:	4a0b      	ldr	r2, [pc, #44]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400c20:	4b08      	ldr	r3, [pc, #32]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400c22:	601a      	str	r2, [r3, #0]
          break;
  400c24:	e7dc      	b.n	400be0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400c26:	4a0b      	ldr	r2, [pc, #44]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400c28:	4b06      	ldr	r3, [pc, #24]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400c2a:	601a      	str	r2, [r3, #0]
          break;
  400c2c:	e7d8      	b.n	400be0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400c2e:	4a05      	ldr	r2, [pc, #20]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400c30:	6813      	ldr	r3, [r2, #0]
  400c32:	4909      	ldr	r1, [pc, #36]	; (400c58 <SystemCoreClockUpdate+0x108>)
  400c34:	fba1 1303 	umull	r1, r3, r1, r3
  400c38:	085b      	lsrs	r3, r3, #1
  400c3a:	6013      	str	r3, [r2, #0]
  400c3c:	4770      	bx	lr
  400c3e:	bf00      	nop
  400c40:	400e0600 	.word	0x400e0600
  400c44:	20400004 	.word	0x20400004
  400c48:	400e1810 	.word	0x400e1810
  400c4c:	00b71b00 	.word	0x00b71b00
  400c50:	003d0900 	.word	0x003d0900
  400c54:	007a1200 	.word	0x007a1200
  400c58:	aaaaaaab 	.word	0xaaaaaaab

00400c5c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400c5c:	4b16      	ldr	r3, [pc, #88]	; (400cb8 <system_init_flash+0x5c>)
  400c5e:	4298      	cmp	r0, r3
  400c60:	d913      	bls.n	400c8a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400c62:	4b16      	ldr	r3, [pc, #88]	; (400cbc <system_init_flash+0x60>)
  400c64:	4298      	cmp	r0, r3
  400c66:	d915      	bls.n	400c94 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400c68:	4b15      	ldr	r3, [pc, #84]	; (400cc0 <system_init_flash+0x64>)
  400c6a:	4298      	cmp	r0, r3
  400c6c:	d916      	bls.n	400c9c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400c6e:	4b15      	ldr	r3, [pc, #84]	; (400cc4 <system_init_flash+0x68>)
  400c70:	4298      	cmp	r0, r3
  400c72:	d917      	bls.n	400ca4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400c74:	4b14      	ldr	r3, [pc, #80]	; (400cc8 <system_init_flash+0x6c>)
  400c76:	4298      	cmp	r0, r3
  400c78:	d918      	bls.n	400cac <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400c7a:	4b14      	ldr	r3, [pc, #80]	; (400ccc <system_init_flash+0x70>)
  400c7c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c7e:	bf94      	ite	ls
  400c80:	4a13      	ldrls	r2, [pc, #76]	; (400cd0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400c82:	4a14      	ldrhi	r2, [pc, #80]	; (400cd4 <system_init_flash+0x78>)
  400c84:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <system_init_flash+0x7c>)
  400c86:	601a      	str	r2, [r3, #0]
  400c88:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c8e:	4b12      	ldr	r3, [pc, #72]	; (400cd8 <system_init_flash+0x7c>)
  400c90:	601a      	str	r2, [r3, #0]
  400c92:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c94:	4a11      	ldr	r2, [pc, #68]	; (400cdc <system_init_flash+0x80>)
  400c96:	4b10      	ldr	r3, [pc, #64]	; (400cd8 <system_init_flash+0x7c>)
  400c98:	601a      	str	r2, [r3, #0]
  400c9a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c9c:	4a10      	ldr	r2, [pc, #64]	; (400ce0 <system_init_flash+0x84>)
  400c9e:	4b0e      	ldr	r3, [pc, #56]	; (400cd8 <system_init_flash+0x7c>)
  400ca0:	601a      	str	r2, [r3, #0]
  400ca2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ca4:	4a0f      	ldr	r2, [pc, #60]	; (400ce4 <system_init_flash+0x88>)
  400ca6:	4b0c      	ldr	r3, [pc, #48]	; (400cd8 <system_init_flash+0x7c>)
  400ca8:	601a      	str	r2, [r3, #0]
  400caa:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cb0:	4b09      	ldr	r3, [pc, #36]	; (400cd8 <system_init_flash+0x7c>)
  400cb2:	601a      	str	r2, [r3, #0]
  400cb4:	4770      	bx	lr
  400cb6:	bf00      	nop
  400cb8:	015ef3bf 	.word	0x015ef3bf
  400cbc:	02bde77f 	.word	0x02bde77f
  400cc0:	041cdb3f 	.word	0x041cdb3f
  400cc4:	057bceff 	.word	0x057bceff
  400cc8:	06dac2bf 	.word	0x06dac2bf
  400ccc:	0839b67f 	.word	0x0839b67f
  400cd0:	04000500 	.word	0x04000500
  400cd4:	04000600 	.word	0x04000600
  400cd8:	400e0c00 	.word	0x400e0c00
  400cdc:	04000100 	.word	0x04000100
  400ce0:	04000200 	.word	0x04000200
  400ce4:	04000300 	.word	0x04000300

00400ce8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ce8:	4b0a      	ldr	r3, [pc, #40]	; (400d14 <_sbrk+0x2c>)
  400cea:	681b      	ldr	r3, [r3, #0]
  400cec:	b153      	cbz	r3, 400d04 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400cee:	4b09      	ldr	r3, [pc, #36]	; (400d14 <_sbrk+0x2c>)
  400cf0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400cf2:	181a      	adds	r2, r3, r0
  400cf4:	4908      	ldr	r1, [pc, #32]	; (400d18 <_sbrk+0x30>)
  400cf6:	4291      	cmp	r1, r2
  400cf8:	db08      	blt.n	400d0c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400cfa:	4610      	mov	r0, r2
  400cfc:	4a05      	ldr	r2, [pc, #20]	; (400d14 <_sbrk+0x2c>)
  400cfe:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d00:	4618      	mov	r0, r3
  400d02:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400d04:	4a05      	ldr	r2, [pc, #20]	; (400d1c <_sbrk+0x34>)
  400d06:	4b03      	ldr	r3, [pc, #12]	; (400d14 <_sbrk+0x2c>)
  400d08:	601a      	str	r2, [r3, #0]
  400d0a:	e7f0      	b.n	400cee <_sbrk+0x6>
		return (caddr_t) -1;	
  400d0c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400d10:	4770      	bx	lr
  400d12:	bf00      	nop
  400d14:	20400a48 	.word	0x20400a48
  400d18:	2045fffc 	.word	0x2045fffc
  400d1c:	20402d48 	.word	0x20402d48

00400d20 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d20:	f04f 30ff 	mov.w	r0, #4294967295
  400d24:	4770      	bx	lr

00400d26 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d2a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d2c:	2000      	movs	r0, #0
  400d2e:	4770      	bx	lr

00400d30 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d30:	2001      	movs	r0, #1
  400d32:	4770      	bx	lr

00400d34 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d34:	2000      	movs	r0, #0
  400d36:	4770      	bx	lr

00400d38 <afec_temp_sensor_end_conversion>:
	afec->AFEC_CSELR = afec_ch;
  400d38:	4b04      	ldr	r3, [pc, #16]	; (400d4c <afec_temp_sensor_end_conversion+0x14>)
  400d3a:	2205      	movs	r2, #5
  400d3c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  400d3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
}


static void afec_temp_sensor_end_conversion(void)
{
	g_ul_value = afec_channel_get_value(LM35DZ_AFEC, LM35DZ_AFEC_CH);
  400d40:	4b03      	ldr	r3, [pc, #12]	; (400d50 <afec_temp_sensor_end_conversion+0x18>)
  400d42:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  400d44:	2201      	movs	r2, #1
  400d46:	4b03      	ldr	r3, [pc, #12]	; (400d54 <afec_temp_sensor_end_conversion+0x1c>)
  400d48:	701a      	strb	r2, [r3, #0]
  400d4a:	4770      	bx	lr
  400d4c:	4003c000 	.word	0x4003c000
  400d50:	20400a4c 	.word	0x20400a4c
  400d54:	20400a50 	.word	0x20400a50

00400d58 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400d58:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d5a:	b083      	sub	sp, #12
  400d5c:	4605      	mov	r5, r0
  400d5e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400d60:	2300      	movs	r3, #0
  400d62:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400d64:	4b2a      	ldr	r3, [pc, #168]	; (400e10 <usart_serial_getchar+0xb8>)
  400d66:	4298      	cmp	r0, r3
  400d68:	d013      	beq.n	400d92 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400d6a:	4b2a      	ldr	r3, [pc, #168]	; (400e14 <usart_serial_getchar+0xbc>)
  400d6c:	4298      	cmp	r0, r3
  400d6e:	d018      	beq.n	400da2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400d70:	4b29      	ldr	r3, [pc, #164]	; (400e18 <usart_serial_getchar+0xc0>)
  400d72:	4298      	cmp	r0, r3
  400d74:	d01d      	beq.n	400db2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400d76:	4b29      	ldr	r3, [pc, #164]	; (400e1c <usart_serial_getchar+0xc4>)
  400d78:	429d      	cmp	r5, r3
  400d7a:	d022      	beq.n	400dc2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400d7c:	4b28      	ldr	r3, [pc, #160]	; (400e20 <usart_serial_getchar+0xc8>)
  400d7e:	429d      	cmp	r5, r3
  400d80:	d027      	beq.n	400dd2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400d82:	4b28      	ldr	r3, [pc, #160]	; (400e24 <usart_serial_getchar+0xcc>)
  400d84:	429d      	cmp	r5, r3
  400d86:	d02e      	beq.n	400de6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400d88:	4b27      	ldr	r3, [pc, #156]	; (400e28 <usart_serial_getchar+0xd0>)
  400d8a:	429d      	cmp	r5, r3
  400d8c:	d035      	beq.n	400dfa <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400d8e:	b003      	add	sp, #12
  400d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400d92:	461f      	mov	r7, r3
  400d94:	4e25      	ldr	r6, [pc, #148]	; (400e2c <usart_serial_getchar+0xd4>)
  400d96:	4621      	mov	r1, r4
  400d98:	4638      	mov	r0, r7
  400d9a:	47b0      	blx	r6
  400d9c:	2800      	cmp	r0, #0
  400d9e:	d1fa      	bne.n	400d96 <usart_serial_getchar+0x3e>
  400da0:	e7e9      	b.n	400d76 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400da2:	461f      	mov	r7, r3
  400da4:	4e21      	ldr	r6, [pc, #132]	; (400e2c <usart_serial_getchar+0xd4>)
  400da6:	4621      	mov	r1, r4
  400da8:	4638      	mov	r0, r7
  400daa:	47b0      	blx	r6
  400dac:	2800      	cmp	r0, #0
  400dae:	d1fa      	bne.n	400da6 <usart_serial_getchar+0x4e>
  400db0:	e7e4      	b.n	400d7c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400db2:	461f      	mov	r7, r3
  400db4:	4e1d      	ldr	r6, [pc, #116]	; (400e2c <usart_serial_getchar+0xd4>)
  400db6:	4621      	mov	r1, r4
  400db8:	4638      	mov	r0, r7
  400dba:	47b0      	blx	r6
  400dbc:	2800      	cmp	r0, #0
  400dbe:	d1fa      	bne.n	400db6 <usart_serial_getchar+0x5e>
  400dc0:	e7df      	b.n	400d82 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400dc2:	461f      	mov	r7, r3
  400dc4:	4e19      	ldr	r6, [pc, #100]	; (400e2c <usart_serial_getchar+0xd4>)
  400dc6:	4621      	mov	r1, r4
  400dc8:	4638      	mov	r0, r7
  400dca:	47b0      	blx	r6
  400dcc:	2800      	cmp	r0, #0
  400dce:	d1fa      	bne.n	400dc6 <usart_serial_getchar+0x6e>
  400dd0:	e7da      	b.n	400d88 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400dd2:	461e      	mov	r6, r3
  400dd4:	4d16      	ldr	r5, [pc, #88]	; (400e30 <usart_serial_getchar+0xd8>)
  400dd6:	a901      	add	r1, sp, #4
  400dd8:	4630      	mov	r0, r6
  400dda:	47a8      	blx	r5
  400ddc:	2800      	cmp	r0, #0
  400dde:	d1fa      	bne.n	400dd6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400de0:	9b01      	ldr	r3, [sp, #4]
  400de2:	7023      	strb	r3, [r4, #0]
  400de4:	e7d3      	b.n	400d8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400de6:	461e      	mov	r6, r3
  400de8:	4d11      	ldr	r5, [pc, #68]	; (400e30 <usart_serial_getchar+0xd8>)
  400dea:	a901      	add	r1, sp, #4
  400dec:	4630      	mov	r0, r6
  400dee:	47a8      	blx	r5
  400df0:	2800      	cmp	r0, #0
  400df2:	d1fa      	bne.n	400dea <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400df4:	9b01      	ldr	r3, [sp, #4]
  400df6:	7023      	strb	r3, [r4, #0]
  400df8:	e7c9      	b.n	400d8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400dfa:	461e      	mov	r6, r3
  400dfc:	4d0c      	ldr	r5, [pc, #48]	; (400e30 <usart_serial_getchar+0xd8>)
  400dfe:	a901      	add	r1, sp, #4
  400e00:	4630      	mov	r0, r6
  400e02:	47a8      	blx	r5
  400e04:	2800      	cmp	r0, #0
  400e06:	d1fa      	bne.n	400dfe <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400e08:	9b01      	ldr	r3, [sp, #4]
  400e0a:	7023      	strb	r3, [r4, #0]
}
  400e0c:	e7bf      	b.n	400d8e <usart_serial_getchar+0x36>
  400e0e:	bf00      	nop
  400e10:	400e0800 	.word	0x400e0800
  400e14:	400e0a00 	.word	0x400e0a00
  400e18:	400e1a00 	.word	0x400e1a00
  400e1c:	400e1c00 	.word	0x400e1c00
  400e20:	40024000 	.word	0x40024000
  400e24:	40028000 	.word	0x40028000
  400e28:	4002c000 	.word	0x4002c000
  400e2c:	00400637 	.word	0x00400637
  400e30:	00400333 	.word	0x00400333

00400e34 <usart_serial_putchar>:
{
  400e34:	b570      	push	{r4, r5, r6, lr}
  400e36:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400e38:	4b2a      	ldr	r3, [pc, #168]	; (400ee4 <usart_serial_putchar+0xb0>)
  400e3a:	4298      	cmp	r0, r3
  400e3c:	d013      	beq.n	400e66 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400e3e:	4b2a      	ldr	r3, [pc, #168]	; (400ee8 <usart_serial_putchar+0xb4>)
  400e40:	4298      	cmp	r0, r3
  400e42:	d019      	beq.n	400e78 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400e44:	4b29      	ldr	r3, [pc, #164]	; (400eec <usart_serial_putchar+0xb8>)
  400e46:	4298      	cmp	r0, r3
  400e48:	d01f      	beq.n	400e8a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400e4a:	4b29      	ldr	r3, [pc, #164]	; (400ef0 <usart_serial_putchar+0xbc>)
  400e4c:	4298      	cmp	r0, r3
  400e4e:	d025      	beq.n	400e9c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400e50:	4b28      	ldr	r3, [pc, #160]	; (400ef4 <usart_serial_putchar+0xc0>)
  400e52:	4298      	cmp	r0, r3
  400e54:	d02b      	beq.n	400eae <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400e56:	4b28      	ldr	r3, [pc, #160]	; (400ef8 <usart_serial_putchar+0xc4>)
  400e58:	4298      	cmp	r0, r3
  400e5a:	d031      	beq.n	400ec0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400e5c:	4b27      	ldr	r3, [pc, #156]	; (400efc <usart_serial_putchar+0xc8>)
  400e5e:	4298      	cmp	r0, r3
  400e60:	d037      	beq.n	400ed2 <usart_serial_putchar+0x9e>
	return 0;
  400e62:	2000      	movs	r0, #0
}
  400e64:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e66:	461e      	mov	r6, r3
  400e68:	4d25      	ldr	r5, [pc, #148]	; (400f00 <usart_serial_putchar+0xcc>)
  400e6a:	4621      	mov	r1, r4
  400e6c:	4630      	mov	r0, r6
  400e6e:	47a8      	blx	r5
  400e70:	2800      	cmp	r0, #0
  400e72:	d1fa      	bne.n	400e6a <usart_serial_putchar+0x36>
		return 1;
  400e74:	2001      	movs	r0, #1
  400e76:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e78:	461e      	mov	r6, r3
  400e7a:	4d21      	ldr	r5, [pc, #132]	; (400f00 <usart_serial_putchar+0xcc>)
  400e7c:	4621      	mov	r1, r4
  400e7e:	4630      	mov	r0, r6
  400e80:	47a8      	blx	r5
  400e82:	2800      	cmp	r0, #0
  400e84:	d1fa      	bne.n	400e7c <usart_serial_putchar+0x48>
		return 1;
  400e86:	2001      	movs	r0, #1
  400e88:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e8a:	461e      	mov	r6, r3
  400e8c:	4d1c      	ldr	r5, [pc, #112]	; (400f00 <usart_serial_putchar+0xcc>)
  400e8e:	4621      	mov	r1, r4
  400e90:	4630      	mov	r0, r6
  400e92:	47a8      	blx	r5
  400e94:	2800      	cmp	r0, #0
  400e96:	d1fa      	bne.n	400e8e <usart_serial_putchar+0x5a>
		return 1;
  400e98:	2001      	movs	r0, #1
  400e9a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e9c:	461e      	mov	r6, r3
  400e9e:	4d18      	ldr	r5, [pc, #96]	; (400f00 <usart_serial_putchar+0xcc>)
  400ea0:	4621      	mov	r1, r4
  400ea2:	4630      	mov	r0, r6
  400ea4:	47a8      	blx	r5
  400ea6:	2800      	cmp	r0, #0
  400ea8:	d1fa      	bne.n	400ea0 <usart_serial_putchar+0x6c>
		return 1;
  400eaa:	2001      	movs	r0, #1
  400eac:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400eae:	461e      	mov	r6, r3
  400eb0:	4d14      	ldr	r5, [pc, #80]	; (400f04 <usart_serial_putchar+0xd0>)
  400eb2:	4621      	mov	r1, r4
  400eb4:	4630      	mov	r0, r6
  400eb6:	47a8      	blx	r5
  400eb8:	2800      	cmp	r0, #0
  400eba:	d1fa      	bne.n	400eb2 <usart_serial_putchar+0x7e>
		return 1;
  400ebc:	2001      	movs	r0, #1
  400ebe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ec0:	461e      	mov	r6, r3
  400ec2:	4d10      	ldr	r5, [pc, #64]	; (400f04 <usart_serial_putchar+0xd0>)
  400ec4:	4621      	mov	r1, r4
  400ec6:	4630      	mov	r0, r6
  400ec8:	47a8      	blx	r5
  400eca:	2800      	cmp	r0, #0
  400ecc:	d1fa      	bne.n	400ec4 <usart_serial_putchar+0x90>
		return 1;
  400ece:	2001      	movs	r0, #1
  400ed0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400ed2:	461e      	mov	r6, r3
  400ed4:	4d0b      	ldr	r5, [pc, #44]	; (400f04 <usart_serial_putchar+0xd0>)
  400ed6:	4621      	mov	r1, r4
  400ed8:	4630      	mov	r0, r6
  400eda:	47a8      	blx	r5
  400edc:	2800      	cmp	r0, #0
  400ede:	d1fa      	bne.n	400ed6 <usart_serial_putchar+0xa2>
		return 1;
  400ee0:	2001      	movs	r0, #1
  400ee2:	bd70      	pop	{r4, r5, r6, pc}
  400ee4:	400e0800 	.word	0x400e0800
  400ee8:	400e0a00 	.word	0x400e0a00
  400eec:	400e1a00 	.word	0x400e1a00
  400ef0:	400e1c00 	.word	0x400e1c00
  400ef4:	40024000 	.word	0x40024000
  400ef8:	40028000 	.word	0x40028000
  400efc:	4002c000 	.word	0x4002c000
  400f00:	00400625 	.word	0x00400625
  400f04:	0040031d 	.word	0x0040031d

00400f08 <lm35dz_init>:
}

void lm35dz_init(void) {
  400f08:	b530      	push	{r4, r5, lr}
  400f0a:	b089      	sub	sp, #36	; 0x24
	pmc_enable_periph_clk(LM35DZ_AFEC_ID);
  400f0c:	201d      	movs	r0, #29
  400f0e:	4b17      	ldr	r3, [pc, #92]	; (400f6c <lm35dz_init+0x64>)
  400f10:	4798      	blx	r3
	afec_enable(LM35DZ_AFEC);
  400f12:	4c17      	ldr	r4, [pc, #92]	; (400f70 <lm35dz_init+0x68>)
  400f14:	4620      	mov	r0, r4
  400f16:	4b17      	ldr	r3, [pc, #92]	; (400f74 <lm35dz_init+0x6c>)
  400f18:	4798      	blx	r3
	struct afec_config afec_cfg;
	afec_get_config_defaults(&afec_cfg);
  400f1a:	a802      	add	r0, sp, #8
  400f1c:	4b16      	ldr	r3, [pc, #88]	; (400f78 <lm35dz_init+0x70>)
  400f1e:	4798      	blx	r3
	afec_init(LM35DZ_AFEC, &afec_cfg);
  400f20:	a902      	add	r1, sp, #8
  400f22:	4620      	mov	r0, r4
  400f24:	4b15      	ldr	r3, [pc, #84]	; (400f7c <lm35dz_init+0x74>)
  400f26:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400f28:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400f2a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400f2e:	6063      	str	r3, [r4, #4]
	afec_set_trigger(LM35DZ_AFEC, AFEC_TRIG_SW);

	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400f30:	a801      	add	r0, sp, #4
  400f32:	4b13      	ldr	r3, [pc, #76]	; (400f80 <lm35dz_init+0x78>)
  400f34:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  400f36:	2300      	movs	r3, #0
  400f38:	f88d 3005 	strb.w	r3, [sp, #5]
	afec_ch_set_config(LM35DZ_AFEC, LM35DZ_AFEC_CH, &afec_ch_cfg);
  400f3c:	aa01      	add	r2, sp, #4
  400f3e:	2105      	movs	r1, #5
  400f40:	4620      	mov	r0, r4
  400f42:	4b10      	ldr	r3, [pc, #64]	; (400f84 <lm35dz_init+0x7c>)
  400f44:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  400f46:	2105      	movs	r1, #5
  400f48:	6661      	str	r1, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
  400f4e:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_5, 0x200); // internal ADC offset is 0x200, it should cancel it and shift to 0
	afec_set_callback(LM35DZ_AFEC, LM35DZ_AFEC_CH_IR, afec_temp_sensor_end_conversion, 1);
  400f50:	2301      	movs	r3, #1
  400f52:	4a0d      	ldr	r2, [pc, #52]	; (400f88 <lm35dz_init+0x80>)
  400f54:	4620      	mov	r0, r4
  400f56:	4d0d      	ldr	r5, [pc, #52]	; (400f8c <lm35dz_init+0x84>)
  400f58:	47a8      	blx	r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400f5a:	2320      	movs	r3, #32
  400f5c:	6163      	str	r3, [r4, #20]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400f5e:	2240      	movs	r2, #64	; 0x40
  400f60:	4b0b      	ldr	r3, [pc, #44]	; (400f90 <lm35dz_init+0x88>)
  400f62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
	afec_channel_enable(LM35DZ_AFEC, LM35DZ_AFEC_CH);
	NVIC_SetPriority(AFEC0_IRQn, 10);
	
}
  400f66:	b009      	add	sp, #36	; 0x24
  400f68:	bd30      	pop	{r4, r5, pc}
  400f6a:	bf00      	nop
  400f6c:	00400a31 	.word	0x00400a31
  400f70:	4003c000 	.word	0x4003c000
  400f74:	004005c1 	.word	0x004005c1
  400f78:	00400405 	.word	0x00400405
  400f7c:	00400441 	.word	0x00400441
  400f80:	00400435 	.word	0x00400435
  400f84:	004003d5 	.word	0x004003d5
  400f88:	00400d39 	.word	0x00400d39
  400f8c:	00400541 	.word	0x00400541
  400f90:	e000e100 	.word	0xe000e100

00400f94 <lm35dz_enable_interrupt>:

void lm35dz_enable_interrupt(void) {
  400f94:	b508      	push	{r3, lr}
	afec_enable_interrupt(LM35DZ_AFEC, LM35DZ_AFEC_CH_IR);
  400f96:	2105      	movs	r1, #5
  400f98:	4803      	ldr	r0, [pc, #12]	; (400fa8 <lm35dz_enable_interrupt+0x14>)
  400f9a:	4b04      	ldr	r3, [pc, #16]	; (400fac <lm35dz_enable_interrupt+0x18>)
  400f9c:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400f9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fa2:	4b03      	ldr	r3, [pc, #12]	; (400fb0 <lm35dz_enable_interrupt+0x1c>)
  400fa4:	601a      	str	r2, [r3, #0]
  400fa6:	bd08      	pop	{r3, pc}
  400fa8:	4003c000 	.word	0x4003c000
  400fac:	00400509 	.word	0x00400509
  400fb0:	e000e100 	.word	0xe000e100

00400fb4 <lm35dz_convert>:
	NVIC_EnableIRQ(AFEC0_IRQn);
}

void lm35dz_convert(void) {
	if(!is_conversion_done) {
  400fb4:	4b03      	ldr	r3, [pc, #12]	; (400fc4 <lm35dz_convert+0x10>)
  400fb6:	781b      	ldrb	r3, [r3, #0]
  400fb8:	b913      	cbnz	r3, 400fc0 <lm35dz_convert+0xc>
	afec->AFEC_CR = AFEC_CR_START;
  400fba:	2202      	movs	r2, #2
  400fbc:	4b02      	ldr	r3, [pc, #8]	; (400fc8 <lm35dz_convert+0x14>)
  400fbe:	601a      	str	r2, [r3, #0]
  400fc0:	4770      	bx	lr
  400fc2:	bf00      	nop
  400fc4:	20400a50 	.word	0x20400a50
  400fc8:	4003c000 	.word	0x4003c000

00400fcc <main>:
		afec_start_software_conversion(AFEC0);
	}
}

int main (void)
{
  400fcc:	b570      	push	{r4, r5, r6, lr}
  400fce:	b086      	sub	sp, #24
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  400fd0:	4b27      	ldr	r3, [pc, #156]	; (401070 <main+0xa4>)
  400fd2:	4798      	blx	r3
	delay_init();
	sysclk_init();
  400fd4:	4b27      	ldr	r3, [pc, #156]	; (401074 <main+0xa8>)
  400fd6:	4798      	blx	r3
	lm35dz_init();
  400fd8:	4b27      	ldr	r3, [pc, #156]	; (401078 <main+0xac>)
  400fda:	4798      	blx	r3
  400fdc:	200e      	movs	r0, #14
  400fde:	4e27      	ldr	r6, [pc, #156]	; (40107c <main+0xb0>)
  400fe0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400fe2:	4d27      	ldr	r5, [pc, #156]	; (401080 <main+0xb4>)
  400fe4:	4b27      	ldr	r3, [pc, #156]	; (401084 <main+0xb8>)
  400fe6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400fe8:	4a27      	ldr	r2, [pc, #156]	; (401088 <main+0xbc>)
  400fea:	4b28      	ldr	r3, [pc, #160]	; (40108c <main+0xc0>)
  400fec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400fee:	4a28      	ldr	r2, [pc, #160]	; (401090 <main+0xc4>)
  400ff0:	4b28      	ldr	r3, [pc, #160]	; (401094 <main+0xc8>)
  400ff2:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400ff4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400ff8:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  400ffa:	23c0      	movs	r3, #192	; 0xc0
  400ffc:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401002:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401004:	2400      	movs	r4, #0
  401006:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401008:	9404      	str	r4, [sp, #16]
  40100a:	200e      	movs	r0, #14
  40100c:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40100e:	4a22      	ldr	r2, [pc, #136]	; (401098 <main+0xcc>)
  401010:	4669      	mov	r1, sp
  401012:	4628      	mov	r0, r5
  401014:	4b21      	ldr	r3, [pc, #132]	; (40109c <main+0xd0>)
  401016:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401018:	4628      	mov	r0, r5
  40101a:	4b21      	ldr	r3, [pc, #132]	; (4010a0 <main+0xd4>)
  40101c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40101e:	4628      	mov	r0, r5
  401020:	4b20      	ldr	r3, [pc, #128]	; (4010a4 <main+0xd8>)
  401022:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401024:	4e20      	ldr	r6, [pc, #128]	; (4010a8 <main+0xdc>)
  401026:	6833      	ldr	r3, [r6, #0]
  401028:	4621      	mov	r1, r4
  40102a:	6898      	ldr	r0, [r3, #8]
  40102c:	4d1f      	ldr	r5, [pc, #124]	; (4010ac <main+0xe0>)
  40102e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401030:	6833      	ldr	r3, [r6, #0]
  401032:	4621      	mov	r1, r4
  401034:	6858      	ldr	r0, [r3, #4]
  401036:	47a8      	blx	r5
	configure_console();
	lm35dz_enable_interrupt();
  401038:	4b1d      	ldr	r3, [pc, #116]	; (4010b0 <main+0xe4>)
  40103a:	4798      	blx	r3
	puts("TESTE LM35DZ\r\n");
  40103c:	481d      	ldr	r0, [pc, #116]	; (4010b4 <main+0xe8>)
  40103e:	4b1e      	ldr	r3, [pc, #120]	; (4010b8 <main+0xec>)
  401040:	4798      	blx	r3
	while(1) {
		lm35dz_convert();
  401042:	4d1e      	ldr	r5, [pc, #120]	; (4010bc <main+0xf0>)
		//delay_ms(1);
		if(is_conversion_done){
  401044:	4c1e      	ldr	r4, [pc, #120]	; (4010c0 <main+0xf4>)
			uint32_t g_voltage = g_ul_value * 3300 / 4096; // in mv
  401046:	4e1f      	ldr	r6, [pc, #124]	; (4010c4 <main+0xf8>)
		lm35dz_convert();
  401048:	47a8      	blx	r5
		if(is_conversion_done){
  40104a:	7823      	ldrb	r3, [r4, #0]
  40104c:	2b00      	cmp	r3, #0
  40104e:	d0fb      	beq.n	401048 <main+0x7c>
			uint32_t g_voltage = g_ul_value * 3300 / 4096; // in mv
  401050:	6833      	ldr	r3, [r6, #0]
  401052:	f640 41e4 	movw	r1, #3300	; 0xce4
  401056:	fb01 f103 	mul.w	r1, r1, r3
			printf("temp 0 : %d\r\n", g_voltage/10);
  40105a:	4b1b      	ldr	r3, [pc, #108]	; (4010c8 <main+0xfc>)
  40105c:	fba3 3101 	umull	r3, r1, r3, r1
  401060:	0bc9      	lsrs	r1, r1, #15
  401062:	481a      	ldr	r0, [pc, #104]	; (4010cc <main+0x100>)
  401064:	4b1a      	ldr	r3, [pc, #104]	; (4010d0 <main+0x104>)
  401066:	4798      	blx	r3
			is_conversion_done = false;
  401068:	2300      	movs	r3, #0
  40106a:	7023      	strb	r3, [r4, #0]
  40106c:	e7ec      	b.n	401048 <main+0x7c>
  40106e:	bf00      	nop
  401070:	004006bd 	.word	0x004006bd
  401074:	0040064d 	.word	0x0040064d
  401078:	00400f09 	.word	0x00400f09
  40107c:	00400a31 	.word	0x00400a31
  401080:	40028000 	.word	0x40028000
  401084:	20400a90 	.word	0x20400a90
  401088:	00400e35 	.word	0x00400e35
  40108c:	20400a8c 	.word	0x20400a8c
  401090:	00400d59 	.word	0x00400d59
  401094:	20400a88 	.word	0x20400a88
  401098:	08f0d180 	.word	0x08f0d180
  40109c:	004002bd 	.word	0x004002bd
  4010a0:	00400311 	.word	0x00400311
  4010a4:	00400317 	.word	0x00400317
  4010a8:	20400008 	.word	0x20400008
  4010ac:	00401295 	.word	0x00401295
  4010b0:	00400f95 	.word	0x00400f95
  4010b4:	004040f8 	.word	0x004040f8
  4010b8:	00401285 	.word	0x00401285
  4010bc:	00400fb5 	.word	0x00400fb5
  4010c0:	20400a50 	.word	0x20400a50
  4010c4:	20400a4c 	.word	0x20400a4c
  4010c8:	cccccccd 	.word	0xcccccccd
  4010cc:	00404108 	.word	0x00404108
  4010d0:	00401125 	.word	0x00401125

004010d4 <__libc_init_array>:
  4010d4:	b570      	push	{r4, r5, r6, lr}
  4010d6:	4e0f      	ldr	r6, [pc, #60]	; (401114 <__libc_init_array+0x40>)
  4010d8:	4d0f      	ldr	r5, [pc, #60]	; (401118 <__libc_init_array+0x44>)
  4010da:	1b76      	subs	r6, r6, r5
  4010dc:	10b6      	asrs	r6, r6, #2
  4010de:	bf18      	it	ne
  4010e0:	2400      	movne	r4, #0
  4010e2:	d005      	beq.n	4010f0 <__libc_init_array+0x1c>
  4010e4:	3401      	adds	r4, #1
  4010e6:	f855 3b04 	ldr.w	r3, [r5], #4
  4010ea:	4798      	blx	r3
  4010ec:	42a6      	cmp	r6, r4
  4010ee:	d1f9      	bne.n	4010e4 <__libc_init_array+0x10>
  4010f0:	4e0a      	ldr	r6, [pc, #40]	; (40111c <__libc_init_array+0x48>)
  4010f2:	4d0b      	ldr	r5, [pc, #44]	; (401120 <__libc_init_array+0x4c>)
  4010f4:	1b76      	subs	r6, r6, r5
  4010f6:	f003 f8c3 	bl	404280 <_init>
  4010fa:	10b6      	asrs	r6, r6, #2
  4010fc:	bf18      	it	ne
  4010fe:	2400      	movne	r4, #0
  401100:	d006      	beq.n	401110 <__libc_init_array+0x3c>
  401102:	3401      	adds	r4, #1
  401104:	f855 3b04 	ldr.w	r3, [r5], #4
  401108:	4798      	blx	r3
  40110a:	42a6      	cmp	r6, r4
  40110c:	d1f9      	bne.n	401102 <__libc_init_array+0x2e>
  40110e:	bd70      	pop	{r4, r5, r6, pc}
  401110:	bd70      	pop	{r4, r5, r6, pc}
  401112:	bf00      	nop
  401114:	0040428c 	.word	0x0040428c
  401118:	0040428c 	.word	0x0040428c
  40111c:	00404294 	.word	0x00404294
  401120:	0040428c 	.word	0x0040428c

00401124 <iprintf>:
  401124:	b40f      	push	{r0, r1, r2, r3}
  401126:	b500      	push	{lr}
  401128:	4907      	ldr	r1, [pc, #28]	; (401148 <iprintf+0x24>)
  40112a:	b083      	sub	sp, #12
  40112c:	ab04      	add	r3, sp, #16
  40112e:	6808      	ldr	r0, [r1, #0]
  401130:	f853 2b04 	ldr.w	r2, [r3], #4
  401134:	6881      	ldr	r1, [r0, #8]
  401136:	9301      	str	r3, [sp, #4]
  401138:	f000 fa30 	bl	40159c <_vfiprintf_r>
  40113c:	b003      	add	sp, #12
  40113e:	f85d eb04 	ldr.w	lr, [sp], #4
  401142:	b004      	add	sp, #16
  401144:	4770      	bx	lr
  401146:	bf00      	nop
  401148:	20400008 	.word	0x20400008

0040114c <memset>:
  40114c:	b470      	push	{r4, r5, r6}
  40114e:	0786      	lsls	r6, r0, #30
  401150:	d046      	beq.n	4011e0 <memset+0x94>
  401152:	1e54      	subs	r4, r2, #1
  401154:	2a00      	cmp	r2, #0
  401156:	d041      	beq.n	4011dc <memset+0x90>
  401158:	b2ca      	uxtb	r2, r1
  40115a:	4603      	mov	r3, r0
  40115c:	e002      	b.n	401164 <memset+0x18>
  40115e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401162:	d33b      	bcc.n	4011dc <memset+0x90>
  401164:	f803 2b01 	strb.w	r2, [r3], #1
  401168:	079d      	lsls	r5, r3, #30
  40116a:	d1f8      	bne.n	40115e <memset+0x12>
  40116c:	2c03      	cmp	r4, #3
  40116e:	d92e      	bls.n	4011ce <memset+0x82>
  401170:	b2cd      	uxtb	r5, r1
  401172:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401176:	2c0f      	cmp	r4, #15
  401178:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40117c:	d919      	bls.n	4011b2 <memset+0x66>
  40117e:	f103 0210 	add.w	r2, r3, #16
  401182:	4626      	mov	r6, r4
  401184:	3e10      	subs	r6, #16
  401186:	2e0f      	cmp	r6, #15
  401188:	f842 5c10 	str.w	r5, [r2, #-16]
  40118c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401190:	f842 5c08 	str.w	r5, [r2, #-8]
  401194:	f842 5c04 	str.w	r5, [r2, #-4]
  401198:	f102 0210 	add.w	r2, r2, #16
  40119c:	d8f2      	bhi.n	401184 <memset+0x38>
  40119e:	f1a4 0210 	sub.w	r2, r4, #16
  4011a2:	f022 020f 	bic.w	r2, r2, #15
  4011a6:	f004 040f 	and.w	r4, r4, #15
  4011aa:	3210      	adds	r2, #16
  4011ac:	2c03      	cmp	r4, #3
  4011ae:	4413      	add	r3, r2
  4011b0:	d90d      	bls.n	4011ce <memset+0x82>
  4011b2:	461e      	mov	r6, r3
  4011b4:	4622      	mov	r2, r4
  4011b6:	3a04      	subs	r2, #4
  4011b8:	2a03      	cmp	r2, #3
  4011ba:	f846 5b04 	str.w	r5, [r6], #4
  4011be:	d8fa      	bhi.n	4011b6 <memset+0x6a>
  4011c0:	1f22      	subs	r2, r4, #4
  4011c2:	f022 0203 	bic.w	r2, r2, #3
  4011c6:	3204      	adds	r2, #4
  4011c8:	4413      	add	r3, r2
  4011ca:	f004 0403 	and.w	r4, r4, #3
  4011ce:	b12c      	cbz	r4, 4011dc <memset+0x90>
  4011d0:	b2c9      	uxtb	r1, r1
  4011d2:	441c      	add	r4, r3
  4011d4:	f803 1b01 	strb.w	r1, [r3], #1
  4011d8:	429c      	cmp	r4, r3
  4011da:	d1fb      	bne.n	4011d4 <memset+0x88>
  4011dc:	bc70      	pop	{r4, r5, r6}
  4011de:	4770      	bx	lr
  4011e0:	4614      	mov	r4, r2
  4011e2:	4603      	mov	r3, r0
  4011e4:	e7c2      	b.n	40116c <memset+0x20>
  4011e6:	bf00      	nop

004011e8 <_puts_r>:
  4011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011ea:	4605      	mov	r5, r0
  4011ec:	b089      	sub	sp, #36	; 0x24
  4011ee:	4608      	mov	r0, r1
  4011f0:	460c      	mov	r4, r1
  4011f2:	f000 f925 	bl	401440 <strlen>
  4011f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011f8:	4f21      	ldr	r7, [pc, #132]	; (401280 <_puts_r+0x98>)
  4011fa:	9404      	str	r4, [sp, #16]
  4011fc:	2601      	movs	r6, #1
  4011fe:	1c44      	adds	r4, r0, #1
  401200:	a904      	add	r1, sp, #16
  401202:	2202      	movs	r2, #2
  401204:	9403      	str	r4, [sp, #12]
  401206:	9005      	str	r0, [sp, #20]
  401208:	68ac      	ldr	r4, [r5, #8]
  40120a:	9706      	str	r7, [sp, #24]
  40120c:	9607      	str	r6, [sp, #28]
  40120e:	9101      	str	r1, [sp, #4]
  401210:	9202      	str	r2, [sp, #8]
  401212:	b353      	cbz	r3, 40126a <_puts_r+0x82>
  401214:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401216:	f013 0f01 	tst.w	r3, #1
  40121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40121e:	b29a      	uxth	r2, r3
  401220:	d101      	bne.n	401226 <_puts_r+0x3e>
  401222:	0590      	lsls	r0, r2, #22
  401224:	d525      	bpl.n	401272 <_puts_r+0x8a>
  401226:	0491      	lsls	r1, r2, #18
  401228:	d406      	bmi.n	401238 <_puts_r+0x50>
  40122a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40122c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401234:	81a3      	strh	r3, [r4, #12]
  401236:	6662      	str	r2, [r4, #100]	; 0x64
  401238:	4628      	mov	r0, r5
  40123a:	aa01      	add	r2, sp, #4
  40123c:	4621      	mov	r1, r4
  40123e:	f001 fbaf 	bl	4029a0 <__sfvwrite_r>
  401242:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401244:	2800      	cmp	r0, #0
  401246:	bf0c      	ite	eq
  401248:	250a      	moveq	r5, #10
  40124a:	f04f 35ff 	movne.w	r5, #4294967295
  40124e:	07da      	lsls	r2, r3, #31
  401250:	d402      	bmi.n	401258 <_puts_r+0x70>
  401252:	89a3      	ldrh	r3, [r4, #12]
  401254:	059b      	lsls	r3, r3, #22
  401256:	d502      	bpl.n	40125e <_puts_r+0x76>
  401258:	4628      	mov	r0, r5
  40125a:	b009      	add	sp, #36	; 0x24
  40125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40125e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401260:	f001 fd54 	bl	402d0c <__retarget_lock_release_recursive>
  401264:	4628      	mov	r0, r5
  401266:	b009      	add	sp, #36	; 0x24
  401268:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40126a:	4628      	mov	r0, r5
  40126c:	f001 f98c 	bl	402588 <__sinit>
  401270:	e7d0      	b.n	401214 <_puts_r+0x2c>
  401272:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401274:	f001 fd48 	bl	402d08 <__retarget_lock_acquire_recursive>
  401278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40127c:	b29a      	uxth	r2, r3
  40127e:	e7d2      	b.n	401226 <_puts_r+0x3e>
  401280:	00404114 	.word	0x00404114

00401284 <puts>:
  401284:	4b02      	ldr	r3, [pc, #8]	; (401290 <puts+0xc>)
  401286:	4601      	mov	r1, r0
  401288:	6818      	ldr	r0, [r3, #0]
  40128a:	f7ff bfad 	b.w	4011e8 <_puts_r>
  40128e:	bf00      	nop
  401290:	20400008 	.word	0x20400008

00401294 <setbuf>:
  401294:	2900      	cmp	r1, #0
  401296:	bf0c      	ite	eq
  401298:	2202      	moveq	r2, #2
  40129a:	2200      	movne	r2, #0
  40129c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4012a0:	f000 b800 	b.w	4012a4 <setvbuf>

004012a4 <setvbuf>:
  4012a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4012a8:	4c61      	ldr	r4, [pc, #388]	; (401430 <setvbuf+0x18c>)
  4012aa:	6825      	ldr	r5, [r4, #0]
  4012ac:	b083      	sub	sp, #12
  4012ae:	4604      	mov	r4, r0
  4012b0:	460f      	mov	r7, r1
  4012b2:	4690      	mov	r8, r2
  4012b4:	461e      	mov	r6, r3
  4012b6:	b115      	cbz	r5, 4012be <setvbuf+0x1a>
  4012b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	d064      	beq.n	401388 <setvbuf+0xe4>
  4012be:	f1b8 0f02 	cmp.w	r8, #2
  4012c2:	d006      	beq.n	4012d2 <setvbuf+0x2e>
  4012c4:	f1b8 0f01 	cmp.w	r8, #1
  4012c8:	f200 809f 	bhi.w	40140a <setvbuf+0x166>
  4012cc:	2e00      	cmp	r6, #0
  4012ce:	f2c0 809c 	blt.w	40140a <setvbuf+0x166>
  4012d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4012d4:	07d8      	lsls	r0, r3, #31
  4012d6:	d534      	bpl.n	401342 <setvbuf+0x9e>
  4012d8:	4621      	mov	r1, r4
  4012da:	4628      	mov	r0, r5
  4012dc:	f001 f8fc 	bl	4024d8 <_fflush_r>
  4012e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4012e2:	b141      	cbz	r1, 4012f6 <setvbuf+0x52>
  4012e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4012e8:	4299      	cmp	r1, r3
  4012ea:	d002      	beq.n	4012f2 <setvbuf+0x4e>
  4012ec:	4628      	mov	r0, r5
  4012ee:	f001 fa71 	bl	4027d4 <_free_r>
  4012f2:	2300      	movs	r3, #0
  4012f4:	6323      	str	r3, [r4, #48]	; 0x30
  4012f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4012fa:	2200      	movs	r2, #0
  4012fc:	61a2      	str	r2, [r4, #24]
  4012fe:	6062      	str	r2, [r4, #4]
  401300:	061a      	lsls	r2, r3, #24
  401302:	d43a      	bmi.n	40137a <setvbuf+0xd6>
  401304:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401308:	f023 0303 	bic.w	r3, r3, #3
  40130c:	f1b8 0f02 	cmp.w	r8, #2
  401310:	81a3      	strh	r3, [r4, #12]
  401312:	d01d      	beq.n	401350 <setvbuf+0xac>
  401314:	ab01      	add	r3, sp, #4
  401316:	466a      	mov	r2, sp
  401318:	4621      	mov	r1, r4
  40131a:	4628      	mov	r0, r5
  40131c:	f001 fcf8 	bl	402d10 <__swhatbuf_r>
  401320:	89a3      	ldrh	r3, [r4, #12]
  401322:	4318      	orrs	r0, r3
  401324:	81a0      	strh	r0, [r4, #12]
  401326:	2e00      	cmp	r6, #0
  401328:	d132      	bne.n	401390 <setvbuf+0xec>
  40132a:	9e00      	ldr	r6, [sp, #0]
  40132c:	4630      	mov	r0, r6
  40132e:	f001 fd67 	bl	402e00 <malloc>
  401332:	4607      	mov	r7, r0
  401334:	2800      	cmp	r0, #0
  401336:	d06b      	beq.n	401410 <setvbuf+0x16c>
  401338:	89a3      	ldrh	r3, [r4, #12]
  40133a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40133e:	81a3      	strh	r3, [r4, #12]
  401340:	e028      	b.n	401394 <setvbuf+0xf0>
  401342:	89a3      	ldrh	r3, [r4, #12]
  401344:	0599      	lsls	r1, r3, #22
  401346:	d4c7      	bmi.n	4012d8 <setvbuf+0x34>
  401348:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40134a:	f001 fcdd 	bl	402d08 <__retarget_lock_acquire_recursive>
  40134e:	e7c3      	b.n	4012d8 <setvbuf+0x34>
  401350:	2500      	movs	r5, #0
  401352:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401354:	2600      	movs	r6, #0
  401356:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40135a:	f043 0302 	orr.w	r3, r3, #2
  40135e:	2001      	movs	r0, #1
  401360:	60a6      	str	r6, [r4, #8]
  401362:	07ce      	lsls	r6, r1, #31
  401364:	81a3      	strh	r3, [r4, #12]
  401366:	6022      	str	r2, [r4, #0]
  401368:	6122      	str	r2, [r4, #16]
  40136a:	6160      	str	r0, [r4, #20]
  40136c:	d401      	bmi.n	401372 <setvbuf+0xce>
  40136e:	0598      	lsls	r0, r3, #22
  401370:	d53e      	bpl.n	4013f0 <setvbuf+0x14c>
  401372:	4628      	mov	r0, r5
  401374:	b003      	add	sp, #12
  401376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40137a:	6921      	ldr	r1, [r4, #16]
  40137c:	4628      	mov	r0, r5
  40137e:	f001 fa29 	bl	4027d4 <_free_r>
  401382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401386:	e7bd      	b.n	401304 <setvbuf+0x60>
  401388:	4628      	mov	r0, r5
  40138a:	f001 f8fd 	bl	402588 <__sinit>
  40138e:	e796      	b.n	4012be <setvbuf+0x1a>
  401390:	2f00      	cmp	r7, #0
  401392:	d0cb      	beq.n	40132c <setvbuf+0x88>
  401394:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401396:	2b00      	cmp	r3, #0
  401398:	d033      	beq.n	401402 <setvbuf+0x15e>
  40139a:	9b00      	ldr	r3, [sp, #0]
  40139c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4013a0:	6027      	str	r7, [r4, #0]
  4013a2:	429e      	cmp	r6, r3
  4013a4:	bf1c      	itt	ne
  4013a6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4013aa:	81a2      	strhne	r2, [r4, #12]
  4013ac:	f1b8 0f01 	cmp.w	r8, #1
  4013b0:	bf04      	itt	eq
  4013b2:	f042 0201 	orreq.w	r2, r2, #1
  4013b6:	81a2      	strheq	r2, [r4, #12]
  4013b8:	b292      	uxth	r2, r2
  4013ba:	f012 0308 	ands.w	r3, r2, #8
  4013be:	6127      	str	r7, [r4, #16]
  4013c0:	6166      	str	r6, [r4, #20]
  4013c2:	d00e      	beq.n	4013e2 <setvbuf+0x13e>
  4013c4:	07d1      	lsls	r1, r2, #31
  4013c6:	d51a      	bpl.n	4013fe <setvbuf+0x15a>
  4013c8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4013ca:	4276      	negs	r6, r6
  4013cc:	2300      	movs	r3, #0
  4013ce:	f015 0501 	ands.w	r5, r5, #1
  4013d2:	61a6      	str	r6, [r4, #24]
  4013d4:	60a3      	str	r3, [r4, #8]
  4013d6:	d009      	beq.n	4013ec <setvbuf+0x148>
  4013d8:	2500      	movs	r5, #0
  4013da:	4628      	mov	r0, r5
  4013dc:	b003      	add	sp, #12
  4013de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013e2:	60a3      	str	r3, [r4, #8]
  4013e4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4013e6:	f015 0501 	ands.w	r5, r5, #1
  4013ea:	d1f5      	bne.n	4013d8 <setvbuf+0x134>
  4013ec:	0593      	lsls	r3, r2, #22
  4013ee:	d4c0      	bmi.n	401372 <setvbuf+0xce>
  4013f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4013f2:	f001 fc8b 	bl	402d0c <__retarget_lock_release_recursive>
  4013f6:	4628      	mov	r0, r5
  4013f8:	b003      	add	sp, #12
  4013fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013fe:	60a6      	str	r6, [r4, #8]
  401400:	e7f0      	b.n	4013e4 <setvbuf+0x140>
  401402:	4628      	mov	r0, r5
  401404:	f001 f8c0 	bl	402588 <__sinit>
  401408:	e7c7      	b.n	40139a <setvbuf+0xf6>
  40140a:	f04f 35ff 	mov.w	r5, #4294967295
  40140e:	e7b0      	b.n	401372 <setvbuf+0xce>
  401410:	f8dd 9000 	ldr.w	r9, [sp]
  401414:	45b1      	cmp	r9, r6
  401416:	d004      	beq.n	401422 <setvbuf+0x17e>
  401418:	4648      	mov	r0, r9
  40141a:	f001 fcf1 	bl	402e00 <malloc>
  40141e:	4607      	mov	r7, r0
  401420:	b920      	cbnz	r0, 40142c <setvbuf+0x188>
  401422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401426:	f04f 35ff 	mov.w	r5, #4294967295
  40142a:	e792      	b.n	401352 <setvbuf+0xae>
  40142c:	464e      	mov	r6, r9
  40142e:	e783      	b.n	401338 <setvbuf+0x94>
  401430:	20400008 	.word	0x20400008
	...

00401440 <strlen>:
  401440:	f890 f000 	pld	[r0]
  401444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401448:	f020 0107 	bic.w	r1, r0, #7
  40144c:	f06f 0c00 	mvn.w	ip, #0
  401450:	f010 0407 	ands.w	r4, r0, #7
  401454:	f891 f020 	pld	[r1, #32]
  401458:	f040 8049 	bne.w	4014ee <strlen+0xae>
  40145c:	f04f 0400 	mov.w	r4, #0
  401460:	f06f 0007 	mvn.w	r0, #7
  401464:	e9d1 2300 	ldrd	r2, r3, [r1]
  401468:	f891 f040 	pld	[r1, #64]	; 0x40
  40146c:	f100 0008 	add.w	r0, r0, #8
  401470:	fa82 f24c 	uadd8	r2, r2, ip
  401474:	faa4 f28c 	sel	r2, r4, ip
  401478:	fa83 f34c 	uadd8	r3, r3, ip
  40147c:	faa2 f38c 	sel	r3, r2, ip
  401480:	bb4b      	cbnz	r3, 4014d6 <strlen+0x96>
  401482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401486:	fa82 f24c 	uadd8	r2, r2, ip
  40148a:	f100 0008 	add.w	r0, r0, #8
  40148e:	faa4 f28c 	sel	r2, r4, ip
  401492:	fa83 f34c 	uadd8	r3, r3, ip
  401496:	faa2 f38c 	sel	r3, r2, ip
  40149a:	b9e3      	cbnz	r3, 4014d6 <strlen+0x96>
  40149c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4014a0:	fa82 f24c 	uadd8	r2, r2, ip
  4014a4:	f100 0008 	add.w	r0, r0, #8
  4014a8:	faa4 f28c 	sel	r2, r4, ip
  4014ac:	fa83 f34c 	uadd8	r3, r3, ip
  4014b0:	faa2 f38c 	sel	r3, r2, ip
  4014b4:	b97b      	cbnz	r3, 4014d6 <strlen+0x96>
  4014b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4014ba:	f101 0120 	add.w	r1, r1, #32
  4014be:	fa82 f24c 	uadd8	r2, r2, ip
  4014c2:	f100 0008 	add.w	r0, r0, #8
  4014c6:	faa4 f28c 	sel	r2, r4, ip
  4014ca:	fa83 f34c 	uadd8	r3, r3, ip
  4014ce:	faa2 f38c 	sel	r3, r2, ip
  4014d2:	2b00      	cmp	r3, #0
  4014d4:	d0c6      	beq.n	401464 <strlen+0x24>
  4014d6:	2a00      	cmp	r2, #0
  4014d8:	bf04      	itt	eq
  4014da:	3004      	addeq	r0, #4
  4014dc:	461a      	moveq	r2, r3
  4014de:	ba12      	rev	r2, r2
  4014e0:	fab2 f282 	clz	r2, r2
  4014e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4014e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4014ec:	4770      	bx	lr
  4014ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4014f2:	f004 0503 	and.w	r5, r4, #3
  4014f6:	f1c4 0000 	rsb	r0, r4, #0
  4014fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4014fe:	f014 0f04 	tst.w	r4, #4
  401502:	f891 f040 	pld	[r1, #64]	; 0x40
  401506:	fa0c f505 	lsl.w	r5, ip, r5
  40150a:	ea62 0205 	orn	r2, r2, r5
  40150e:	bf1c      	itt	ne
  401510:	ea63 0305 	ornne	r3, r3, r5
  401514:	4662      	movne	r2, ip
  401516:	f04f 0400 	mov.w	r4, #0
  40151a:	e7a9      	b.n	401470 <strlen+0x30>

0040151c <__sprint_r.part.0>:
  40151c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401520:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401522:	049c      	lsls	r4, r3, #18
  401524:	4693      	mov	fp, r2
  401526:	d52f      	bpl.n	401588 <__sprint_r.part.0+0x6c>
  401528:	6893      	ldr	r3, [r2, #8]
  40152a:	6812      	ldr	r2, [r2, #0]
  40152c:	b353      	cbz	r3, 401584 <__sprint_r.part.0+0x68>
  40152e:	460e      	mov	r6, r1
  401530:	4607      	mov	r7, r0
  401532:	f102 0908 	add.w	r9, r2, #8
  401536:	e919 0420 	ldmdb	r9, {r5, sl}
  40153a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40153e:	d017      	beq.n	401570 <__sprint_r.part.0+0x54>
  401540:	3d04      	subs	r5, #4
  401542:	2400      	movs	r4, #0
  401544:	e001      	b.n	40154a <__sprint_r.part.0+0x2e>
  401546:	45a0      	cmp	r8, r4
  401548:	d010      	beq.n	40156c <__sprint_r.part.0+0x50>
  40154a:	4632      	mov	r2, r6
  40154c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401550:	4638      	mov	r0, r7
  401552:	f001 f8bb 	bl	4026cc <_fputwc_r>
  401556:	1c43      	adds	r3, r0, #1
  401558:	f104 0401 	add.w	r4, r4, #1
  40155c:	d1f3      	bne.n	401546 <__sprint_r.part.0+0x2a>
  40155e:	2300      	movs	r3, #0
  401560:	f8cb 3008 	str.w	r3, [fp, #8]
  401564:	f8cb 3004 	str.w	r3, [fp, #4]
  401568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40156c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401570:	f02a 0a03 	bic.w	sl, sl, #3
  401574:	eba3 030a 	sub.w	r3, r3, sl
  401578:	f8cb 3008 	str.w	r3, [fp, #8]
  40157c:	f109 0908 	add.w	r9, r9, #8
  401580:	2b00      	cmp	r3, #0
  401582:	d1d8      	bne.n	401536 <__sprint_r.part.0+0x1a>
  401584:	2000      	movs	r0, #0
  401586:	e7ea      	b.n	40155e <__sprint_r.part.0+0x42>
  401588:	f001 fa0a 	bl	4029a0 <__sfvwrite_r>
  40158c:	2300      	movs	r3, #0
  40158e:	f8cb 3008 	str.w	r3, [fp, #8]
  401592:	f8cb 3004 	str.w	r3, [fp, #4]
  401596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40159a:	bf00      	nop

0040159c <_vfiprintf_r>:
  40159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015a0:	b0ad      	sub	sp, #180	; 0xb4
  4015a2:	461d      	mov	r5, r3
  4015a4:	468b      	mov	fp, r1
  4015a6:	4690      	mov	r8, r2
  4015a8:	9307      	str	r3, [sp, #28]
  4015aa:	9006      	str	r0, [sp, #24]
  4015ac:	b118      	cbz	r0, 4015b6 <_vfiprintf_r+0x1a>
  4015ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4015b0:	2b00      	cmp	r3, #0
  4015b2:	f000 80f3 	beq.w	40179c <_vfiprintf_r+0x200>
  4015b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4015ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4015be:	07df      	lsls	r7, r3, #31
  4015c0:	b281      	uxth	r1, r0
  4015c2:	d402      	bmi.n	4015ca <_vfiprintf_r+0x2e>
  4015c4:	058e      	lsls	r6, r1, #22
  4015c6:	f140 80fc 	bpl.w	4017c2 <_vfiprintf_r+0x226>
  4015ca:	048c      	lsls	r4, r1, #18
  4015cc:	d40a      	bmi.n	4015e4 <_vfiprintf_r+0x48>
  4015ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4015d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4015d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4015da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4015de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4015e2:	b289      	uxth	r1, r1
  4015e4:	0708      	lsls	r0, r1, #28
  4015e6:	f140 80b3 	bpl.w	401750 <_vfiprintf_r+0x1b4>
  4015ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	f000 80ae 	beq.w	401750 <_vfiprintf_r+0x1b4>
  4015f4:	f001 031a 	and.w	r3, r1, #26
  4015f8:	2b0a      	cmp	r3, #10
  4015fa:	f000 80b5 	beq.w	401768 <_vfiprintf_r+0x1cc>
  4015fe:	2300      	movs	r3, #0
  401600:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401604:	930b      	str	r3, [sp, #44]	; 0x2c
  401606:	9311      	str	r3, [sp, #68]	; 0x44
  401608:	9310      	str	r3, [sp, #64]	; 0x40
  40160a:	9303      	str	r3, [sp, #12]
  40160c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401610:	46ca      	mov	sl, r9
  401612:	f8cd b010 	str.w	fp, [sp, #16]
  401616:	f898 3000 	ldrb.w	r3, [r8]
  40161a:	4644      	mov	r4, r8
  40161c:	b1fb      	cbz	r3, 40165e <_vfiprintf_r+0xc2>
  40161e:	2b25      	cmp	r3, #37	; 0x25
  401620:	d102      	bne.n	401628 <_vfiprintf_r+0x8c>
  401622:	e01c      	b.n	40165e <_vfiprintf_r+0xc2>
  401624:	2b25      	cmp	r3, #37	; 0x25
  401626:	d003      	beq.n	401630 <_vfiprintf_r+0x94>
  401628:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40162c:	2b00      	cmp	r3, #0
  40162e:	d1f9      	bne.n	401624 <_vfiprintf_r+0x88>
  401630:	eba4 0508 	sub.w	r5, r4, r8
  401634:	b19d      	cbz	r5, 40165e <_vfiprintf_r+0xc2>
  401636:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401638:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40163a:	f8ca 8000 	str.w	r8, [sl]
  40163e:	3301      	adds	r3, #1
  401640:	442a      	add	r2, r5
  401642:	2b07      	cmp	r3, #7
  401644:	f8ca 5004 	str.w	r5, [sl, #4]
  401648:	9211      	str	r2, [sp, #68]	; 0x44
  40164a:	9310      	str	r3, [sp, #64]	; 0x40
  40164c:	dd7a      	ble.n	401744 <_vfiprintf_r+0x1a8>
  40164e:	2a00      	cmp	r2, #0
  401650:	f040 84b0 	bne.w	401fb4 <_vfiprintf_r+0xa18>
  401654:	9b03      	ldr	r3, [sp, #12]
  401656:	9210      	str	r2, [sp, #64]	; 0x40
  401658:	442b      	add	r3, r5
  40165a:	46ca      	mov	sl, r9
  40165c:	9303      	str	r3, [sp, #12]
  40165e:	7823      	ldrb	r3, [r4, #0]
  401660:	2b00      	cmp	r3, #0
  401662:	f000 83e0 	beq.w	401e26 <_vfiprintf_r+0x88a>
  401666:	2000      	movs	r0, #0
  401668:	f04f 0300 	mov.w	r3, #0
  40166c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401670:	f104 0801 	add.w	r8, r4, #1
  401674:	7862      	ldrb	r2, [r4, #1]
  401676:	4605      	mov	r5, r0
  401678:	4606      	mov	r6, r0
  40167a:	4603      	mov	r3, r0
  40167c:	f04f 34ff 	mov.w	r4, #4294967295
  401680:	f108 0801 	add.w	r8, r8, #1
  401684:	f1a2 0120 	sub.w	r1, r2, #32
  401688:	2958      	cmp	r1, #88	; 0x58
  40168a:	f200 82de 	bhi.w	401c4a <_vfiprintf_r+0x6ae>
  40168e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401692:	0221      	.short	0x0221
  401694:	02dc02dc 	.word	0x02dc02dc
  401698:	02dc0229 	.word	0x02dc0229
  40169c:	02dc02dc 	.word	0x02dc02dc
  4016a0:	02dc02dc 	.word	0x02dc02dc
  4016a4:	028902dc 	.word	0x028902dc
  4016a8:	02dc0295 	.word	0x02dc0295
  4016ac:	02bd00a2 	.word	0x02bd00a2
  4016b0:	019f02dc 	.word	0x019f02dc
  4016b4:	01a401a4 	.word	0x01a401a4
  4016b8:	01a401a4 	.word	0x01a401a4
  4016bc:	01a401a4 	.word	0x01a401a4
  4016c0:	01a401a4 	.word	0x01a401a4
  4016c4:	02dc01a4 	.word	0x02dc01a4
  4016c8:	02dc02dc 	.word	0x02dc02dc
  4016cc:	02dc02dc 	.word	0x02dc02dc
  4016d0:	02dc02dc 	.word	0x02dc02dc
  4016d4:	02dc02dc 	.word	0x02dc02dc
  4016d8:	01b202dc 	.word	0x01b202dc
  4016dc:	02dc02dc 	.word	0x02dc02dc
  4016e0:	02dc02dc 	.word	0x02dc02dc
  4016e4:	02dc02dc 	.word	0x02dc02dc
  4016e8:	02dc02dc 	.word	0x02dc02dc
  4016ec:	02dc02dc 	.word	0x02dc02dc
  4016f0:	02dc0197 	.word	0x02dc0197
  4016f4:	02dc02dc 	.word	0x02dc02dc
  4016f8:	02dc02dc 	.word	0x02dc02dc
  4016fc:	02dc019b 	.word	0x02dc019b
  401700:	025302dc 	.word	0x025302dc
  401704:	02dc02dc 	.word	0x02dc02dc
  401708:	02dc02dc 	.word	0x02dc02dc
  40170c:	02dc02dc 	.word	0x02dc02dc
  401710:	02dc02dc 	.word	0x02dc02dc
  401714:	02dc02dc 	.word	0x02dc02dc
  401718:	021b025a 	.word	0x021b025a
  40171c:	02dc02dc 	.word	0x02dc02dc
  401720:	026e02dc 	.word	0x026e02dc
  401724:	02dc021b 	.word	0x02dc021b
  401728:	027302dc 	.word	0x027302dc
  40172c:	01f502dc 	.word	0x01f502dc
  401730:	02090182 	.word	0x02090182
  401734:	02dc02d7 	.word	0x02dc02d7
  401738:	02dc029a 	.word	0x02dc029a
  40173c:	02dc00a7 	.word	0x02dc00a7
  401740:	022e02dc 	.word	0x022e02dc
  401744:	f10a 0a08 	add.w	sl, sl, #8
  401748:	9b03      	ldr	r3, [sp, #12]
  40174a:	442b      	add	r3, r5
  40174c:	9303      	str	r3, [sp, #12]
  40174e:	e786      	b.n	40165e <_vfiprintf_r+0xc2>
  401750:	4659      	mov	r1, fp
  401752:	9806      	ldr	r0, [sp, #24]
  401754:	f000 fdac 	bl	4022b0 <__swsetup_r>
  401758:	bb18      	cbnz	r0, 4017a2 <_vfiprintf_r+0x206>
  40175a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40175e:	f001 031a 	and.w	r3, r1, #26
  401762:	2b0a      	cmp	r3, #10
  401764:	f47f af4b 	bne.w	4015fe <_vfiprintf_r+0x62>
  401768:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40176c:	2b00      	cmp	r3, #0
  40176e:	f6ff af46 	blt.w	4015fe <_vfiprintf_r+0x62>
  401772:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401776:	07db      	lsls	r3, r3, #31
  401778:	d405      	bmi.n	401786 <_vfiprintf_r+0x1ea>
  40177a:	058f      	lsls	r7, r1, #22
  40177c:	d403      	bmi.n	401786 <_vfiprintf_r+0x1ea>
  40177e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401782:	f001 fac3 	bl	402d0c <__retarget_lock_release_recursive>
  401786:	462b      	mov	r3, r5
  401788:	4642      	mov	r2, r8
  40178a:	4659      	mov	r1, fp
  40178c:	9806      	ldr	r0, [sp, #24]
  40178e:	f000 fd4d 	bl	40222c <__sbprintf>
  401792:	9003      	str	r0, [sp, #12]
  401794:	9803      	ldr	r0, [sp, #12]
  401796:	b02d      	add	sp, #180	; 0xb4
  401798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40179c:	f000 fef4 	bl	402588 <__sinit>
  4017a0:	e709      	b.n	4015b6 <_vfiprintf_r+0x1a>
  4017a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4017a6:	07d9      	lsls	r1, r3, #31
  4017a8:	d404      	bmi.n	4017b4 <_vfiprintf_r+0x218>
  4017aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4017ae:	059a      	lsls	r2, r3, #22
  4017b0:	f140 84aa 	bpl.w	402108 <_vfiprintf_r+0xb6c>
  4017b4:	f04f 33ff 	mov.w	r3, #4294967295
  4017b8:	9303      	str	r3, [sp, #12]
  4017ba:	9803      	ldr	r0, [sp, #12]
  4017bc:	b02d      	add	sp, #180	; 0xb4
  4017be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4017c6:	f001 fa9f 	bl	402d08 <__retarget_lock_acquire_recursive>
  4017ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4017ce:	b281      	uxth	r1, r0
  4017d0:	e6fb      	b.n	4015ca <_vfiprintf_r+0x2e>
  4017d2:	4276      	negs	r6, r6
  4017d4:	9207      	str	r2, [sp, #28]
  4017d6:	f043 0304 	orr.w	r3, r3, #4
  4017da:	f898 2000 	ldrb.w	r2, [r8]
  4017de:	e74f      	b.n	401680 <_vfiprintf_r+0xe4>
  4017e0:	9608      	str	r6, [sp, #32]
  4017e2:	069e      	lsls	r6, r3, #26
  4017e4:	f100 8450 	bmi.w	402088 <_vfiprintf_r+0xaec>
  4017e8:	9907      	ldr	r1, [sp, #28]
  4017ea:	06dd      	lsls	r5, r3, #27
  4017ec:	460a      	mov	r2, r1
  4017ee:	f100 83ef 	bmi.w	401fd0 <_vfiprintf_r+0xa34>
  4017f2:	0658      	lsls	r0, r3, #25
  4017f4:	f140 83ec 	bpl.w	401fd0 <_vfiprintf_r+0xa34>
  4017f8:	880e      	ldrh	r6, [r1, #0]
  4017fa:	3104      	adds	r1, #4
  4017fc:	2700      	movs	r7, #0
  4017fe:	2201      	movs	r2, #1
  401800:	9107      	str	r1, [sp, #28]
  401802:	f04f 0100 	mov.w	r1, #0
  401806:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40180a:	2500      	movs	r5, #0
  40180c:	1c61      	adds	r1, r4, #1
  40180e:	f000 8116 	beq.w	401a3e <_vfiprintf_r+0x4a2>
  401812:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401816:	9102      	str	r1, [sp, #8]
  401818:	ea56 0107 	orrs.w	r1, r6, r7
  40181c:	f040 8114 	bne.w	401a48 <_vfiprintf_r+0x4ac>
  401820:	2c00      	cmp	r4, #0
  401822:	f040 835c 	bne.w	401ede <_vfiprintf_r+0x942>
  401826:	2a00      	cmp	r2, #0
  401828:	f040 83b7 	bne.w	401f9a <_vfiprintf_r+0x9fe>
  40182c:	f013 0301 	ands.w	r3, r3, #1
  401830:	9305      	str	r3, [sp, #20]
  401832:	f000 8457 	beq.w	4020e4 <_vfiprintf_r+0xb48>
  401836:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40183a:	2330      	movs	r3, #48	; 0x30
  40183c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401840:	9b05      	ldr	r3, [sp, #20]
  401842:	42a3      	cmp	r3, r4
  401844:	bfb8      	it	lt
  401846:	4623      	movlt	r3, r4
  401848:	9301      	str	r3, [sp, #4]
  40184a:	b10d      	cbz	r5, 401850 <_vfiprintf_r+0x2b4>
  40184c:	3301      	adds	r3, #1
  40184e:	9301      	str	r3, [sp, #4]
  401850:	9b02      	ldr	r3, [sp, #8]
  401852:	f013 0302 	ands.w	r3, r3, #2
  401856:	9309      	str	r3, [sp, #36]	; 0x24
  401858:	d002      	beq.n	401860 <_vfiprintf_r+0x2c4>
  40185a:	9b01      	ldr	r3, [sp, #4]
  40185c:	3302      	adds	r3, #2
  40185e:	9301      	str	r3, [sp, #4]
  401860:	9b02      	ldr	r3, [sp, #8]
  401862:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401866:	930a      	str	r3, [sp, #40]	; 0x28
  401868:	f040 8217 	bne.w	401c9a <_vfiprintf_r+0x6fe>
  40186c:	9b08      	ldr	r3, [sp, #32]
  40186e:	9a01      	ldr	r2, [sp, #4]
  401870:	1a9d      	subs	r5, r3, r2
  401872:	2d00      	cmp	r5, #0
  401874:	f340 8211 	ble.w	401c9a <_vfiprintf_r+0x6fe>
  401878:	2d10      	cmp	r5, #16
  40187a:	f340 8490 	ble.w	40219e <_vfiprintf_r+0xc02>
  40187e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401880:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401882:	4ec4      	ldr	r6, [pc, #784]	; (401b94 <_vfiprintf_r+0x5f8>)
  401884:	46d6      	mov	lr, sl
  401886:	2710      	movs	r7, #16
  401888:	46a2      	mov	sl, r4
  40188a:	4619      	mov	r1, r3
  40188c:	9c06      	ldr	r4, [sp, #24]
  40188e:	e007      	b.n	4018a0 <_vfiprintf_r+0x304>
  401890:	f101 0c02 	add.w	ip, r1, #2
  401894:	f10e 0e08 	add.w	lr, lr, #8
  401898:	4601      	mov	r1, r0
  40189a:	3d10      	subs	r5, #16
  40189c:	2d10      	cmp	r5, #16
  40189e:	dd11      	ble.n	4018c4 <_vfiprintf_r+0x328>
  4018a0:	1c48      	adds	r0, r1, #1
  4018a2:	3210      	adds	r2, #16
  4018a4:	2807      	cmp	r0, #7
  4018a6:	9211      	str	r2, [sp, #68]	; 0x44
  4018a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4018ac:	9010      	str	r0, [sp, #64]	; 0x40
  4018ae:	ddef      	ble.n	401890 <_vfiprintf_r+0x2f4>
  4018b0:	2a00      	cmp	r2, #0
  4018b2:	f040 81e4 	bne.w	401c7e <_vfiprintf_r+0x6e2>
  4018b6:	3d10      	subs	r5, #16
  4018b8:	2d10      	cmp	r5, #16
  4018ba:	4611      	mov	r1, r2
  4018bc:	f04f 0c01 	mov.w	ip, #1
  4018c0:	46ce      	mov	lr, r9
  4018c2:	dced      	bgt.n	4018a0 <_vfiprintf_r+0x304>
  4018c4:	4654      	mov	r4, sl
  4018c6:	4661      	mov	r1, ip
  4018c8:	46f2      	mov	sl, lr
  4018ca:	442a      	add	r2, r5
  4018cc:	2907      	cmp	r1, #7
  4018ce:	9211      	str	r2, [sp, #68]	; 0x44
  4018d0:	f8ca 6000 	str.w	r6, [sl]
  4018d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4018d8:	9110      	str	r1, [sp, #64]	; 0x40
  4018da:	f300 82ec 	bgt.w	401eb6 <_vfiprintf_r+0x91a>
  4018de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4018e2:	f10a 0a08 	add.w	sl, sl, #8
  4018e6:	1c48      	adds	r0, r1, #1
  4018e8:	2d00      	cmp	r5, #0
  4018ea:	f040 81de 	bne.w	401caa <_vfiprintf_r+0x70e>
  4018ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4018f0:	2b00      	cmp	r3, #0
  4018f2:	f000 81f8 	beq.w	401ce6 <_vfiprintf_r+0x74a>
  4018f6:	3202      	adds	r2, #2
  4018f8:	a90e      	add	r1, sp, #56	; 0x38
  4018fa:	2302      	movs	r3, #2
  4018fc:	2807      	cmp	r0, #7
  4018fe:	9211      	str	r2, [sp, #68]	; 0x44
  401900:	9010      	str	r0, [sp, #64]	; 0x40
  401902:	e88a 000a 	stmia.w	sl, {r1, r3}
  401906:	f340 81ea 	ble.w	401cde <_vfiprintf_r+0x742>
  40190a:	2a00      	cmp	r2, #0
  40190c:	f040 838c 	bne.w	402028 <_vfiprintf_r+0xa8c>
  401910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401912:	2b80      	cmp	r3, #128	; 0x80
  401914:	f04f 0001 	mov.w	r0, #1
  401918:	4611      	mov	r1, r2
  40191a:	46ca      	mov	sl, r9
  40191c:	f040 81e7 	bne.w	401cee <_vfiprintf_r+0x752>
  401920:	9b08      	ldr	r3, [sp, #32]
  401922:	9d01      	ldr	r5, [sp, #4]
  401924:	1b5e      	subs	r6, r3, r5
  401926:	2e00      	cmp	r6, #0
  401928:	f340 81e1 	ble.w	401cee <_vfiprintf_r+0x752>
  40192c:	2e10      	cmp	r6, #16
  40192e:	4d9a      	ldr	r5, [pc, #616]	; (401b98 <_vfiprintf_r+0x5fc>)
  401930:	f340 8450 	ble.w	4021d4 <_vfiprintf_r+0xc38>
  401934:	46d4      	mov	ip, sl
  401936:	2710      	movs	r7, #16
  401938:	46a2      	mov	sl, r4
  40193a:	9c06      	ldr	r4, [sp, #24]
  40193c:	e007      	b.n	40194e <_vfiprintf_r+0x3b2>
  40193e:	f101 0e02 	add.w	lr, r1, #2
  401942:	f10c 0c08 	add.w	ip, ip, #8
  401946:	4601      	mov	r1, r0
  401948:	3e10      	subs	r6, #16
  40194a:	2e10      	cmp	r6, #16
  40194c:	dd11      	ble.n	401972 <_vfiprintf_r+0x3d6>
  40194e:	1c48      	adds	r0, r1, #1
  401950:	3210      	adds	r2, #16
  401952:	2807      	cmp	r0, #7
  401954:	9211      	str	r2, [sp, #68]	; 0x44
  401956:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40195a:	9010      	str	r0, [sp, #64]	; 0x40
  40195c:	ddef      	ble.n	40193e <_vfiprintf_r+0x3a2>
  40195e:	2a00      	cmp	r2, #0
  401960:	f040 829d 	bne.w	401e9e <_vfiprintf_r+0x902>
  401964:	3e10      	subs	r6, #16
  401966:	2e10      	cmp	r6, #16
  401968:	f04f 0e01 	mov.w	lr, #1
  40196c:	4611      	mov	r1, r2
  40196e:	46cc      	mov	ip, r9
  401970:	dced      	bgt.n	40194e <_vfiprintf_r+0x3b2>
  401972:	4654      	mov	r4, sl
  401974:	46e2      	mov	sl, ip
  401976:	4432      	add	r2, r6
  401978:	f1be 0f07 	cmp.w	lr, #7
  40197c:	9211      	str	r2, [sp, #68]	; 0x44
  40197e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401982:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401986:	f300 8369 	bgt.w	40205c <_vfiprintf_r+0xac0>
  40198a:	f10a 0a08 	add.w	sl, sl, #8
  40198e:	f10e 0001 	add.w	r0, lr, #1
  401992:	4671      	mov	r1, lr
  401994:	e1ab      	b.n	401cee <_vfiprintf_r+0x752>
  401996:	9608      	str	r6, [sp, #32]
  401998:	f013 0220 	ands.w	r2, r3, #32
  40199c:	f040 838c 	bne.w	4020b8 <_vfiprintf_r+0xb1c>
  4019a0:	f013 0110 	ands.w	r1, r3, #16
  4019a4:	f040 831a 	bne.w	401fdc <_vfiprintf_r+0xa40>
  4019a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4019ac:	f000 8316 	beq.w	401fdc <_vfiprintf_r+0xa40>
  4019b0:	9807      	ldr	r0, [sp, #28]
  4019b2:	460a      	mov	r2, r1
  4019b4:	4601      	mov	r1, r0
  4019b6:	3104      	adds	r1, #4
  4019b8:	8806      	ldrh	r6, [r0, #0]
  4019ba:	9107      	str	r1, [sp, #28]
  4019bc:	2700      	movs	r7, #0
  4019be:	e720      	b.n	401802 <_vfiprintf_r+0x266>
  4019c0:	9608      	str	r6, [sp, #32]
  4019c2:	f043 0310 	orr.w	r3, r3, #16
  4019c6:	e7e7      	b.n	401998 <_vfiprintf_r+0x3fc>
  4019c8:	9608      	str	r6, [sp, #32]
  4019ca:	f043 0310 	orr.w	r3, r3, #16
  4019ce:	e708      	b.n	4017e2 <_vfiprintf_r+0x246>
  4019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4019d4:	f898 2000 	ldrb.w	r2, [r8]
  4019d8:	e652      	b.n	401680 <_vfiprintf_r+0xe4>
  4019da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4019de:	2600      	movs	r6, #0
  4019e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4019e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4019e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4019ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4019f0:	2909      	cmp	r1, #9
  4019f2:	d9f5      	bls.n	4019e0 <_vfiprintf_r+0x444>
  4019f4:	e646      	b.n	401684 <_vfiprintf_r+0xe8>
  4019f6:	9608      	str	r6, [sp, #32]
  4019f8:	2800      	cmp	r0, #0
  4019fa:	f040 8408 	bne.w	40220e <_vfiprintf_r+0xc72>
  4019fe:	f043 0310 	orr.w	r3, r3, #16
  401a02:	069e      	lsls	r6, r3, #26
  401a04:	f100 834c 	bmi.w	4020a0 <_vfiprintf_r+0xb04>
  401a08:	06dd      	lsls	r5, r3, #27
  401a0a:	f100 82f3 	bmi.w	401ff4 <_vfiprintf_r+0xa58>
  401a0e:	0658      	lsls	r0, r3, #25
  401a10:	f140 82f0 	bpl.w	401ff4 <_vfiprintf_r+0xa58>
  401a14:	9d07      	ldr	r5, [sp, #28]
  401a16:	f9b5 6000 	ldrsh.w	r6, [r5]
  401a1a:	462a      	mov	r2, r5
  401a1c:	17f7      	asrs	r7, r6, #31
  401a1e:	3204      	adds	r2, #4
  401a20:	4630      	mov	r0, r6
  401a22:	4639      	mov	r1, r7
  401a24:	9207      	str	r2, [sp, #28]
  401a26:	2800      	cmp	r0, #0
  401a28:	f171 0200 	sbcs.w	r2, r1, #0
  401a2c:	f2c0 835d 	blt.w	4020ea <_vfiprintf_r+0xb4e>
  401a30:	1c61      	adds	r1, r4, #1
  401a32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401a36:	f04f 0201 	mov.w	r2, #1
  401a3a:	f47f aeea 	bne.w	401812 <_vfiprintf_r+0x276>
  401a3e:	ea56 0107 	orrs.w	r1, r6, r7
  401a42:	f000 824d 	beq.w	401ee0 <_vfiprintf_r+0x944>
  401a46:	9302      	str	r3, [sp, #8]
  401a48:	2a01      	cmp	r2, #1
  401a4a:	f000 828c 	beq.w	401f66 <_vfiprintf_r+0x9ca>
  401a4e:	2a02      	cmp	r2, #2
  401a50:	f040 825c 	bne.w	401f0c <_vfiprintf_r+0x970>
  401a54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401a56:	46cb      	mov	fp, r9
  401a58:	0933      	lsrs	r3, r6, #4
  401a5a:	f006 010f 	and.w	r1, r6, #15
  401a5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401a62:	093a      	lsrs	r2, r7, #4
  401a64:	461e      	mov	r6, r3
  401a66:	4617      	mov	r7, r2
  401a68:	5c43      	ldrb	r3, [r0, r1]
  401a6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401a6e:	ea56 0307 	orrs.w	r3, r6, r7
  401a72:	d1f1      	bne.n	401a58 <_vfiprintf_r+0x4bc>
  401a74:	eba9 030b 	sub.w	r3, r9, fp
  401a78:	9305      	str	r3, [sp, #20]
  401a7a:	e6e1      	b.n	401840 <_vfiprintf_r+0x2a4>
  401a7c:	2800      	cmp	r0, #0
  401a7e:	f040 83c0 	bne.w	402202 <_vfiprintf_r+0xc66>
  401a82:	0699      	lsls	r1, r3, #26
  401a84:	f100 8367 	bmi.w	402156 <_vfiprintf_r+0xbba>
  401a88:	06da      	lsls	r2, r3, #27
  401a8a:	f100 80f1 	bmi.w	401c70 <_vfiprintf_r+0x6d4>
  401a8e:	065b      	lsls	r3, r3, #25
  401a90:	f140 80ee 	bpl.w	401c70 <_vfiprintf_r+0x6d4>
  401a94:	9a07      	ldr	r2, [sp, #28]
  401a96:	6813      	ldr	r3, [r2, #0]
  401a98:	3204      	adds	r2, #4
  401a9a:	9207      	str	r2, [sp, #28]
  401a9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401aa0:	801a      	strh	r2, [r3, #0]
  401aa2:	e5b8      	b.n	401616 <_vfiprintf_r+0x7a>
  401aa4:	9807      	ldr	r0, [sp, #28]
  401aa6:	4a3d      	ldr	r2, [pc, #244]	; (401b9c <_vfiprintf_r+0x600>)
  401aa8:	9608      	str	r6, [sp, #32]
  401aaa:	920b      	str	r2, [sp, #44]	; 0x2c
  401aac:	6806      	ldr	r6, [r0, #0]
  401aae:	2278      	movs	r2, #120	; 0x78
  401ab0:	2130      	movs	r1, #48	; 0x30
  401ab2:	3004      	adds	r0, #4
  401ab4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401ab8:	f043 0302 	orr.w	r3, r3, #2
  401abc:	9007      	str	r0, [sp, #28]
  401abe:	2700      	movs	r7, #0
  401ac0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401ac4:	2202      	movs	r2, #2
  401ac6:	e69c      	b.n	401802 <_vfiprintf_r+0x266>
  401ac8:	9608      	str	r6, [sp, #32]
  401aca:	2800      	cmp	r0, #0
  401acc:	d099      	beq.n	401a02 <_vfiprintf_r+0x466>
  401ace:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401ad2:	e796      	b.n	401a02 <_vfiprintf_r+0x466>
  401ad4:	f898 2000 	ldrb.w	r2, [r8]
  401ad8:	2d00      	cmp	r5, #0
  401ada:	f47f add1 	bne.w	401680 <_vfiprintf_r+0xe4>
  401ade:	2001      	movs	r0, #1
  401ae0:	2520      	movs	r5, #32
  401ae2:	e5cd      	b.n	401680 <_vfiprintf_r+0xe4>
  401ae4:	f043 0301 	orr.w	r3, r3, #1
  401ae8:	f898 2000 	ldrb.w	r2, [r8]
  401aec:	e5c8      	b.n	401680 <_vfiprintf_r+0xe4>
  401aee:	9608      	str	r6, [sp, #32]
  401af0:	2800      	cmp	r0, #0
  401af2:	f040 8393 	bne.w	40221c <_vfiprintf_r+0xc80>
  401af6:	4929      	ldr	r1, [pc, #164]	; (401b9c <_vfiprintf_r+0x600>)
  401af8:	910b      	str	r1, [sp, #44]	; 0x2c
  401afa:	069f      	lsls	r7, r3, #26
  401afc:	f100 82e8 	bmi.w	4020d0 <_vfiprintf_r+0xb34>
  401b00:	9807      	ldr	r0, [sp, #28]
  401b02:	06de      	lsls	r6, r3, #27
  401b04:	4601      	mov	r1, r0
  401b06:	f100 8270 	bmi.w	401fea <_vfiprintf_r+0xa4e>
  401b0a:	065d      	lsls	r5, r3, #25
  401b0c:	f140 826d 	bpl.w	401fea <_vfiprintf_r+0xa4e>
  401b10:	3104      	adds	r1, #4
  401b12:	8806      	ldrh	r6, [r0, #0]
  401b14:	9107      	str	r1, [sp, #28]
  401b16:	2700      	movs	r7, #0
  401b18:	07d8      	lsls	r0, r3, #31
  401b1a:	f140 8222 	bpl.w	401f62 <_vfiprintf_r+0x9c6>
  401b1e:	ea56 0107 	orrs.w	r1, r6, r7
  401b22:	f000 821e 	beq.w	401f62 <_vfiprintf_r+0x9c6>
  401b26:	2130      	movs	r1, #48	; 0x30
  401b28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401b2c:	f043 0302 	orr.w	r3, r3, #2
  401b30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401b34:	2202      	movs	r2, #2
  401b36:	e664      	b.n	401802 <_vfiprintf_r+0x266>
  401b38:	9608      	str	r6, [sp, #32]
  401b3a:	2800      	cmp	r0, #0
  401b3c:	f040 836b 	bne.w	402216 <_vfiprintf_r+0xc7a>
  401b40:	4917      	ldr	r1, [pc, #92]	; (401ba0 <_vfiprintf_r+0x604>)
  401b42:	910b      	str	r1, [sp, #44]	; 0x2c
  401b44:	e7d9      	b.n	401afa <_vfiprintf_r+0x55e>
  401b46:	9907      	ldr	r1, [sp, #28]
  401b48:	9608      	str	r6, [sp, #32]
  401b4a:	680a      	ldr	r2, [r1, #0]
  401b4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401b50:	f04f 0000 	mov.w	r0, #0
  401b54:	460a      	mov	r2, r1
  401b56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401b5a:	3204      	adds	r2, #4
  401b5c:	2001      	movs	r0, #1
  401b5e:	9001      	str	r0, [sp, #4]
  401b60:	9207      	str	r2, [sp, #28]
  401b62:	9005      	str	r0, [sp, #20]
  401b64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401b68:	9302      	str	r3, [sp, #8]
  401b6a:	2400      	movs	r4, #0
  401b6c:	e670      	b.n	401850 <_vfiprintf_r+0x2b4>
  401b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401b72:	f898 2000 	ldrb.w	r2, [r8]
  401b76:	e583      	b.n	401680 <_vfiprintf_r+0xe4>
  401b78:	f898 2000 	ldrb.w	r2, [r8]
  401b7c:	2a6c      	cmp	r2, #108	; 0x6c
  401b7e:	bf03      	ittte	eq
  401b80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401b84:	f043 0320 	orreq.w	r3, r3, #32
  401b88:	f108 0801 	addeq.w	r8, r8, #1
  401b8c:	f043 0310 	orrne.w	r3, r3, #16
  401b90:	e576      	b.n	401680 <_vfiprintf_r+0xe4>
  401b92:	bf00      	nop
  401b94:	0040414c 	.word	0x0040414c
  401b98:	0040415c 	.word	0x0040415c
  401b9c:	00404130 	.word	0x00404130
  401ba0:	0040411c 	.word	0x0040411c
  401ba4:	9907      	ldr	r1, [sp, #28]
  401ba6:	680e      	ldr	r6, [r1, #0]
  401ba8:	460a      	mov	r2, r1
  401baa:	2e00      	cmp	r6, #0
  401bac:	f102 0204 	add.w	r2, r2, #4
  401bb0:	f6ff ae0f 	blt.w	4017d2 <_vfiprintf_r+0x236>
  401bb4:	9207      	str	r2, [sp, #28]
  401bb6:	f898 2000 	ldrb.w	r2, [r8]
  401bba:	e561      	b.n	401680 <_vfiprintf_r+0xe4>
  401bbc:	f898 2000 	ldrb.w	r2, [r8]
  401bc0:	2001      	movs	r0, #1
  401bc2:	252b      	movs	r5, #43	; 0x2b
  401bc4:	e55c      	b.n	401680 <_vfiprintf_r+0xe4>
  401bc6:	9907      	ldr	r1, [sp, #28]
  401bc8:	9608      	str	r6, [sp, #32]
  401bca:	f8d1 b000 	ldr.w	fp, [r1]
  401bce:	f04f 0200 	mov.w	r2, #0
  401bd2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401bd6:	1d0e      	adds	r6, r1, #4
  401bd8:	f1bb 0f00 	cmp.w	fp, #0
  401bdc:	f000 82e5 	beq.w	4021aa <_vfiprintf_r+0xc0e>
  401be0:	1c67      	adds	r7, r4, #1
  401be2:	f000 82c4 	beq.w	40216e <_vfiprintf_r+0xbd2>
  401be6:	4622      	mov	r2, r4
  401be8:	2100      	movs	r1, #0
  401bea:	4658      	mov	r0, fp
  401bec:	9301      	str	r3, [sp, #4]
  401bee:	f001 fbd7 	bl	4033a0 <memchr>
  401bf2:	9b01      	ldr	r3, [sp, #4]
  401bf4:	2800      	cmp	r0, #0
  401bf6:	f000 82e5 	beq.w	4021c4 <_vfiprintf_r+0xc28>
  401bfa:	eba0 020b 	sub.w	r2, r0, fp
  401bfe:	9205      	str	r2, [sp, #20]
  401c00:	9607      	str	r6, [sp, #28]
  401c02:	9302      	str	r3, [sp, #8]
  401c04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401c08:	2400      	movs	r4, #0
  401c0a:	e619      	b.n	401840 <_vfiprintf_r+0x2a4>
  401c0c:	f898 2000 	ldrb.w	r2, [r8]
  401c10:	2a2a      	cmp	r2, #42	; 0x2a
  401c12:	f108 0701 	add.w	r7, r8, #1
  401c16:	f000 82e9 	beq.w	4021ec <_vfiprintf_r+0xc50>
  401c1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401c1e:	2909      	cmp	r1, #9
  401c20:	46b8      	mov	r8, r7
  401c22:	f04f 0400 	mov.w	r4, #0
  401c26:	f63f ad2d 	bhi.w	401684 <_vfiprintf_r+0xe8>
  401c2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  401c2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401c32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401c36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401c3a:	2909      	cmp	r1, #9
  401c3c:	d9f5      	bls.n	401c2a <_vfiprintf_r+0x68e>
  401c3e:	e521      	b.n	401684 <_vfiprintf_r+0xe8>
  401c40:	f043 0320 	orr.w	r3, r3, #32
  401c44:	f898 2000 	ldrb.w	r2, [r8]
  401c48:	e51a      	b.n	401680 <_vfiprintf_r+0xe4>
  401c4a:	9608      	str	r6, [sp, #32]
  401c4c:	2800      	cmp	r0, #0
  401c4e:	f040 82db 	bne.w	402208 <_vfiprintf_r+0xc6c>
  401c52:	2a00      	cmp	r2, #0
  401c54:	f000 80e7 	beq.w	401e26 <_vfiprintf_r+0x88a>
  401c58:	2101      	movs	r1, #1
  401c5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401c5e:	f04f 0200 	mov.w	r2, #0
  401c62:	9101      	str	r1, [sp, #4]
  401c64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401c68:	9105      	str	r1, [sp, #20]
  401c6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401c6e:	e77b      	b.n	401b68 <_vfiprintf_r+0x5cc>
  401c70:	9a07      	ldr	r2, [sp, #28]
  401c72:	6813      	ldr	r3, [r2, #0]
  401c74:	3204      	adds	r2, #4
  401c76:	9207      	str	r2, [sp, #28]
  401c78:	9a03      	ldr	r2, [sp, #12]
  401c7a:	601a      	str	r2, [r3, #0]
  401c7c:	e4cb      	b.n	401616 <_vfiprintf_r+0x7a>
  401c7e:	aa0f      	add	r2, sp, #60	; 0x3c
  401c80:	9904      	ldr	r1, [sp, #16]
  401c82:	4620      	mov	r0, r4
  401c84:	f7ff fc4a 	bl	40151c <__sprint_r.part.0>
  401c88:	2800      	cmp	r0, #0
  401c8a:	f040 8139 	bne.w	401f00 <_vfiprintf_r+0x964>
  401c8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c92:	f101 0c01 	add.w	ip, r1, #1
  401c96:	46ce      	mov	lr, r9
  401c98:	e5ff      	b.n	40189a <_vfiprintf_r+0x2fe>
  401c9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c9e:	1c48      	adds	r0, r1, #1
  401ca0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ca4:	2d00      	cmp	r5, #0
  401ca6:	f43f ae22 	beq.w	4018ee <_vfiprintf_r+0x352>
  401caa:	3201      	adds	r2, #1
  401cac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401cb0:	2101      	movs	r1, #1
  401cb2:	2807      	cmp	r0, #7
  401cb4:	9211      	str	r2, [sp, #68]	; 0x44
  401cb6:	9010      	str	r0, [sp, #64]	; 0x40
  401cb8:	f8ca 5000 	str.w	r5, [sl]
  401cbc:	f8ca 1004 	str.w	r1, [sl, #4]
  401cc0:	f340 8108 	ble.w	401ed4 <_vfiprintf_r+0x938>
  401cc4:	2a00      	cmp	r2, #0
  401cc6:	f040 81bc 	bne.w	402042 <_vfiprintf_r+0xaa6>
  401cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ccc:	2b00      	cmp	r3, #0
  401cce:	f43f ae1f 	beq.w	401910 <_vfiprintf_r+0x374>
  401cd2:	ab0e      	add	r3, sp, #56	; 0x38
  401cd4:	2202      	movs	r2, #2
  401cd6:	4608      	mov	r0, r1
  401cd8:	931c      	str	r3, [sp, #112]	; 0x70
  401cda:	921d      	str	r2, [sp, #116]	; 0x74
  401cdc:	46ca      	mov	sl, r9
  401cde:	4601      	mov	r1, r0
  401ce0:	f10a 0a08 	add.w	sl, sl, #8
  401ce4:	3001      	adds	r0, #1
  401ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ce8:	2b80      	cmp	r3, #128	; 0x80
  401cea:	f43f ae19 	beq.w	401920 <_vfiprintf_r+0x384>
  401cee:	9b05      	ldr	r3, [sp, #20]
  401cf0:	1ae4      	subs	r4, r4, r3
  401cf2:	2c00      	cmp	r4, #0
  401cf4:	dd2e      	ble.n	401d54 <_vfiprintf_r+0x7b8>
  401cf6:	2c10      	cmp	r4, #16
  401cf8:	4db3      	ldr	r5, [pc, #716]	; (401fc8 <_vfiprintf_r+0xa2c>)
  401cfa:	dd1e      	ble.n	401d3a <_vfiprintf_r+0x79e>
  401cfc:	46d6      	mov	lr, sl
  401cfe:	2610      	movs	r6, #16
  401d00:	9f06      	ldr	r7, [sp, #24]
  401d02:	f8dd a010 	ldr.w	sl, [sp, #16]
  401d06:	e006      	b.n	401d16 <_vfiprintf_r+0x77a>
  401d08:	1c88      	adds	r0, r1, #2
  401d0a:	f10e 0e08 	add.w	lr, lr, #8
  401d0e:	4619      	mov	r1, r3
  401d10:	3c10      	subs	r4, #16
  401d12:	2c10      	cmp	r4, #16
  401d14:	dd10      	ble.n	401d38 <_vfiprintf_r+0x79c>
  401d16:	1c4b      	adds	r3, r1, #1
  401d18:	3210      	adds	r2, #16
  401d1a:	2b07      	cmp	r3, #7
  401d1c:	9211      	str	r2, [sp, #68]	; 0x44
  401d1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401d22:	9310      	str	r3, [sp, #64]	; 0x40
  401d24:	ddf0      	ble.n	401d08 <_vfiprintf_r+0x76c>
  401d26:	2a00      	cmp	r2, #0
  401d28:	d165      	bne.n	401df6 <_vfiprintf_r+0x85a>
  401d2a:	3c10      	subs	r4, #16
  401d2c:	2c10      	cmp	r4, #16
  401d2e:	f04f 0001 	mov.w	r0, #1
  401d32:	4611      	mov	r1, r2
  401d34:	46ce      	mov	lr, r9
  401d36:	dcee      	bgt.n	401d16 <_vfiprintf_r+0x77a>
  401d38:	46f2      	mov	sl, lr
  401d3a:	4422      	add	r2, r4
  401d3c:	2807      	cmp	r0, #7
  401d3e:	9211      	str	r2, [sp, #68]	; 0x44
  401d40:	f8ca 5000 	str.w	r5, [sl]
  401d44:	f8ca 4004 	str.w	r4, [sl, #4]
  401d48:	9010      	str	r0, [sp, #64]	; 0x40
  401d4a:	f300 8085 	bgt.w	401e58 <_vfiprintf_r+0x8bc>
  401d4e:	f10a 0a08 	add.w	sl, sl, #8
  401d52:	3001      	adds	r0, #1
  401d54:	9905      	ldr	r1, [sp, #20]
  401d56:	f8ca b000 	str.w	fp, [sl]
  401d5a:	440a      	add	r2, r1
  401d5c:	2807      	cmp	r0, #7
  401d5e:	9211      	str	r2, [sp, #68]	; 0x44
  401d60:	f8ca 1004 	str.w	r1, [sl, #4]
  401d64:	9010      	str	r0, [sp, #64]	; 0x40
  401d66:	f340 8082 	ble.w	401e6e <_vfiprintf_r+0x8d2>
  401d6a:	2a00      	cmp	r2, #0
  401d6c:	f040 8118 	bne.w	401fa0 <_vfiprintf_r+0xa04>
  401d70:	9b02      	ldr	r3, [sp, #8]
  401d72:	9210      	str	r2, [sp, #64]	; 0x40
  401d74:	0758      	lsls	r0, r3, #29
  401d76:	d535      	bpl.n	401de4 <_vfiprintf_r+0x848>
  401d78:	9b08      	ldr	r3, [sp, #32]
  401d7a:	9901      	ldr	r1, [sp, #4]
  401d7c:	1a5c      	subs	r4, r3, r1
  401d7e:	2c00      	cmp	r4, #0
  401d80:	f340 80e7 	ble.w	401f52 <_vfiprintf_r+0x9b6>
  401d84:	46ca      	mov	sl, r9
  401d86:	2c10      	cmp	r4, #16
  401d88:	f340 8218 	ble.w	4021bc <_vfiprintf_r+0xc20>
  401d8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d8e:	4e8f      	ldr	r6, [pc, #572]	; (401fcc <_vfiprintf_r+0xa30>)
  401d90:	9f06      	ldr	r7, [sp, #24]
  401d92:	f8dd b010 	ldr.w	fp, [sp, #16]
  401d96:	2510      	movs	r5, #16
  401d98:	e006      	b.n	401da8 <_vfiprintf_r+0x80c>
  401d9a:	1c88      	adds	r0, r1, #2
  401d9c:	f10a 0a08 	add.w	sl, sl, #8
  401da0:	4619      	mov	r1, r3
  401da2:	3c10      	subs	r4, #16
  401da4:	2c10      	cmp	r4, #16
  401da6:	dd11      	ble.n	401dcc <_vfiprintf_r+0x830>
  401da8:	1c4b      	adds	r3, r1, #1
  401daa:	3210      	adds	r2, #16
  401dac:	2b07      	cmp	r3, #7
  401dae:	9211      	str	r2, [sp, #68]	; 0x44
  401db0:	f8ca 6000 	str.w	r6, [sl]
  401db4:	f8ca 5004 	str.w	r5, [sl, #4]
  401db8:	9310      	str	r3, [sp, #64]	; 0x40
  401dba:	ddee      	ble.n	401d9a <_vfiprintf_r+0x7fe>
  401dbc:	bb42      	cbnz	r2, 401e10 <_vfiprintf_r+0x874>
  401dbe:	3c10      	subs	r4, #16
  401dc0:	2c10      	cmp	r4, #16
  401dc2:	f04f 0001 	mov.w	r0, #1
  401dc6:	4611      	mov	r1, r2
  401dc8:	46ca      	mov	sl, r9
  401dca:	dced      	bgt.n	401da8 <_vfiprintf_r+0x80c>
  401dcc:	4422      	add	r2, r4
  401dce:	2807      	cmp	r0, #7
  401dd0:	9211      	str	r2, [sp, #68]	; 0x44
  401dd2:	f8ca 6000 	str.w	r6, [sl]
  401dd6:	f8ca 4004 	str.w	r4, [sl, #4]
  401dda:	9010      	str	r0, [sp, #64]	; 0x40
  401ddc:	dd51      	ble.n	401e82 <_vfiprintf_r+0x8e6>
  401dde:	2a00      	cmp	r2, #0
  401de0:	f040 819b 	bne.w	40211a <_vfiprintf_r+0xb7e>
  401de4:	9b03      	ldr	r3, [sp, #12]
  401de6:	9a08      	ldr	r2, [sp, #32]
  401de8:	9901      	ldr	r1, [sp, #4]
  401dea:	428a      	cmp	r2, r1
  401dec:	bfac      	ite	ge
  401dee:	189b      	addge	r3, r3, r2
  401df0:	185b      	addlt	r3, r3, r1
  401df2:	9303      	str	r3, [sp, #12]
  401df4:	e04e      	b.n	401e94 <_vfiprintf_r+0x8f8>
  401df6:	aa0f      	add	r2, sp, #60	; 0x3c
  401df8:	4651      	mov	r1, sl
  401dfa:	4638      	mov	r0, r7
  401dfc:	f7ff fb8e 	bl	40151c <__sprint_r.part.0>
  401e00:	2800      	cmp	r0, #0
  401e02:	f040 813f 	bne.w	402084 <_vfiprintf_r+0xae8>
  401e06:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e0a:	1c48      	adds	r0, r1, #1
  401e0c:	46ce      	mov	lr, r9
  401e0e:	e77f      	b.n	401d10 <_vfiprintf_r+0x774>
  401e10:	aa0f      	add	r2, sp, #60	; 0x3c
  401e12:	4659      	mov	r1, fp
  401e14:	4638      	mov	r0, r7
  401e16:	f7ff fb81 	bl	40151c <__sprint_r.part.0>
  401e1a:	b960      	cbnz	r0, 401e36 <_vfiprintf_r+0x89a>
  401e1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e20:	1c48      	adds	r0, r1, #1
  401e22:	46ca      	mov	sl, r9
  401e24:	e7bd      	b.n	401da2 <_vfiprintf_r+0x806>
  401e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401e28:	f8dd b010 	ldr.w	fp, [sp, #16]
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	f040 81d4 	bne.w	4021da <_vfiprintf_r+0xc3e>
  401e32:	2300      	movs	r3, #0
  401e34:	9310      	str	r3, [sp, #64]	; 0x40
  401e36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401e3a:	f013 0f01 	tst.w	r3, #1
  401e3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401e42:	d102      	bne.n	401e4a <_vfiprintf_r+0x8ae>
  401e44:	059a      	lsls	r2, r3, #22
  401e46:	f140 80de 	bpl.w	402006 <_vfiprintf_r+0xa6a>
  401e4a:	065b      	lsls	r3, r3, #25
  401e4c:	f53f acb2 	bmi.w	4017b4 <_vfiprintf_r+0x218>
  401e50:	9803      	ldr	r0, [sp, #12]
  401e52:	b02d      	add	sp, #180	; 0xb4
  401e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e58:	2a00      	cmp	r2, #0
  401e5a:	f040 8106 	bne.w	40206a <_vfiprintf_r+0xace>
  401e5e:	9a05      	ldr	r2, [sp, #20]
  401e60:	921d      	str	r2, [sp, #116]	; 0x74
  401e62:	2301      	movs	r3, #1
  401e64:	9211      	str	r2, [sp, #68]	; 0x44
  401e66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401e6a:	9310      	str	r3, [sp, #64]	; 0x40
  401e6c:	46ca      	mov	sl, r9
  401e6e:	f10a 0a08 	add.w	sl, sl, #8
  401e72:	9b02      	ldr	r3, [sp, #8]
  401e74:	0759      	lsls	r1, r3, #29
  401e76:	d504      	bpl.n	401e82 <_vfiprintf_r+0x8e6>
  401e78:	9b08      	ldr	r3, [sp, #32]
  401e7a:	9901      	ldr	r1, [sp, #4]
  401e7c:	1a5c      	subs	r4, r3, r1
  401e7e:	2c00      	cmp	r4, #0
  401e80:	dc81      	bgt.n	401d86 <_vfiprintf_r+0x7ea>
  401e82:	9b03      	ldr	r3, [sp, #12]
  401e84:	9908      	ldr	r1, [sp, #32]
  401e86:	9801      	ldr	r0, [sp, #4]
  401e88:	4281      	cmp	r1, r0
  401e8a:	bfac      	ite	ge
  401e8c:	185b      	addge	r3, r3, r1
  401e8e:	181b      	addlt	r3, r3, r0
  401e90:	9303      	str	r3, [sp, #12]
  401e92:	bb72      	cbnz	r2, 401ef2 <_vfiprintf_r+0x956>
  401e94:	2300      	movs	r3, #0
  401e96:	9310      	str	r3, [sp, #64]	; 0x40
  401e98:	46ca      	mov	sl, r9
  401e9a:	f7ff bbbc 	b.w	401616 <_vfiprintf_r+0x7a>
  401e9e:	aa0f      	add	r2, sp, #60	; 0x3c
  401ea0:	9904      	ldr	r1, [sp, #16]
  401ea2:	4620      	mov	r0, r4
  401ea4:	f7ff fb3a 	bl	40151c <__sprint_r.part.0>
  401ea8:	bb50      	cbnz	r0, 401f00 <_vfiprintf_r+0x964>
  401eaa:	9910      	ldr	r1, [sp, #64]	; 0x40
  401eac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401eae:	f101 0e01 	add.w	lr, r1, #1
  401eb2:	46cc      	mov	ip, r9
  401eb4:	e548      	b.n	401948 <_vfiprintf_r+0x3ac>
  401eb6:	2a00      	cmp	r2, #0
  401eb8:	f040 8140 	bne.w	40213c <_vfiprintf_r+0xba0>
  401ebc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401ec0:	2900      	cmp	r1, #0
  401ec2:	f000 811b 	beq.w	4020fc <_vfiprintf_r+0xb60>
  401ec6:	2201      	movs	r2, #1
  401ec8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401ecc:	4610      	mov	r0, r2
  401ece:	921d      	str	r2, [sp, #116]	; 0x74
  401ed0:	911c      	str	r1, [sp, #112]	; 0x70
  401ed2:	46ca      	mov	sl, r9
  401ed4:	4601      	mov	r1, r0
  401ed6:	f10a 0a08 	add.w	sl, sl, #8
  401eda:	3001      	adds	r0, #1
  401edc:	e507      	b.n	4018ee <_vfiprintf_r+0x352>
  401ede:	9b02      	ldr	r3, [sp, #8]
  401ee0:	2a01      	cmp	r2, #1
  401ee2:	f000 8098 	beq.w	402016 <_vfiprintf_r+0xa7a>
  401ee6:	2a02      	cmp	r2, #2
  401ee8:	d10d      	bne.n	401f06 <_vfiprintf_r+0x96a>
  401eea:	9302      	str	r3, [sp, #8]
  401eec:	2600      	movs	r6, #0
  401eee:	2700      	movs	r7, #0
  401ef0:	e5b0      	b.n	401a54 <_vfiprintf_r+0x4b8>
  401ef2:	aa0f      	add	r2, sp, #60	; 0x3c
  401ef4:	9904      	ldr	r1, [sp, #16]
  401ef6:	9806      	ldr	r0, [sp, #24]
  401ef8:	f7ff fb10 	bl	40151c <__sprint_r.part.0>
  401efc:	2800      	cmp	r0, #0
  401efe:	d0c9      	beq.n	401e94 <_vfiprintf_r+0x8f8>
  401f00:	f8dd b010 	ldr.w	fp, [sp, #16]
  401f04:	e797      	b.n	401e36 <_vfiprintf_r+0x89a>
  401f06:	9302      	str	r3, [sp, #8]
  401f08:	2600      	movs	r6, #0
  401f0a:	2700      	movs	r7, #0
  401f0c:	4649      	mov	r1, r9
  401f0e:	e000      	b.n	401f12 <_vfiprintf_r+0x976>
  401f10:	4659      	mov	r1, fp
  401f12:	08f2      	lsrs	r2, r6, #3
  401f14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401f18:	08f8      	lsrs	r0, r7, #3
  401f1a:	f006 0307 	and.w	r3, r6, #7
  401f1e:	4607      	mov	r7, r0
  401f20:	4616      	mov	r6, r2
  401f22:	3330      	adds	r3, #48	; 0x30
  401f24:	ea56 0207 	orrs.w	r2, r6, r7
  401f28:	f801 3c01 	strb.w	r3, [r1, #-1]
  401f2c:	f101 3bff 	add.w	fp, r1, #4294967295
  401f30:	d1ee      	bne.n	401f10 <_vfiprintf_r+0x974>
  401f32:	9a02      	ldr	r2, [sp, #8]
  401f34:	07d6      	lsls	r6, r2, #31
  401f36:	f57f ad9d 	bpl.w	401a74 <_vfiprintf_r+0x4d8>
  401f3a:	2b30      	cmp	r3, #48	; 0x30
  401f3c:	f43f ad9a 	beq.w	401a74 <_vfiprintf_r+0x4d8>
  401f40:	3902      	subs	r1, #2
  401f42:	2330      	movs	r3, #48	; 0x30
  401f44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401f48:	eba9 0301 	sub.w	r3, r9, r1
  401f4c:	9305      	str	r3, [sp, #20]
  401f4e:	468b      	mov	fp, r1
  401f50:	e476      	b.n	401840 <_vfiprintf_r+0x2a4>
  401f52:	9b03      	ldr	r3, [sp, #12]
  401f54:	9a08      	ldr	r2, [sp, #32]
  401f56:	428a      	cmp	r2, r1
  401f58:	bfac      	ite	ge
  401f5a:	189b      	addge	r3, r3, r2
  401f5c:	185b      	addlt	r3, r3, r1
  401f5e:	9303      	str	r3, [sp, #12]
  401f60:	e798      	b.n	401e94 <_vfiprintf_r+0x8f8>
  401f62:	2202      	movs	r2, #2
  401f64:	e44d      	b.n	401802 <_vfiprintf_r+0x266>
  401f66:	2f00      	cmp	r7, #0
  401f68:	bf08      	it	eq
  401f6a:	2e0a      	cmpeq	r6, #10
  401f6c:	d352      	bcc.n	402014 <_vfiprintf_r+0xa78>
  401f6e:	46cb      	mov	fp, r9
  401f70:	4630      	mov	r0, r6
  401f72:	4639      	mov	r1, r7
  401f74:	220a      	movs	r2, #10
  401f76:	2300      	movs	r3, #0
  401f78:	f001 ff36 	bl	403de8 <__aeabi_uldivmod>
  401f7c:	3230      	adds	r2, #48	; 0x30
  401f7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401f82:	4630      	mov	r0, r6
  401f84:	4639      	mov	r1, r7
  401f86:	2300      	movs	r3, #0
  401f88:	220a      	movs	r2, #10
  401f8a:	f001 ff2d 	bl	403de8 <__aeabi_uldivmod>
  401f8e:	4606      	mov	r6, r0
  401f90:	460f      	mov	r7, r1
  401f92:	ea56 0307 	orrs.w	r3, r6, r7
  401f96:	d1eb      	bne.n	401f70 <_vfiprintf_r+0x9d4>
  401f98:	e56c      	b.n	401a74 <_vfiprintf_r+0x4d8>
  401f9a:	9405      	str	r4, [sp, #20]
  401f9c:	46cb      	mov	fp, r9
  401f9e:	e44f      	b.n	401840 <_vfiprintf_r+0x2a4>
  401fa0:	aa0f      	add	r2, sp, #60	; 0x3c
  401fa2:	9904      	ldr	r1, [sp, #16]
  401fa4:	9806      	ldr	r0, [sp, #24]
  401fa6:	f7ff fab9 	bl	40151c <__sprint_r.part.0>
  401faa:	2800      	cmp	r0, #0
  401fac:	d1a8      	bne.n	401f00 <_vfiprintf_r+0x964>
  401fae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fb0:	46ca      	mov	sl, r9
  401fb2:	e75e      	b.n	401e72 <_vfiprintf_r+0x8d6>
  401fb4:	aa0f      	add	r2, sp, #60	; 0x3c
  401fb6:	9904      	ldr	r1, [sp, #16]
  401fb8:	9806      	ldr	r0, [sp, #24]
  401fba:	f7ff faaf 	bl	40151c <__sprint_r.part.0>
  401fbe:	2800      	cmp	r0, #0
  401fc0:	d19e      	bne.n	401f00 <_vfiprintf_r+0x964>
  401fc2:	46ca      	mov	sl, r9
  401fc4:	f7ff bbc0 	b.w	401748 <_vfiprintf_r+0x1ac>
  401fc8:	0040415c 	.word	0x0040415c
  401fcc:	0040414c 	.word	0x0040414c
  401fd0:	3104      	adds	r1, #4
  401fd2:	6816      	ldr	r6, [r2, #0]
  401fd4:	9107      	str	r1, [sp, #28]
  401fd6:	2201      	movs	r2, #1
  401fd8:	2700      	movs	r7, #0
  401fda:	e412      	b.n	401802 <_vfiprintf_r+0x266>
  401fdc:	9807      	ldr	r0, [sp, #28]
  401fde:	4601      	mov	r1, r0
  401fe0:	3104      	adds	r1, #4
  401fe2:	6806      	ldr	r6, [r0, #0]
  401fe4:	9107      	str	r1, [sp, #28]
  401fe6:	2700      	movs	r7, #0
  401fe8:	e40b      	b.n	401802 <_vfiprintf_r+0x266>
  401fea:	680e      	ldr	r6, [r1, #0]
  401fec:	3104      	adds	r1, #4
  401fee:	9107      	str	r1, [sp, #28]
  401ff0:	2700      	movs	r7, #0
  401ff2:	e591      	b.n	401b18 <_vfiprintf_r+0x57c>
  401ff4:	9907      	ldr	r1, [sp, #28]
  401ff6:	680e      	ldr	r6, [r1, #0]
  401ff8:	460a      	mov	r2, r1
  401ffa:	17f7      	asrs	r7, r6, #31
  401ffc:	3204      	adds	r2, #4
  401ffe:	9207      	str	r2, [sp, #28]
  402000:	4630      	mov	r0, r6
  402002:	4639      	mov	r1, r7
  402004:	e50f      	b.n	401a26 <_vfiprintf_r+0x48a>
  402006:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40200a:	f000 fe7f 	bl	402d0c <__retarget_lock_release_recursive>
  40200e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402012:	e71a      	b.n	401e4a <_vfiprintf_r+0x8ae>
  402014:	9b02      	ldr	r3, [sp, #8]
  402016:	9302      	str	r3, [sp, #8]
  402018:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40201c:	3630      	adds	r6, #48	; 0x30
  40201e:	2301      	movs	r3, #1
  402020:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402024:	9305      	str	r3, [sp, #20]
  402026:	e40b      	b.n	401840 <_vfiprintf_r+0x2a4>
  402028:	aa0f      	add	r2, sp, #60	; 0x3c
  40202a:	9904      	ldr	r1, [sp, #16]
  40202c:	9806      	ldr	r0, [sp, #24]
  40202e:	f7ff fa75 	bl	40151c <__sprint_r.part.0>
  402032:	2800      	cmp	r0, #0
  402034:	f47f af64 	bne.w	401f00 <_vfiprintf_r+0x964>
  402038:	9910      	ldr	r1, [sp, #64]	; 0x40
  40203a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40203c:	1c48      	adds	r0, r1, #1
  40203e:	46ca      	mov	sl, r9
  402040:	e651      	b.n	401ce6 <_vfiprintf_r+0x74a>
  402042:	aa0f      	add	r2, sp, #60	; 0x3c
  402044:	9904      	ldr	r1, [sp, #16]
  402046:	9806      	ldr	r0, [sp, #24]
  402048:	f7ff fa68 	bl	40151c <__sprint_r.part.0>
  40204c:	2800      	cmp	r0, #0
  40204e:	f47f af57 	bne.w	401f00 <_vfiprintf_r+0x964>
  402052:	9910      	ldr	r1, [sp, #64]	; 0x40
  402054:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402056:	1c48      	adds	r0, r1, #1
  402058:	46ca      	mov	sl, r9
  40205a:	e448      	b.n	4018ee <_vfiprintf_r+0x352>
  40205c:	2a00      	cmp	r2, #0
  40205e:	f040 8091 	bne.w	402184 <_vfiprintf_r+0xbe8>
  402062:	2001      	movs	r0, #1
  402064:	4611      	mov	r1, r2
  402066:	46ca      	mov	sl, r9
  402068:	e641      	b.n	401cee <_vfiprintf_r+0x752>
  40206a:	aa0f      	add	r2, sp, #60	; 0x3c
  40206c:	9904      	ldr	r1, [sp, #16]
  40206e:	9806      	ldr	r0, [sp, #24]
  402070:	f7ff fa54 	bl	40151c <__sprint_r.part.0>
  402074:	2800      	cmp	r0, #0
  402076:	f47f af43 	bne.w	401f00 <_vfiprintf_r+0x964>
  40207a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40207c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40207e:	3001      	adds	r0, #1
  402080:	46ca      	mov	sl, r9
  402082:	e667      	b.n	401d54 <_vfiprintf_r+0x7b8>
  402084:	46d3      	mov	fp, sl
  402086:	e6d6      	b.n	401e36 <_vfiprintf_r+0x89a>
  402088:	9e07      	ldr	r6, [sp, #28]
  40208a:	3607      	adds	r6, #7
  40208c:	f026 0207 	bic.w	r2, r6, #7
  402090:	f102 0108 	add.w	r1, r2, #8
  402094:	e9d2 6700 	ldrd	r6, r7, [r2]
  402098:	9107      	str	r1, [sp, #28]
  40209a:	2201      	movs	r2, #1
  40209c:	f7ff bbb1 	b.w	401802 <_vfiprintf_r+0x266>
  4020a0:	9e07      	ldr	r6, [sp, #28]
  4020a2:	3607      	adds	r6, #7
  4020a4:	f026 0607 	bic.w	r6, r6, #7
  4020a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4020ac:	f106 0208 	add.w	r2, r6, #8
  4020b0:	9207      	str	r2, [sp, #28]
  4020b2:	4606      	mov	r6, r0
  4020b4:	460f      	mov	r7, r1
  4020b6:	e4b6      	b.n	401a26 <_vfiprintf_r+0x48a>
  4020b8:	9e07      	ldr	r6, [sp, #28]
  4020ba:	3607      	adds	r6, #7
  4020bc:	f026 0207 	bic.w	r2, r6, #7
  4020c0:	f102 0108 	add.w	r1, r2, #8
  4020c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4020c8:	9107      	str	r1, [sp, #28]
  4020ca:	2200      	movs	r2, #0
  4020cc:	f7ff bb99 	b.w	401802 <_vfiprintf_r+0x266>
  4020d0:	9e07      	ldr	r6, [sp, #28]
  4020d2:	3607      	adds	r6, #7
  4020d4:	f026 0107 	bic.w	r1, r6, #7
  4020d8:	f101 0008 	add.w	r0, r1, #8
  4020dc:	9007      	str	r0, [sp, #28]
  4020de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4020e2:	e519      	b.n	401b18 <_vfiprintf_r+0x57c>
  4020e4:	46cb      	mov	fp, r9
  4020e6:	f7ff bbab 	b.w	401840 <_vfiprintf_r+0x2a4>
  4020ea:	252d      	movs	r5, #45	; 0x2d
  4020ec:	4276      	negs	r6, r6
  4020ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4020f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4020f6:	2201      	movs	r2, #1
  4020f8:	f7ff bb88 	b.w	40180c <_vfiprintf_r+0x270>
  4020fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020fe:	b9b3      	cbnz	r3, 40212e <_vfiprintf_r+0xb92>
  402100:	4611      	mov	r1, r2
  402102:	2001      	movs	r0, #1
  402104:	46ca      	mov	sl, r9
  402106:	e5f2      	b.n	401cee <_vfiprintf_r+0x752>
  402108:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40210c:	f000 fdfe 	bl	402d0c <__retarget_lock_release_recursive>
  402110:	f04f 33ff 	mov.w	r3, #4294967295
  402114:	9303      	str	r3, [sp, #12]
  402116:	f7ff bb50 	b.w	4017ba <_vfiprintf_r+0x21e>
  40211a:	aa0f      	add	r2, sp, #60	; 0x3c
  40211c:	9904      	ldr	r1, [sp, #16]
  40211e:	9806      	ldr	r0, [sp, #24]
  402120:	f7ff f9fc 	bl	40151c <__sprint_r.part.0>
  402124:	2800      	cmp	r0, #0
  402126:	f47f aeeb 	bne.w	401f00 <_vfiprintf_r+0x964>
  40212a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40212c:	e6a9      	b.n	401e82 <_vfiprintf_r+0x8e6>
  40212e:	ab0e      	add	r3, sp, #56	; 0x38
  402130:	2202      	movs	r2, #2
  402132:	931c      	str	r3, [sp, #112]	; 0x70
  402134:	921d      	str	r2, [sp, #116]	; 0x74
  402136:	2001      	movs	r0, #1
  402138:	46ca      	mov	sl, r9
  40213a:	e5d0      	b.n	401cde <_vfiprintf_r+0x742>
  40213c:	aa0f      	add	r2, sp, #60	; 0x3c
  40213e:	9904      	ldr	r1, [sp, #16]
  402140:	9806      	ldr	r0, [sp, #24]
  402142:	f7ff f9eb 	bl	40151c <__sprint_r.part.0>
  402146:	2800      	cmp	r0, #0
  402148:	f47f aeda 	bne.w	401f00 <_vfiprintf_r+0x964>
  40214c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40214e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402150:	1c48      	adds	r0, r1, #1
  402152:	46ca      	mov	sl, r9
  402154:	e5a4      	b.n	401ca0 <_vfiprintf_r+0x704>
  402156:	9a07      	ldr	r2, [sp, #28]
  402158:	9903      	ldr	r1, [sp, #12]
  40215a:	6813      	ldr	r3, [r2, #0]
  40215c:	17cd      	asrs	r5, r1, #31
  40215e:	4608      	mov	r0, r1
  402160:	3204      	adds	r2, #4
  402162:	4629      	mov	r1, r5
  402164:	9207      	str	r2, [sp, #28]
  402166:	e9c3 0100 	strd	r0, r1, [r3]
  40216a:	f7ff ba54 	b.w	401616 <_vfiprintf_r+0x7a>
  40216e:	4658      	mov	r0, fp
  402170:	9607      	str	r6, [sp, #28]
  402172:	9302      	str	r3, [sp, #8]
  402174:	f7ff f964 	bl	401440 <strlen>
  402178:	2400      	movs	r4, #0
  40217a:	9005      	str	r0, [sp, #20]
  40217c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402180:	f7ff bb5e 	b.w	401840 <_vfiprintf_r+0x2a4>
  402184:	aa0f      	add	r2, sp, #60	; 0x3c
  402186:	9904      	ldr	r1, [sp, #16]
  402188:	9806      	ldr	r0, [sp, #24]
  40218a:	f7ff f9c7 	bl	40151c <__sprint_r.part.0>
  40218e:	2800      	cmp	r0, #0
  402190:	f47f aeb6 	bne.w	401f00 <_vfiprintf_r+0x964>
  402194:	9910      	ldr	r1, [sp, #64]	; 0x40
  402196:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402198:	1c48      	adds	r0, r1, #1
  40219a:	46ca      	mov	sl, r9
  40219c:	e5a7      	b.n	401cee <_vfiprintf_r+0x752>
  40219e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4021a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021a2:	4e20      	ldr	r6, [pc, #128]	; (402224 <_vfiprintf_r+0xc88>)
  4021a4:	3101      	adds	r1, #1
  4021a6:	f7ff bb90 	b.w	4018ca <_vfiprintf_r+0x32e>
  4021aa:	2c06      	cmp	r4, #6
  4021ac:	bf28      	it	cs
  4021ae:	2406      	movcs	r4, #6
  4021b0:	9405      	str	r4, [sp, #20]
  4021b2:	9607      	str	r6, [sp, #28]
  4021b4:	9401      	str	r4, [sp, #4]
  4021b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 402228 <_vfiprintf_r+0xc8c>
  4021ba:	e4d5      	b.n	401b68 <_vfiprintf_r+0x5cc>
  4021bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4021be:	4e19      	ldr	r6, [pc, #100]	; (402224 <_vfiprintf_r+0xc88>)
  4021c0:	3001      	adds	r0, #1
  4021c2:	e603      	b.n	401dcc <_vfiprintf_r+0x830>
  4021c4:	9405      	str	r4, [sp, #20]
  4021c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4021ca:	9607      	str	r6, [sp, #28]
  4021cc:	9302      	str	r3, [sp, #8]
  4021ce:	4604      	mov	r4, r0
  4021d0:	f7ff bb36 	b.w	401840 <_vfiprintf_r+0x2a4>
  4021d4:	4686      	mov	lr, r0
  4021d6:	f7ff bbce 	b.w	401976 <_vfiprintf_r+0x3da>
  4021da:	9806      	ldr	r0, [sp, #24]
  4021dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4021de:	4659      	mov	r1, fp
  4021e0:	f7ff f99c 	bl	40151c <__sprint_r.part.0>
  4021e4:	2800      	cmp	r0, #0
  4021e6:	f43f ae24 	beq.w	401e32 <_vfiprintf_r+0x896>
  4021ea:	e624      	b.n	401e36 <_vfiprintf_r+0x89a>
  4021ec:	9907      	ldr	r1, [sp, #28]
  4021ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4021f2:	680c      	ldr	r4, [r1, #0]
  4021f4:	3104      	adds	r1, #4
  4021f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4021fa:	46b8      	mov	r8, r7
  4021fc:	9107      	str	r1, [sp, #28]
  4021fe:	f7ff ba3f 	b.w	401680 <_vfiprintf_r+0xe4>
  402202:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402206:	e43c      	b.n	401a82 <_vfiprintf_r+0x4e6>
  402208:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40220c:	e521      	b.n	401c52 <_vfiprintf_r+0x6b6>
  40220e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402212:	f7ff bbf4 	b.w	4019fe <_vfiprintf_r+0x462>
  402216:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40221a:	e491      	b.n	401b40 <_vfiprintf_r+0x5a4>
  40221c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402220:	e469      	b.n	401af6 <_vfiprintf_r+0x55a>
  402222:	bf00      	nop
  402224:	0040414c 	.word	0x0040414c
  402228:	00404144 	.word	0x00404144

0040222c <__sbprintf>:
  40222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402230:	460c      	mov	r4, r1
  402232:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402236:	8989      	ldrh	r1, [r1, #12]
  402238:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40223a:	89e5      	ldrh	r5, [r4, #14]
  40223c:	9619      	str	r6, [sp, #100]	; 0x64
  40223e:	f021 0102 	bic.w	r1, r1, #2
  402242:	4606      	mov	r6, r0
  402244:	69e0      	ldr	r0, [r4, #28]
  402246:	f8ad 100c 	strh.w	r1, [sp, #12]
  40224a:	4617      	mov	r7, r2
  40224c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402250:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402252:	f8ad 500e 	strh.w	r5, [sp, #14]
  402256:	4698      	mov	r8, r3
  402258:	ad1a      	add	r5, sp, #104	; 0x68
  40225a:	2300      	movs	r3, #0
  40225c:	9007      	str	r0, [sp, #28]
  40225e:	a816      	add	r0, sp, #88	; 0x58
  402260:	9209      	str	r2, [sp, #36]	; 0x24
  402262:	9306      	str	r3, [sp, #24]
  402264:	9500      	str	r5, [sp, #0]
  402266:	9504      	str	r5, [sp, #16]
  402268:	9102      	str	r1, [sp, #8]
  40226a:	9105      	str	r1, [sp, #20]
  40226c:	f000 fd48 	bl	402d00 <__retarget_lock_init_recursive>
  402270:	4643      	mov	r3, r8
  402272:	463a      	mov	r2, r7
  402274:	4669      	mov	r1, sp
  402276:	4630      	mov	r0, r6
  402278:	f7ff f990 	bl	40159c <_vfiprintf_r>
  40227c:	1e05      	subs	r5, r0, #0
  40227e:	db07      	blt.n	402290 <__sbprintf+0x64>
  402280:	4630      	mov	r0, r6
  402282:	4669      	mov	r1, sp
  402284:	f000 f928 	bl	4024d8 <_fflush_r>
  402288:	2800      	cmp	r0, #0
  40228a:	bf18      	it	ne
  40228c:	f04f 35ff 	movne.w	r5, #4294967295
  402290:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402294:	065b      	lsls	r3, r3, #25
  402296:	d503      	bpl.n	4022a0 <__sbprintf+0x74>
  402298:	89a3      	ldrh	r3, [r4, #12]
  40229a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40229e:	81a3      	strh	r3, [r4, #12]
  4022a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4022a2:	f000 fd2f 	bl	402d04 <__retarget_lock_close_recursive>
  4022a6:	4628      	mov	r0, r5
  4022a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4022ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004022b0 <__swsetup_r>:
  4022b0:	b538      	push	{r3, r4, r5, lr}
  4022b2:	4b30      	ldr	r3, [pc, #192]	; (402374 <__swsetup_r+0xc4>)
  4022b4:	681b      	ldr	r3, [r3, #0]
  4022b6:	4605      	mov	r5, r0
  4022b8:	460c      	mov	r4, r1
  4022ba:	b113      	cbz	r3, 4022c2 <__swsetup_r+0x12>
  4022bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4022be:	2a00      	cmp	r2, #0
  4022c0:	d038      	beq.n	402334 <__swsetup_r+0x84>
  4022c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4022c6:	b293      	uxth	r3, r2
  4022c8:	0718      	lsls	r0, r3, #28
  4022ca:	d50c      	bpl.n	4022e6 <__swsetup_r+0x36>
  4022cc:	6920      	ldr	r0, [r4, #16]
  4022ce:	b1a8      	cbz	r0, 4022fc <__swsetup_r+0x4c>
  4022d0:	f013 0201 	ands.w	r2, r3, #1
  4022d4:	d01e      	beq.n	402314 <__swsetup_r+0x64>
  4022d6:	6963      	ldr	r3, [r4, #20]
  4022d8:	2200      	movs	r2, #0
  4022da:	425b      	negs	r3, r3
  4022dc:	61a3      	str	r3, [r4, #24]
  4022de:	60a2      	str	r2, [r4, #8]
  4022e0:	b1f0      	cbz	r0, 402320 <__swsetup_r+0x70>
  4022e2:	2000      	movs	r0, #0
  4022e4:	bd38      	pop	{r3, r4, r5, pc}
  4022e6:	06d9      	lsls	r1, r3, #27
  4022e8:	d53c      	bpl.n	402364 <__swsetup_r+0xb4>
  4022ea:	0758      	lsls	r0, r3, #29
  4022ec:	d426      	bmi.n	40233c <__swsetup_r+0x8c>
  4022ee:	6920      	ldr	r0, [r4, #16]
  4022f0:	f042 0308 	orr.w	r3, r2, #8
  4022f4:	81a3      	strh	r3, [r4, #12]
  4022f6:	b29b      	uxth	r3, r3
  4022f8:	2800      	cmp	r0, #0
  4022fa:	d1e9      	bne.n	4022d0 <__swsetup_r+0x20>
  4022fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402300:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402304:	d0e4      	beq.n	4022d0 <__swsetup_r+0x20>
  402306:	4628      	mov	r0, r5
  402308:	4621      	mov	r1, r4
  40230a:	f000 fd2f 	bl	402d6c <__smakebuf_r>
  40230e:	89a3      	ldrh	r3, [r4, #12]
  402310:	6920      	ldr	r0, [r4, #16]
  402312:	e7dd      	b.n	4022d0 <__swsetup_r+0x20>
  402314:	0799      	lsls	r1, r3, #30
  402316:	bf58      	it	pl
  402318:	6962      	ldrpl	r2, [r4, #20]
  40231a:	60a2      	str	r2, [r4, #8]
  40231c:	2800      	cmp	r0, #0
  40231e:	d1e0      	bne.n	4022e2 <__swsetup_r+0x32>
  402320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402324:	061a      	lsls	r2, r3, #24
  402326:	d5dd      	bpl.n	4022e4 <__swsetup_r+0x34>
  402328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40232c:	81a3      	strh	r3, [r4, #12]
  40232e:	f04f 30ff 	mov.w	r0, #4294967295
  402332:	bd38      	pop	{r3, r4, r5, pc}
  402334:	4618      	mov	r0, r3
  402336:	f000 f927 	bl	402588 <__sinit>
  40233a:	e7c2      	b.n	4022c2 <__swsetup_r+0x12>
  40233c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40233e:	b151      	cbz	r1, 402356 <__swsetup_r+0xa6>
  402340:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402344:	4299      	cmp	r1, r3
  402346:	d004      	beq.n	402352 <__swsetup_r+0xa2>
  402348:	4628      	mov	r0, r5
  40234a:	f000 fa43 	bl	4027d4 <_free_r>
  40234e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402352:	2300      	movs	r3, #0
  402354:	6323      	str	r3, [r4, #48]	; 0x30
  402356:	2300      	movs	r3, #0
  402358:	6920      	ldr	r0, [r4, #16]
  40235a:	6063      	str	r3, [r4, #4]
  40235c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402360:	6020      	str	r0, [r4, #0]
  402362:	e7c5      	b.n	4022f0 <__swsetup_r+0x40>
  402364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402368:	2309      	movs	r3, #9
  40236a:	602b      	str	r3, [r5, #0]
  40236c:	f04f 30ff 	mov.w	r0, #4294967295
  402370:	81a2      	strh	r2, [r4, #12]
  402372:	bd38      	pop	{r3, r4, r5, pc}
  402374:	20400008 	.word	0x20400008

00402378 <register_fini>:
  402378:	4b02      	ldr	r3, [pc, #8]	; (402384 <register_fini+0xc>)
  40237a:	b113      	cbz	r3, 402382 <register_fini+0xa>
  40237c:	4802      	ldr	r0, [pc, #8]	; (402388 <register_fini+0x10>)
  40237e:	f000 b805 	b.w	40238c <atexit>
  402382:	4770      	bx	lr
  402384:	00000000 	.word	0x00000000
  402388:	004025f9 	.word	0x004025f9

0040238c <atexit>:
  40238c:	2300      	movs	r3, #0
  40238e:	4601      	mov	r1, r0
  402390:	461a      	mov	r2, r3
  402392:	4618      	mov	r0, r3
  402394:	f001 bc00 	b.w	403b98 <__register_exitproc>

00402398 <__sflush_r>:
  402398:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40239c:	b29a      	uxth	r2, r3
  40239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4023a2:	460d      	mov	r5, r1
  4023a4:	0711      	lsls	r1, r2, #28
  4023a6:	4680      	mov	r8, r0
  4023a8:	d43a      	bmi.n	402420 <__sflush_r+0x88>
  4023aa:	686a      	ldr	r2, [r5, #4]
  4023ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4023b0:	2a00      	cmp	r2, #0
  4023b2:	81ab      	strh	r3, [r5, #12]
  4023b4:	dd6f      	ble.n	402496 <__sflush_r+0xfe>
  4023b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4023b8:	2c00      	cmp	r4, #0
  4023ba:	d049      	beq.n	402450 <__sflush_r+0xb8>
  4023bc:	2200      	movs	r2, #0
  4023be:	b29b      	uxth	r3, r3
  4023c0:	f8d8 6000 	ldr.w	r6, [r8]
  4023c4:	f8c8 2000 	str.w	r2, [r8]
  4023c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4023cc:	d067      	beq.n	40249e <__sflush_r+0x106>
  4023ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4023d0:	075f      	lsls	r7, r3, #29
  4023d2:	d505      	bpl.n	4023e0 <__sflush_r+0x48>
  4023d4:	6869      	ldr	r1, [r5, #4]
  4023d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4023d8:	1a52      	subs	r2, r2, r1
  4023da:	b10b      	cbz	r3, 4023e0 <__sflush_r+0x48>
  4023dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4023de:	1ad2      	subs	r2, r2, r3
  4023e0:	2300      	movs	r3, #0
  4023e2:	69e9      	ldr	r1, [r5, #28]
  4023e4:	4640      	mov	r0, r8
  4023e6:	47a0      	blx	r4
  4023e8:	1c44      	adds	r4, r0, #1
  4023ea:	d03c      	beq.n	402466 <__sflush_r+0xce>
  4023ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4023f0:	692a      	ldr	r2, [r5, #16]
  4023f2:	602a      	str	r2, [r5, #0]
  4023f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4023f8:	2200      	movs	r2, #0
  4023fa:	81ab      	strh	r3, [r5, #12]
  4023fc:	04db      	lsls	r3, r3, #19
  4023fe:	606a      	str	r2, [r5, #4]
  402400:	d447      	bmi.n	402492 <__sflush_r+0xfa>
  402402:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402404:	f8c8 6000 	str.w	r6, [r8]
  402408:	b311      	cbz	r1, 402450 <__sflush_r+0xb8>
  40240a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40240e:	4299      	cmp	r1, r3
  402410:	d002      	beq.n	402418 <__sflush_r+0x80>
  402412:	4640      	mov	r0, r8
  402414:	f000 f9de 	bl	4027d4 <_free_r>
  402418:	2000      	movs	r0, #0
  40241a:	6328      	str	r0, [r5, #48]	; 0x30
  40241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402420:	692e      	ldr	r6, [r5, #16]
  402422:	b1ae      	cbz	r6, 402450 <__sflush_r+0xb8>
  402424:	682c      	ldr	r4, [r5, #0]
  402426:	602e      	str	r6, [r5, #0]
  402428:	0791      	lsls	r1, r2, #30
  40242a:	bf0c      	ite	eq
  40242c:	696b      	ldreq	r3, [r5, #20]
  40242e:	2300      	movne	r3, #0
  402430:	1ba4      	subs	r4, r4, r6
  402432:	60ab      	str	r3, [r5, #8]
  402434:	e00a      	b.n	40244c <__sflush_r+0xb4>
  402436:	4623      	mov	r3, r4
  402438:	4632      	mov	r2, r6
  40243a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40243c:	69e9      	ldr	r1, [r5, #28]
  40243e:	4640      	mov	r0, r8
  402440:	47b8      	blx	r7
  402442:	2800      	cmp	r0, #0
  402444:	eba4 0400 	sub.w	r4, r4, r0
  402448:	4406      	add	r6, r0
  40244a:	dd04      	ble.n	402456 <__sflush_r+0xbe>
  40244c:	2c00      	cmp	r4, #0
  40244e:	dcf2      	bgt.n	402436 <__sflush_r+0x9e>
  402450:	2000      	movs	r0, #0
  402452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402456:	89ab      	ldrh	r3, [r5, #12]
  402458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40245c:	81ab      	strh	r3, [r5, #12]
  40245e:	f04f 30ff 	mov.w	r0, #4294967295
  402462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402466:	f8d8 4000 	ldr.w	r4, [r8]
  40246a:	2c1d      	cmp	r4, #29
  40246c:	d8f3      	bhi.n	402456 <__sflush_r+0xbe>
  40246e:	4b19      	ldr	r3, [pc, #100]	; (4024d4 <__sflush_r+0x13c>)
  402470:	40e3      	lsrs	r3, r4
  402472:	43db      	mvns	r3, r3
  402474:	f013 0301 	ands.w	r3, r3, #1
  402478:	d1ed      	bne.n	402456 <__sflush_r+0xbe>
  40247a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40247e:	606b      	str	r3, [r5, #4]
  402480:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402484:	6929      	ldr	r1, [r5, #16]
  402486:	81ab      	strh	r3, [r5, #12]
  402488:	04da      	lsls	r2, r3, #19
  40248a:	6029      	str	r1, [r5, #0]
  40248c:	d5b9      	bpl.n	402402 <__sflush_r+0x6a>
  40248e:	2c00      	cmp	r4, #0
  402490:	d1b7      	bne.n	402402 <__sflush_r+0x6a>
  402492:	6528      	str	r0, [r5, #80]	; 0x50
  402494:	e7b5      	b.n	402402 <__sflush_r+0x6a>
  402496:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402498:	2a00      	cmp	r2, #0
  40249a:	dc8c      	bgt.n	4023b6 <__sflush_r+0x1e>
  40249c:	e7d8      	b.n	402450 <__sflush_r+0xb8>
  40249e:	2301      	movs	r3, #1
  4024a0:	69e9      	ldr	r1, [r5, #28]
  4024a2:	4640      	mov	r0, r8
  4024a4:	47a0      	blx	r4
  4024a6:	1c43      	adds	r3, r0, #1
  4024a8:	4602      	mov	r2, r0
  4024aa:	d002      	beq.n	4024b2 <__sflush_r+0x11a>
  4024ac:	89ab      	ldrh	r3, [r5, #12]
  4024ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4024b0:	e78e      	b.n	4023d0 <__sflush_r+0x38>
  4024b2:	f8d8 3000 	ldr.w	r3, [r8]
  4024b6:	2b00      	cmp	r3, #0
  4024b8:	d0f8      	beq.n	4024ac <__sflush_r+0x114>
  4024ba:	2b1d      	cmp	r3, #29
  4024bc:	d001      	beq.n	4024c2 <__sflush_r+0x12a>
  4024be:	2b16      	cmp	r3, #22
  4024c0:	d102      	bne.n	4024c8 <__sflush_r+0x130>
  4024c2:	f8c8 6000 	str.w	r6, [r8]
  4024c6:	e7c3      	b.n	402450 <__sflush_r+0xb8>
  4024c8:	89ab      	ldrh	r3, [r5, #12]
  4024ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024ce:	81ab      	strh	r3, [r5, #12]
  4024d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024d4:	20400001 	.word	0x20400001

004024d8 <_fflush_r>:
  4024d8:	b538      	push	{r3, r4, r5, lr}
  4024da:	460d      	mov	r5, r1
  4024dc:	4604      	mov	r4, r0
  4024de:	b108      	cbz	r0, 4024e4 <_fflush_r+0xc>
  4024e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4024e2:	b1bb      	cbz	r3, 402514 <_fflush_r+0x3c>
  4024e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4024e8:	b188      	cbz	r0, 40250e <_fflush_r+0x36>
  4024ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4024ec:	07db      	lsls	r3, r3, #31
  4024ee:	d401      	bmi.n	4024f4 <_fflush_r+0x1c>
  4024f0:	0581      	lsls	r1, r0, #22
  4024f2:	d517      	bpl.n	402524 <_fflush_r+0x4c>
  4024f4:	4620      	mov	r0, r4
  4024f6:	4629      	mov	r1, r5
  4024f8:	f7ff ff4e 	bl	402398 <__sflush_r>
  4024fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4024fe:	07da      	lsls	r2, r3, #31
  402500:	4604      	mov	r4, r0
  402502:	d402      	bmi.n	40250a <_fflush_r+0x32>
  402504:	89ab      	ldrh	r3, [r5, #12]
  402506:	059b      	lsls	r3, r3, #22
  402508:	d507      	bpl.n	40251a <_fflush_r+0x42>
  40250a:	4620      	mov	r0, r4
  40250c:	bd38      	pop	{r3, r4, r5, pc}
  40250e:	4604      	mov	r4, r0
  402510:	4620      	mov	r0, r4
  402512:	bd38      	pop	{r3, r4, r5, pc}
  402514:	f000 f838 	bl	402588 <__sinit>
  402518:	e7e4      	b.n	4024e4 <_fflush_r+0xc>
  40251a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40251c:	f000 fbf6 	bl	402d0c <__retarget_lock_release_recursive>
  402520:	4620      	mov	r0, r4
  402522:	bd38      	pop	{r3, r4, r5, pc}
  402524:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402526:	f000 fbef 	bl	402d08 <__retarget_lock_acquire_recursive>
  40252a:	e7e3      	b.n	4024f4 <_fflush_r+0x1c>

0040252c <_cleanup_r>:
  40252c:	4901      	ldr	r1, [pc, #4]	; (402534 <_cleanup_r+0x8>)
  40252e:	f000 bbaf 	b.w	402c90 <_fwalk_reent>
  402532:	bf00      	nop
  402534:	00403c81 	.word	0x00403c81

00402538 <std.isra.0>:
  402538:	b510      	push	{r4, lr}
  40253a:	2300      	movs	r3, #0
  40253c:	4604      	mov	r4, r0
  40253e:	8181      	strh	r1, [r0, #12]
  402540:	81c2      	strh	r2, [r0, #14]
  402542:	6003      	str	r3, [r0, #0]
  402544:	6043      	str	r3, [r0, #4]
  402546:	6083      	str	r3, [r0, #8]
  402548:	6643      	str	r3, [r0, #100]	; 0x64
  40254a:	6103      	str	r3, [r0, #16]
  40254c:	6143      	str	r3, [r0, #20]
  40254e:	6183      	str	r3, [r0, #24]
  402550:	4619      	mov	r1, r3
  402552:	2208      	movs	r2, #8
  402554:	305c      	adds	r0, #92	; 0x5c
  402556:	f7fe fdf9 	bl	40114c <memset>
  40255a:	4807      	ldr	r0, [pc, #28]	; (402578 <std.isra.0+0x40>)
  40255c:	4907      	ldr	r1, [pc, #28]	; (40257c <std.isra.0+0x44>)
  40255e:	4a08      	ldr	r2, [pc, #32]	; (402580 <std.isra.0+0x48>)
  402560:	4b08      	ldr	r3, [pc, #32]	; (402584 <std.isra.0+0x4c>)
  402562:	6220      	str	r0, [r4, #32]
  402564:	61e4      	str	r4, [r4, #28]
  402566:	6261      	str	r1, [r4, #36]	; 0x24
  402568:	62a2      	str	r2, [r4, #40]	; 0x28
  40256a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40256c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402574:	f000 bbc4 	b.w	402d00 <__retarget_lock_init_recursive>
  402578:	004039c5 	.word	0x004039c5
  40257c:	004039e9 	.word	0x004039e9
  402580:	00403a25 	.word	0x00403a25
  402584:	00403a45 	.word	0x00403a45

00402588 <__sinit>:
  402588:	b510      	push	{r4, lr}
  40258a:	4604      	mov	r4, r0
  40258c:	4812      	ldr	r0, [pc, #72]	; (4025d8 <__sinit+0x50>)
  40258e:	f000 fbbb 	bl	402d08 <__retarget_lock_acquire_recursive>
  402592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402594:	b9d2      	cbnz	r2, 4025cc <__sinit+0x44>
  402596:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40259a:	4810      	ldr	r0, [pc, #64]	; (4025dc <__sinit+0x54>)
  40259c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4025a0:	2103      	movs	r1, #3
  4025a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4025a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4025a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4025ac:	6860      	ldr	r0, [r4, #4]
  4025ae:	2104      	movs	r1, #4
  4025b0:	f7ff ffc2 	bl	402538 <std.isra.0>
  4025b4:	2201      	movs	r2, #1
  4025b6:	2109      	movs	r1, #9
  4025b8:	68a0      	ldr	r0, [r4, #8]
  4025ba:	f7ff ffbd 	bl	402538 <std.isra.0>
  4025be:	2202      	movs	r2, #2
  4025c0:	2112      	movs	r1, #18
  4025c2:	68e0      	ldr	r0, [r4, #12]
  4025c4:	f7ff ffb8 	bl	402538 <std.isra.0>
  4025c8:	2301      	movs	r3, #1
  4025ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4025cc:	4802      	ldr	r0, [pc, #8]	; (4025d8 <__sinit+0x50>)
  4025ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4025d2:	f000 bb9b 	b.w	402d0c <__retarget_lock_release_recursive>
  4025d6:	bf00      	nop
  4025d8:	20400b28 	.word	0x20400b28
  4025dc:	0040252d 	.word	0x0040252d

004025e0 <__sfp_lock_acquire>:
  4025e0:	4801      	ldr	r0, [pc, #4]	; (4025e8 <__sfp_lock_acquire+0x8>)
  4025e2:	f000 bb91 	b.w	402d08 <__retarget_lock_acquire_recursive>
  4025e6:	bf00      	nop
  4025e8:	20400b3c 	.word	0x20400b3c

004025ec <__sfp_lock_release>:
  4025ec:	4801      	ldr	r0, [pc, #4]	; (4025f4 <__sfp_lock_release+0x8>)
  4025ee:	f000 bb8d 	b.w	402d0c <__retarget_lock_release_recursive>
  4025f2:	bf00      	nop
  4025f4:	20400b3c 	.word	0x20400b3c

004025f8 <__libc_fini_array>:
  4025f8:	b538      	push	{r3, r4, r5, lr}
  4025fa:	4c0a      	ldr	r4, [pc, #40]	; (402624 <__libc_fini_array+0x2c>)
  4025fc:	4d0a      	ldr	r5, [pc, #40]	; (402628 <__libc_fini_array+0x30>)
  4025fe:	1b64      	subs	r4, r4, r5
  402600:	10a4      	asrs	r4, r4, #2
  402602:	d00a      	beq.n	40261a <__libc_fini_array+0x22>
  402604:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402608:	3b01      	subs	r3, #1
  40260a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40260e:	3c01      	subs	r4, #1
  402610:	f855 3904 	ldr.w	r3, [r5], #-4
  402614:	4798      	blx	r3
  402616:	2c00      	cmp	r4, #0
  402618:	d1f9      	bne.n	40260e <__libc_fini_array+0x16>
  40261a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40261e:	f001 be39 	b.w	404294 <_fini>
  402622:	bf00      	nop
  402624:	004042a4 	.word	0x004042a4
  402628:	004042a0 	.word	0x004042a0

0040262c <__fputwc>:
  40262c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402630:	b082      	sub	sp, #8
  402632:	4680      	mov	r8, r0
  402634:	4689      	mov	r9, r1
  402636:	4614      	mov	r4, r2
  402638:	f000 fb54 	bl	402ce4 <__locale_mb_cur_max>
  40263c:	2801      	cmp	r0, #1
  40263e:	d036      	beq.n	4026ae <__fputwc+0x82>
  402640:	464a      	mov	r2, r9
  402642:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402646:	a901      	add	r1, sp, #4
  402648:	4640      	mov	r0, r8
  40264a:	f001 fa57 	bl	403afc <_wcrtomb_r>
  40264e:	1c42      	adds	r2, r0, #1
  402650:	4606      	mov	r6, r0
  402652:	d025      	beq.n	4026a0 <__fputwc+0x74>
  402654:	b3a8      	cbz	r0, 4026c2 <__fputwc+0x96>
  402656:	f89d e004 	ldrb.w	lr, [sp, #4]
  40265a:	2500      	movs	r5, #0
  40265c:	f10d 0a04 	add.w	sl, sp, #4
  402660:	e009      	b.n	402676 <__fputwc+0x4a>
  402662:	6823      	ldr	r3, [r4, #0]
  402664:	1c5a      	adds	r2, r3, #1
  402666:	6022      	str	r2, [r4, #0]
  402668:	f883 e000 	strb.w	lr, [r3]
  40266c:	3501      	adds	r5, #1
  40266e:	42b5      	cmp	r5, r6
  402670:	d227      	bcs.n	4026c2 <__fputwc+0x96>
  402672:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402676:	68a3      	ldr	r3, [r4, #8]
  402678:	3b01      	subs	r3, #1
  40267a:	2b00      	cmp	r3, #0
  40267c:	60a3      	str	r3, [r4, #8]
  40267e:	daf0      	bge.n	402662 <__fputwc+0x36>
  402680:	69a7      	ldr	r7, [r4, #24]
  402682:	42bb      	cmp	r3, r7
  402684:	4671      	mov	r1, lr
  402686:	4622      	mov	r2, r4
  402688:	4640      	mov	r0, r8
  40268a:	db02      	blt.n	402692 <__fputwc+0x66>
  40268c:	f1be 0f0a 	cmp.w	lr, #10
  402690:	d1e7      	bne.n	402662 <__fputwc+0x36>
  402692:	f001 f9db 	bl	403a4c <__swbuf_r>
  402696:	1c43      	adds	r3, r0, #1
  402698:	d1e8      	bne.n	40266c <__fputwc+0x40>
  40269a:	b002      	add	sp, #8
  40269c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026a0:	89a3      	ldrh	r3, [r4, #12]
  4026a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4026a6:	81a3      	strh	r3, [r4, #12]
  4026a8:	b002      	add	sp, #8
  4026aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4026b2:	2bfe      	cmp	r3, #254	; 0xfe
  4026b4:	d8c4      	bhi.n	402640 <__fputwc+0x14>
  4026b6:	fa5f fe89 	uxtb.w	lr, r9
  4026ba:	4606      	mov	r6, r0
  4026bc:	f88d e004 	strb.w	lr, [sp, #4]
  4026c0:	e7cb      	b.n	40265a <__fputwc+0x2e>
  4026c2:	4648      	mov	r0, r9
  4026c4:	b002      	add	sp, #8
  4026c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026ca:	bf00      	nop

004026cc <_fputwc_r>:
  4026cc:	b530      	push	{r4, r5, lr}
  4026ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4026d0:	f013 0f01 	tst.w	r3, #1
  4026d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4026d8:	4614      	mov	r4, r2
  4026da:	b083      	sub	sp, #12
  4026dc:	4605      	mov	r5, r0
  4026de:	b29a      	uxth	r2, r3
  4026e0:	d101      	bne.n	4026e6 <_fputwc_r+0x1a>
  4026e2:	0590      	lsls	r0, r2, #22
  4026e4:	d51c      	bpl.n	402720 <_fputwc_r+0x54>
  4026e6:	0490      	lsls	r0, r2, #18
  4026e8:	d406      	bmi.n	4026f8 <_fputwc_r+0x2c>
  4026ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4026ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4026f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4026f4:	81a3      	strh	r3, [r4, #12]
  4026f6:	6662      	str	r2, [r4, #100]	; 0x64
  4026f8:	4628      	mov	r0, r5
  4026fa:	4622      	mov	r2, r4
  4026fc:	f7ff ff96 	bl	40262c <__fputwc>
  402700:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402702:	07da      	lsls	r2, r3, #31
  402704:	4605      	mov	r5, r0
  402706:	d402      	bmi.n	40270e <_fputwc_r+0x42>
  402708:	89a3      	ldrh	r3, [r4, #12]
  40270a:	059b      	lsls	r3, r3, #22
  40270c:	d502      	bpl.n	402714 <_fputwc_r+0x48>
  40270e:	4628      	mov	r0, r5
  402710:	b003      	add	sp, #12
  402712:	bd30      	pop	{r4, r5, pc}
  402714:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402716:	f000 faf9 	bl	402d0c <__retarget_lock_release_recursive>
  40271a:	4628      	mov	r0, r5
  40271c:	b003      	add	sp, #12
  40271e:	bd30      	pop	{r4, r5, pc}
  402720:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402722:	9101      	str	r1, [sp, #4]
  402724:	f000 faf0 	bl	402d08 <__retarget_lock_acquire_recursive>
  402728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40272c:	9901      	ldr	r1, [sp, #4]
  40272e:	b29a      	uxth	r2, r3
  402730:	e7d9      	b.n	4026e6 <_fputwc_r+0x1a>
  402732:	bf00      	nop

00402734 <_malloc_trim_r>:
  402734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402736:	4f24      	ldr	r7, [pc, #144]	; (4027c8 <_malloc_trim_r+0x94>)
  402738:	460c      	mov	r4, r1
  40273a:	4606      	mov	r6, r0
  40273c:	f000 ff7e 	bl	40363c <__malloc_lock>
  402740:	68bb      	ldr	r3, [r7, #8]
  402742:	685d      	ldr	r5, [r3, #4]
  402744:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402748:	310f      	adds	r1, #15
  40274a:	f025 0503 	bic.w	r5, r5, #3
  40274e:	4429      	add	r1, r5
  402750:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402754:	f021 010f 	bic.w	r1, r1, #15
  402758:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40275c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402760:	db07      	blt.n	402772 <_malloc_trim_r+0x3e>
  402762:	2100      	movs	r1, #0
  402764:	4630      	mov	r0, r6
  402766:	f001 f91b 	bl	4039a0 <_sbrk_r>
  40276a:	68bb      	ldr	r3, [r7, #8]
  40276c:	442b      	add	r3, r5
  40276e:	4298      	cmp	r0, r3
  402770:	d004      	beq.n	40277c <_malloc_trim_r+0x48>
  402772:	4630      	mov	r0, r6
  402774:	f000 ff68 	bl	403648 <__malloc_unlock>
  402778:	2000      	movs	r0, #0
  40277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40277c:	4261      	negs	r1, r4
  40277e:	4630      	mov	r0, r6
  402780:	f001 f90e 	bl	4039a0 <_sbrk_r>
  402784:	3001      	adds	r0, #1
  402786:	d00d      	beq.n	4027a4 <_malloc_trim_r+0x70>
  402788:	4b10      	ldr	r3, [pc, #64]	; (4027cc <_malloc_trim_r+0x98>)
  40278a:	68ba      	ldr	r2, [r7, #8]
  40278c:	6819      	ldr	r1, [r3, #0]
  40278e:	1b2d      	subs	r5, r5, r4
  402790:	f045 0501 	orr.w	r5, r5, #1
  402794:	4630      	mov	r0, r6
  402796:	1b09      	subs	r1, r1, r4
  402798:	6055      	str	r5, [r2, #4]
  40279a:	6019      	str	r1, [r3, #0]
  40279c:	f000 ff54 	bl	403648 <__malloc_unlock>
  4027a0:	2001      	movs	r0, #1
  4027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027a4:	2100      	movs	r1, #0
  4027a6:	4630      	mov	r0, r6
  4027a8:	f001 f8fa 	bl	4039a0 <_sbrk_r>
  4027ac:	68ba      	ldr	r2, [r7, #8]
  4027ae:	1a83      	subs	r3, r0, r2
  4027b0:	2b0f      	cmp	r3, #15
  4027b2:	ddde      	ble.n	402772 <_malloc_trim_r+0x3e>
  4027b4:	4c06      	ldr	r4, [pc, #24]	; (4027d0 <_malloc_trim_r+0x9c>)
  4027b6:	4905      	ldr	r1, [pc, #20]	; (4027cc <_malloc_trim_r+0x98>)
  4027b8:	6824      	ldr	r4, [r4, #0]
  4027ba:	f043 0301 	orr.w	r3, r3, #1
  4027be:	1b00      	subs	r0, r0, r4
  4027c0:	6053      	str	r3, [r2, #4]
  4027c2:	6008      	str	r0, [r1, #0]
  4027c4:	e7d5      	b.n	402772 <_malloc_trim_r+0x3e>
  4027c6:	bf00      	nop
  4027c8:	204005a8 	.word	0x204005a8
  4027cc:	20400a54 	.word	0x20400a54
  4027d0:	204009b0 	.word	0x204009b0

004027d4 <_free_r>:
  4027d4:	2900      	cmp	r1, #0
  4027d6:	d044      	beq.n	402862 <_free_r+0x8e>
  4027d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4027dc:	460d      	mov	r5, r1
  4027de:	4680      	mov	r8, r0
  4027e0:	f000 ff2c 	bl	40363c <__malloc_lock>
  4027e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4027e8:	4969      	ldr	r1, [pc, #420]	; (402990 <_free_r+0x1bc>)
  4027ea:	f027 0301 	bic.w	r3, r7, #1
  4027ee:	f1a5 0408 	sub.w	r4, r5, #8
  4027f2:	18e2      	adds	r2, r4, r3
  4027f4:	688e      	ldr	r6, [r1, #8]
  4027f6:	6850      	ldr	r0, [r2, #4]
  4027f8:	42b2      	cmp	r2, r6
  4027fa:	f020 0003 	bic.w	r0, r0, #3
  4027fe:	d05e      	beq.n	4028be <_free_r+0xea>
  402800:	07fe      	lsls	r6, r7, #31
  402802:	6050      	str	r0, [r2, #4]
  402804:	d40b      	bmi.n	40281e <_free_r+0x4a>
  402806:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40280a:	1be4      	subs	r4, r4, r7
  40280c:	f101 0e08 	add.w	lr, r1, #8
  402810:	68a5      	ldr	r5, [r4, #8]
  402812:	4575      	cmp	r5, lr
  402814:	443b      	add	r3, r7
  402816:	d06d      	beq.n	4028f4 <_free_r+0x120>
  402818:	68e7      	ldr	r7, [r4, #12]
  40281a:	60ef      	str	r7, [r5, #12]
  40281c:	60bd      	str	r5, [r7, #8]
  40281e:	1815      	adds	r5, r2, r0
  402820:	686d      	ldr	r5, [r5, #4]
  402822:	07ed      	lsls	r5, r5, #31
  402824:	d53e      	bpl.n	4028a4 <_free_r+0xd0>
  402826:	f043 0201 	orr.w	r2, r3, #1
  40282a:	6062      	str	r2, [r4, #4]
  40282c:	50e3      	str	r3, [r4, r3]
  40282e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402832:	d217      	bcs.n	402864 <_free_r+0x90>
  402834:	08db      	lsrs	r3, r3, #3
  402836:	1c58      	adds	r0, r3, #1
  402838:	109a      	asrs	r2, r3, #2
  40283a:	684d      	ldr	r5, [r1, #4]
  40283c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402840:	60a7      	str	r7, [r4, #8]
  402842:	2301      	movs	r3, #1
  402844:	4093      	lsls	r3, r2
  402846:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40284a:	432b      	orrs	r3, r5
  40284c:	3a08      	subs	r2, #8
  40284e:	60e2      	str	r2, [r4, #12]
  402850:	604b      	str	r3, [r1, #4]
  402852:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402856:	60fc      	str	r4, [r7, #12]
  402858:	4640      	mov	r0, r8
  40285a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40285e:	f000 bef3 	b.w	403648 <__malloc_unlock>
  402862:	4770      	bx	lr
  402864:	0a5a      	lsrs	r2, r3, #9
  402866:	2a04      	cmp	r2, #4
  402868:	d852      	bhi.n	402910 <_free_r+0x13c>
  40286a:	099a      	lsrs	r2, r3, #6
  40286c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402870:	00ff      	lsls	r7, r7, #3
  402872:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402876:	19c8      	adds	r0, r1, r7
  402878:	59ca      	ldr	r2, [r1, r7]
  40287a:	3808      	subs	r0, #8
  40287c:	4290      	cmp	r0, r2
  40287e:	d04f      	beq.n	402920 <_free_r+0x14c>
  402880:	6851      	ldr	r1, [r2, #4]
  402882:	f021 0103 	bic.w	r1, r1, #3
  402886:	428b      	cmp	r3, r1
  402888:	d232      	bcs.n	4028f0 <_free_r+0x11c>
  40288a:	6892      	ldr	r2, [r2, #8]
  40288c:	4290      	cmp	r0, r2
  40288e:	d1f7      	bne.n	402880 <_free_r+0xac>
  402890:	68c3      	ldr	r3, [r0, #12]
  402892:	60a0      	str	r0, [r4, #8]
  402894:	60e3      	str	r3, [r4, #12]
  402896:	609c      	str	r4, [r3, #8]
  402898:	60c4      	str	r4, [r0, #12]
  40289a:	4640      	mov	r0, r8
  40289c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4028a0:	f000 bed2 	b.w	403648 <__malloc_unlock>
  4028a4:	6895      	ldr	r5, [r2, #8]
  4028a6:	4f3b      	ldr	r7, [pc, #236]	; (402994 <_free_r+0x1c0>)
  4028a8:	42bd      	cmp	r5, r7
  4028aa:	4403      	add	r3, r0
  4028ac:	d040      	beq.n	402930 <_free_r+0x15c>
  4028ae:	68d0      	ldr	r0, [r2, #12]
  4028b0:	60e8      	str	r0, [r5, #12]
  4028b2:	f043 0201 	orr.w	r2, r3, #1
  4028b6:	6085      	str	r5, [r0, #8]
  4028b8:	6062      	str	r2, [r4, #4]
  4028ba:	50e3      	str	r3, [r4, r3]
  4028bc:	e7b7      	b.n	40282e <_free_r+0x5a>
  4028be:	07ff      	lsls	r7, r7, #31
  4028c0:	4403      	add	r3, r0
  4028c2:	d407      	bmi.n	4028d4 <_free_r+0x100>
  4028c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4028c8:	1aa4      	subs	r4, r4, r2
  4028ca:	4413      	add	r3, r2
  4028cc:	68a0      	ldr	r0, [r4, #8]
  4028ce:	68e2      	ldr	r2, [r4, #12]
  4028d0:	60c2      	str	r2, [r0, #12]
  4028d2:	6090      	str	r0, [r2, #8]
  4028d4:	4a30      	ldr	r2, [pc, #192]	; (402998 <_free_r+0x1c4>)
  4028d6:	6812      	ldr	r2, [r2, #0]
  4028d8:	f043 0001 	orr.w	r0, r3, #1
  4028dc:	4293      	cmp	r3, r2
  4028de:	6060      	str	r0, [r4, #4]
  4028e0:	608c      	str	r4, [r1, #8]
  4028e2:	d3b9      	bcc.n	402858 <_free_r+0x84>
  4028e4:	4b2d      	ldr	r3, [pc, #180]	; (40299c <_free_r+0x1c8>)
  4028e6:	4640      	mov	r0, r8
  4028e8:	6819      	ldr	r1, [r3, #0]
  4028ea:	f7ff ff23 	bl	402734 <_malloc_trim_r>
  4028ee:	e7b3      	b.n	402858 <_free_r+0x84>
  4028f0:	4610      	mov	r0, r2
  4028f2:	e7cd      	b.n	402890 <_free_r+0xbc>
  4028f4:	1811      	adds	r1, r2, r0
  4028f6:	6849      	ldr	r1, [r1, #4]
  4028f8:	07c9      	lsls	r1, r1, #31
  4028fa:	d444      	bmi.n	402986 <_free_r+0x1b2>
  4028fc:	6891      	ldr	r1, [r2, #8]
  4028fe:	68d2      	ldr	r2, [r2, #12]
  402900:	60ca      	str	r2, [r1, #12]
  402902:	4403      	add	r3, r0
  402904:	f043 0001 	orr.w	r0, r3, #1
  402908:	6091      	str	r1, [r2, #8]
  40290a:	6060      	str	r0, [r4, #4]
  40290c:	50e3      	str	r3, [r4, r3]
  40290e:	e7a3      	b.n	402858 <_free_r+0x84>
  402910:	2a14      	cmp	r2, #20
  402912:	d816      	bhi.n	402942 <_free_r+0x16e>
  402914:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402918:	00ff      	lsls	r7, r7, #3
  40291a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40291e:	e7aa      	b.n	402876 <_free_r+0xa2>
  402920:	10aa      	asrs	r2, r5, #2
  402922:	2301      	movs	r3, #1
  402924:	684d      	ldr	r5, [r1, #4]
  402926:	4093      	lsls	r3, r2
  402928:	432b      	orrs	r3, r5
  40292a:	604b      	str	r3, [r1, #4]
  40292c:	4603      	mov	r3, r0
  40292e:	e7b0      	b.n	402892 <_free_r+0xbe>
  402930:	f043 0201 	orr.w	r2, r3, #1
  402934:	614c      	str	r4, [r1, #20]
  402936:	610c      	str	r4, [r1, #16]
  402938:	60e5      	str	r5, [r4, #12]
  40293a:	60a5      	str	r5, [r4, #8]
  40293c:	6062      	str	r2, [r4, #4]
  40293e:	50e3      	str	r3, [r4, r3]
  402940:	e78a      	b.n	402858 <_free_r+0x84>
  402942:	2a54      	cmp	r2, #84	; 0x54
  402944:	d806      	bhi.n	402954 <_free_r+0x180>
  402946:	0b1a      	lsrs	r2, r3, #12
  402948:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40294c:	00ff      	lsls	r7, r7, #3
  40294e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402952:	e790      	b.n	402876 <_free_r+0xa2>
  402954:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402958:	d806      	bhi.n	402968 <_free_r+0x194>
  40295a:	0bda      	lsrs	r2, r3, #15
  40295c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402960:	00ff      	lsls	r7, r7, #3
  402962:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402966:	e786      	b.n	402876 <_free_r+0xa2>
  402968:	f240 5054 	movw	r0, #1364	; 0x554
  40296c:	4282      	cmp	r2, r0
  40296e:	d806      	bhi.n	40297e <_free_r+0x1aa>
  402970:	0c9a      	lsrs	r2, r3, #18
  402972:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402976:	00ff      	lsls	r7, r7, #3
  402978:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40297c:	e77b      	b.n	402876 <_free_r+0xa2>
  40297e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402982:	257e      	movs	r5, #126	; 0x7e
  402984:	e777      	b.n	402876 <_free_r+0xa2>
  402986:	f043 0101 	orr.w	r1, r3, #1
  40298a:	6061      	str	r1, [r4, #4]
  40298c:	6013      	str	r3, [r2, #0]
  40298e:	e763      	b.n	402858 <_free_r+0x84>
  402990:	204005a8 	.word	0x204005a8
  402994:	204005b0 	.word	0x204005b0
  402998:	204009b4 	.word	0x204009b4
  40299c:	20400a84 	.word	0x20400a84

004029a0 <__sfvwrite_r>:
  4029a0:	6893      	ldr	r3, [r2, #8]
  4029a2:	2b00      	cmp	r3, #0
  4029a4:	d073      	beq.n	402a8e <__sfvwrite_r+0xee>
  4029a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029aa:	898b      	ldrh	r3, [r1, #12]
  4029ac:	b083      	sub	sp, #12
  4029ae:	460c      	mov	r4, r1
  4029b0:	0719      	lsls	r1, r3, #28
  4029b2:	9000      	str	r0, [sp, #0]
  4029b4:	4616      	mov	r6, r2
  4029b6:	d526      	bpl.n	402a06 <__sfvwrite_r+0x66>
  4029b8:	6922      	ldr	r2, [r4, #16]
  4029ba:	b322      	cbz	r2, 402a06 <__sfvwrite_r+0x66>
  4029bc:	f013 0002 	ands.w	r0, r3, #2
  4029c0:	6835      	ldr	r5, [r6, #0]
  4029c2:	d02c      	beq.n	402a1e <__sfvwrite_r+0x7e>
  4029c4:	f04f 0900 	mov.w	r9, #0
  4029c8:	4fb0      	ldr	r7, [pc, #704]	; (402c8c <__sfvwrite_r+0x2ec>)
  4029ca:	46c8      	mov	r8, r9
  4029cc:	46b2      	mov	sl, r6
  4029ce:	45b8      	cmp	r8, r7
  4029d0:	4643      	mov	r3, r8
  4029d2:	464a      	mov	r2, r9
  4029d4:	bf28      	it	cs
  4029d6:	463b      	movcs	r3, r7
  4029d8:	9800      	ldr	r0, [sp, #0]
  4029da:	f1b8 0f00 	cmp.w	r8, #0
  4029de:	d050      	beq.n	402a82 <__sfvwrite_r+0xe2>
  4029e0:	69e1      	ldr	r1, [r4, #28]
  4029e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4029e4:	47b0      	blx	r6
  4029e6:	2800      	cmp	r0, #0
  4029e8:	dd58      	ble.n	402a9c <__sfvwrite_r+0xfc>
  4029ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4029ee:	1a1b      	subs	r3, r3, r0
  4029f0:	4481      	add	r9, r0
  4029f2:	eba8 0800 	sub.w	r8, r8, r0
  4029f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4029fa:	2b00      	cmp	r3, #0
  4029fc:	d1e7      	bne.n	4029ce <__sfvwrite_r+0x2e>
  4029fe:	2000      	movs	r0, #0
  402a00:	b003      	add	sp, #12
  402a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a06:	4621      	mov	r1, r4
  402a08:	9800      	ldr	r0, [sp, #0]
  402a0a:	f7ff fc51 	bl	4022b0 <__swsetup_r>
  402a0e:	2800      	cmp	r0, #0
  402a10:	f040 8133 	bne.w	402c7a <__sfvwrite_r+0x2da>
  402a14:	89a3      	ldrh	r3, [r4, #12]
  402a16:	6835      	ldr	r5, [r6, #0]
  402a18:	f013 0002 	ands.w	r0, r3, #2
  402a1c:	d1d2      	bne.n	4029c4 <__sfvwrite_r+0x24>
  402a1e:	f013 0901 	ands.w	r9, r3, #1
  402a22:	d145      	bne.n	402ab0 <__sfvwrite_r+0x110>
  402a24:	464f      	mov	r7, r9
  402a26:	9601      	str	r6, [sp, #4]
  402a28:	b337      	cbz	r7, 402a78 <__sfvwrite_r+0xd8>
  402a2a:	059a      	lsls	r2, r3, #22
  402a2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402a30:	f140 8083 	bpl.w	402b3a <__sfvwrite_r+0x19a>
  402a34:	4547      	cmp	r7, r8
  402a36:	46c3      	mov	fp, r8
  402a38:	f0c0 80ab 	bcc.w	402b92 <__sfvwrite_r+0x1f2>
  402a3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402a40:	f040 80ac 	bne.w	402b9c <__sfvwrite_r+0x1fc>
  402a44:	6820      	ldr	r0, [r4, #0]
  402a46:	46ba      	mov	sl, r7
  402a48:	465a      	mov	r2, fp
  402a4a:	4649      	mov	r1, r9
  402a4c:	f000 fd92 	bl	403574 <memmove>
  402a50:	68a2      	ldr	r2, [r4, #8]
  402a52:	6823      	ldr	r3, [r4, #0]
  402a54:	eba2 0208 	sub.w	r2, r2, r8
  402a58:	445b      	add	r3, fp
  402a5a:	60a2      	str	r2, [r4, #8]
  402a5c:	6023      	str	r3, [r4, #0]
  402a5e:	9a01      	ldr	r2, [sp, #4]
  402a60:	6893      	ldr	r3, [r2, #8]
  402a62:	eba3 030a 	sub.w	r3, r3, sl
  402a66:	44d1      	add	r9, sl
  402a68:	eba7 070a 	sub.w	r7, r7, sl
  402a6c:	6093      	str	r3, [r2, #8]
  402a6e:	2b00      	cmp	r3, #0
  402a70:	d0c5      	beq.n	4029fe <__sfvwrite_r+0x5e>
  402a72:	89a3      	ldrh	r3, [r4, #12]
  402a74:	2f00      	cmp	r7, #0
  402a76:	d1d8      	bne.n	402a2a <__sfvwrite_r+0x8a>
  402a78:	f8d5 9000 	ldr.w	r9, [r5]
  402a7c:	686f      	ldr	r7, [r5, #4]
  402a7e:	3508      	adds	r5, #8
  402a80:	e7d2      	b.n	402a28 <__sfvwrite_r+0x88>
  402a82:	f8d5 9000 	ldr.w	r9, [r5]
  402a86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402a8a:	3508      	adds	r5, #8
  402a8c:	e79f      	b.n	4029ce <__sfvwrite_r+0x2e>
  402a8e:	2000      	movs	r0, #0
  402a90:	4770      	bx	lr
  402a92:	4621      	mov	r1, r4
  402a94:	9800      	ldr	r0, [sp, #0]
  402a96:	f7ff fd1f 	bl	4024d8 <_fflush_r>
  402a9a:	b370      	cbz	r0, 402afa <__sfvwrite_r+0x15a>
  402a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402aa4:	f04f 30ff 	mov.w	r0, #4294967295
  402aa8:	81a3      	strh	r3, [r4, #12]
  402aaa:	b003      	add	sp, #12
  402aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ab0:	4681      	mov	r9, r0
  402ab2:	4633      	mov	r3, r6
  402ab4:	464e      	mov	r6, r9
  402ab6:	46a8      	mov	r8, r5
  402ab8:	469a      	mov	sl, r3
  402aba:	464d      	mov	r5, r9
  402abc:	b34e      	cbz	r6, 402b12 <__sfvwrite_r+0x172>
  402abe:	b380      	cbz	r0, 402b22 <__sfvwrite_r+0x182>
  402ac0:	6820      	ldr	r0, [r4, #0]
  402ac2:	6923      	ldr	r3, [r4, #16]
  402ac4:	6962      	ldr	r2, [r4, #20]
  402ac6:	45b1      	cmp	r9, r6
  402ac8:	46cb      	mov	fp, r9
  402aca:	bf28      	it	cs
  402acc:	46b3      	movcs	fp, r6
  402ace:	4298      	cmp	r0, r3
  402ad0:	465f      	mov	r7, fp
  402ad2:	d904      	bls.n	402ade <__sfvwrite_r+0x13e>
  402ad4:	68a3      	ldr	r3, [r4, #8]
  402ad6:	4413      	add	r3, r2
  402ad8:	459b      	cmp	fp, r3
  402ada:	f300 80a6 	bgt.w	402c2a <__sfvwrite_r+0x28a>
  402ade:	4593      	cmp	fp, r2
  402ae0:	db4b      	blt.n	402b7a <__sfvwrite_r+0x1da>
  402ae2:	4613      	mov	r3, r2
  402ae4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402ae6:	69e1      	ldr	r1, [r4, #28]
  402ae8:	9800      	ldr	r0, [sp, #0]
  402aea:	462a      	mov	r2, r5
  402aec:	47b8      	blx	r7
  402aee:	1e07      	subs	r7, r0, #0
  402af0:	ddd4      	ble.n	402a9c <__sfvwrite_r+0xfc>
  402af2:	ebb9 0907 	subs.w	r9, r9, r7
  402af6:	d0cc      	beq.n	402a92 <__sfvwrite_r+0xf2>
  402af8:	2001      	movs	r0, #1
  402afa:	f8da 3008 	ldr.w	r3, [sl, #8]
  402afe:	1bdb      	subs	r3, r3, r7
  402b00:	443d      	add	r5, r7
  402b02:	1bf6      	subs	r6, r6, r7
  402b04:	f8ca 3008 	str.w	r3, [sl, #8]
  402b08:	2b00      	cmp	r3, #0
  402b0a:	f43f af78 	beq.w	4029fe <__sfvwrite_r+0x5e>
  402b0e:	2e00      	cmp	r6, #0
  402b10:	d1d5      	bne.n	402abe <__sfvwrite_r+0x11e>
  402b12:	f108 0308 	add.w	r3, r8, #8
  402b16:	e913 0060 	ldmdb	r3, {r5, r6}
  402b1a:	4698      	mov	r8, r3
  402b1c:	3308      	adds	r3, #8
  402b1e:	2e00      	cmp	r6, #0
  402b20:	d0f9      	beq.n	402b16 <__sfvwrite_r+0x176>
  402b22:	4632      	mov	r2, r6
  402b24:	210a      	movs	r1, #10
  402b26:	4628      	mov	r0, r5
  402b28:	f000 fc3a 	bl	4033a0 <memchr>
  402b2c:	2800      	cmp	r0, #0
  402b2e:	f000 80a1 	beq.w	402c74 <__sfvwrite_r+0x2d4>
  402b32:	3001      	adds	r0, #1
  402b34:	eba0 0905 	sub.w	r9, r0, r5
  402b38:	e7c2      	b.n	402ac0 <__sfvwrite_r+0x120>
  402b3a:	6820      	ldr	r0, [r4, #0]
  402b3c:	6923      	ldr	r3, [r4, #16]
  402b3e:	4298      	cmp	r0, r3
  402b40:	d802      	bhi.n	402b48 <__sfvwrite_r+0x1a8>
  402b42:	6963      	ldr	r3, [r4, #20]
  402b44:	429f      	cmp	r7, r3
  402b46:	d25d      	bcs.n	402c04 <__sfvwrite_r+0x264>
  402b48:	45b8      	cmp	r8, r7
  402b4a:	bf28      	it	cs
  402b4c:	46b8      	movcs	r8, r7
  402b4e:	4642      	mov	r2, r8
  402b50:	4649      	mov	r1, r9
  402b52:	f000 fd0f 	bl	403574 <memmove>
  402b56:	68a3      	ldr	r3, [r4, #8]
  402b58:	6822      	ldr	r2, [r4, #0]
  402b5a:	eba3 0308 	sub.w	r3, r3, r8
  402b5e:	4442      	add	r2, r8
  402b60:	60a3      	str	r3, [r4, #8]
  402b62:	6022      	str	r2, [r4, #0]
  402b64:	b10b      	cbz	r3, 402b6a <__sfvwrite_r+0x1ca>
  402b66:	46c2      	mov	sl, r8
  402b68:	e779      	b.n	402a5e <__sfvwrite_r+0xbe>
  402b6a:	4621      	mov	r1, r4
  402b6c:	9800      	ldr	r0, [sp, #0]
  402b6e:	f7ff fcb3 	bl	4024d8 <_fflush_r>
  402b72:	2800      	cmp	r0, #0
  402b74:	d192      	bne.n	402a9c <__sfvwrite_r+0xfc>
  402b76:	46c2      	mov	sl, r8
  402b78:	e771      	b.n	402a5e <__sfvwrite_r+0xbe>
  402b7a:	465a      	mov	r2, fp
  402b7c:	4629      	mov	r1, r5
  402b7e:	f000 fcf9 	bl	403574 <memmove>
  402b82:	68a2      	ldr	r2, [r4, #8]
  402b84:	6823      	ldr	r3, [r4, #0]
  402b86:	eba2 020b 	sub.w	r2, r2, fp
  402b8a:	445b      	add	r3, fp
  402b8c:	60a2      	str	r2, [r4, #8]
  402b8e:	6023      	str	r3, [r4, #0]
  402b90:	e7af      	b.n	402af2 <__sfvwrite_r+0x152>
  402b92:	6820      	ldr	r0, [r4, #0]
  402b94:	46b8      	mov	r8, r7
  402b96:	46ba      	mov	sl, r7
  402b98:	46bb      	mov	fp, r7
  402b9a:	e755      	b.n	402a48 <__sfvwrite_r+0xa8>
  402b9c:	6962      	ldr	r2, [r4, #20]
  402b9e:	6820      	ldr	r0, [r4, #0]
  402ba0:	6921      	ldr	r1, [r4, #16]
  402ba2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402ba6:	eba0 0a01 	sub.w	sl, r0, r1
  402baa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402bae:	f10a 0001 	add.w	r0, sl, #1
  402bb2:	ea4f 0868 	mov.w	r8, r8, asr #1
  402bb6:	4438      	add	r0, r7
  402bb8:	4540      	cmp	r0, r8
  402bba:	4642      	mov	r2, r8
  402bbc:	bf84      	itt	hi
  402bbe:	4680      	movhi	r8, r0
  402bc0:	4642      	movhi	r2, r8
  402bc2:	055b      	lsls	r3, r3, #21
  402bc4:	d544      	bpl.n	402c50 <__sfvwrite_r+0x2b0>
  402bc6:	4611      	mov	r1, r2
  402bc8:	9800      	ldr	r0, [sp, #0]
  402bca:	f000 f921 	bl	402e10 <_malloc_r>
  402bce:	4683      	mov	fp, r0
  402bd0:	2800      	cmp	r0, #0
  402bd2:	d055      	beq.n	402c80 <__sfvwrite_r+0x2e0>
  402bd4:	4652      	mov	r2, sl
  402bd6:	6921      	ldr	r1, [r4, #16]
  402bd8:	f000 fc32 	bl	403440 <memcpy>
  402bdc:	89a3      	ldrh	r3, [r4, #12]
  402bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402be6:	81a3      	strh	r3, [r4, #12]
  402be8:	eb0b 000a 	add.w	r0, fp, sl
  402bec:	eba8 030a 	sub.w	r3, r8, sl
  402bf0:	f8c4 b010 	str.w	fp, [r4, #16]
  402bf4:	f8c4 8014 	str.w	r8, [r4, #20]
  402bf8:	6020      	str	r0, [r4, #0]
  402bfa:	60a3      	str	r3, [r4, #8]
  402bfc:	46b8      	mov	r8, r7
  402bfe:	46ba      	mov	sl, r7
  402c00:	46bb      	mov	fp, r7
  402c02:	e721      	b.n	402a48 <__sfvwrite_r+0xa8>
  402c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402c08:	42b9      	cmp	r1, r7
  402c0a:	bf28      	it	cs
  402c0c:	4639      	movcs	r1, r7
  402c0e:	464a      	mov	r2, r9
  402c10:	fb91 f1f3 	sdiv	r1, r1, r3
  402c14:	9800      	ldr	r0, [sp, #0]
  402c16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402c18:	fb03 f301 	mul.w	r3, r3, r1
  402c1c:	69e1      	ldr	r1, [r4, #28]
  402c1e:	47b0      	blx	r6
  402c20:	f1b0 0a00 	subs.w	sl, r0, #0
  402c24:	f73f af1b 	bgt.w	402a5e <__sfvwrite_r+0xbe>
  402c28:	e738      	b.n	402a9c <__sfvwrite_r+0xfc>
  402c2a:	461a      	mov	r2, r3
  402c2c:	4629      	mov	r1, r5
  402c2e:	9301      	str	r3, [sp, #4]
  402c30:	f000 fca0 	bl	403574 <memmove>
  402c34:	6822      	ldr	r2, [r4, #0]
  402c36:	9b01      	ldr	r3, [sp, #4]
  402c38:	9800      	ldr	r0, [sp, #0]
  402c3a:	441a      	add	r2, r3
  402c3c:	6022      	str	r2, [r4, #0]
  402c3e:	4621      	mov	r1, r4
  402c40:	f7ff fc4a 	bl	4024d8 <_fflush_r>
  402c44:	9b01      	ldr	r3, [sp, #4]
  402c46:	2800      	cmp	r0, #0
  402c48:	f47f af28 	bne.w	402a9c <__sfvwrite_r+0xfc>
  402c4c:	461f      	mov	r7, r3
  402c4e:	e750      	b.n	402af2 <__sfvwrite_r+0x152>
  402c50:	9800      	ldr	r0, [sp, #0]
  402c52:	f000 fcff 	bl	403654 <_realloc_r>
  402c56:	4683      	mov	fp, r0
  402c58:	2800      	cmp	r0, #0
  402c5a:	d1c5      	bne.n	402be8 <__sfvwrite_r+0x248>
  402c5c:	9d00      	ldr	r5, [sp, #0]
  402c5e:	6921      	ldr	r1, [r4, #16]
  402c60:	4628      	mov	r0, r5
  402c62:	f7ff fdb7 	bl	4027d4 <_free_r>
  402c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c6a:	220c      	movs	r2, #12
  402c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402c70:	602a      	str	r2, [r5, #0]
  402c72:	e715      	b.n	402aa0 <__sfvwrite_r+0x100>
  402c74:	f106 0901 	add.w	r9, r6, #1
  402c78:	e722      	b.n	402ac0 <__sfvwrite_r+0x120>
  402c7a:	f04f 30ff 	mov.w	r0, #4294967295
  402c7e:	e6bf      	b.n	402a00 <__sfvwrite_r+0x60>
  402c80:	9a00      	ldr	r2, [sp, #0]
  402c82:	230c      	movs	r3, #12
  402c84:	6013      	str	r3, [r2, #0]
  402c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c8a:	e709      	b.n	402aa0 <__sfvwrite_r+0x100>
  402c8c:	7ffffc00 	.word	0x7ffffc00

00402c90 <_fwalk_reent>:
  402c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402c94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402c98:	d01f      	beq.n	402cda <_fwalk_reent+0x4a>
  402c9a:	4688      	mov	r8, r1
  402c9c:	4606      	mov	r6, r0
  402c9e:	f04f 0900 	mov.w	r9, #0
  402ca2:	687d      	ldr	r5, [r7, #4]
  402ca4:	68bc      	ldr	r4, [r7, #8]
  402ca6:	3d01      	subs	r5, #1
  402ca8:	d411      	bmi.n	402cce <_fwalk_reent+0x3e>
  402caa:	89a3      	ldrh	r3, [r4, #12]
  402cac:	2b01      	cmp	r3, #1
  402cae:	f105 35ff 	add.w	r5, r5, #4294967295
  402cb2:	d908      	bls.n	402cc6 <_fwalk_reent+0x36>
  402cb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402cb8:	3301      	adds	r3, #1
  402cba:	4621      	mov	r1, r4
  402cbc:	4630      	mov	r0, r6
  402cbe:	d002      	beq.n	402cc6 <_fwalk_reent+0x36>
  402cc0:	47c0      	blx	r8
  402cc2:	ea49 0900 	orr.w	r9, r9, r0
  402cc6:	1c6b      	adds	r3, r5, #1
  402cc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402ccc:	d1ed      	bne.n	402caa <_fwalk_reent+0x1a>
  402cce:	683f      	ldr	r7, [r7, #0]
  402cd0:	2f00      	cmp	r7, #0
  402cd2:	d1e6      	bne.n	402ca2 <_fwalk_reent+0x12>
  402cd4:	4648      	mov	r0, r9
  402cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402cda:	46b9      	mov	r9, r7
  402cdc:	4648      	mov	r0, r9
  402cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ce2:	bf00      	nop

00402ce4 <__locale_mb_cur_max>:
  402ce4:	4b04      	ldr	r3, [pc, #16]	; (402cf8 <__locale_mb_cur_max+0x14>)
  402ce6:	4a05      	ldr	r2, [pc, #20]	; (402cfc <__locale_mb_cur_max+0x18>)
  402ce8:	681b      	ldr	r3, [r3, #0]
  402cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402cec:	2b00      	cmp	r3, #0
  402cee:	bf08      	it	eq
  402cf0:	4613      	moveq	r3, r2
  402cf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402cf6:	4770      	bx	lr
  402cf8:	20400008 	.word	0x20400008
  402cfc:	2040043c 	.word	0x2040043c

00402d00 <__retarget_lock_init_recursive>:
  402d00:	4770      	bx	lr
  402d02:	bf00      	nop

00402d04 <__retarget_lock_close_recursive>:
  402d04:	4770      	bx	lr
  402d06:	bf00      	nop

00402d08 <__retarget_lock_acquire_recursive>:
  402d08:	4770      	bx	lr
  402d0a:	bf00      	nop

00402d0c <__retarget_lock_release_recursive>:
  402d0c:	4770      	bx	lr
  402d0e:	bf00      	nop

00402d10 <__swhatbuf_r>:
  402d10:	b570      	push	{r4, r5, r6, lr}
  402d12:	460c      	mov	r4, r1
  402d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d18:	2900      	cmp	r1, #0
  402d1a:	b090      	sub	sp, #64	; 0x40
  402d1c:	4615      	mov	r5, r2
  402d1e:	461e      	mov	r6, r3
  402d20:	db14      	blt.n	402d4c <__swhatbuf_r+0x3c>
  402d22:	aa01      	add	r2, sp, #4
  402d24:	f001 f80e 	bl	403d44 <_fstat_r>
  402d28:	2800      	cmp	r0, #0
  402d2a:	db0f      	blt.n	402d4c <__swhatbuf_r+0x3c>
  402d2c:	9a02      	ldr	r2, [sp, #8]
  402d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402d32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402d36:	fab2 f282 	clz	r2, r2
  402d3a:	0952      	lsrs	r2, r2, #5
  402d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402d40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402d44:	6032      	str	r2, [r6, #0]
  402d46:	602b      	str	r3, [r5, #0]
  402d48:	b010      	add	sp, #64	; 0x40
  402d4a:	bd70      	pop	{r4, r5, r6, pc}
  402d4c:	89a2      	ldrh	r2, [r4, #12]
  402d4e:	2300      	movs	r3, #0
  402d50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402d54:	6033      	str	r3, [r6, #0]
  402d56:	d004      	beq.n	402d62 <__swhatbuf_r+0x52>
  402d58:	2240      	movs	r2, #64	; 0x40
  402d5a:	4618      	mov	r0, r3
  402d5c:	602a      	str	r2, [r5, #0]
  402d5e:	b010      	add	sp, #64	; 0x40
  402d60:	bd70      	pop	{r4, r5, r6, pc}
  402d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402d66:	602b      	str	r3, [r5, #0]
  402d68:	b010      	add	sp, #64	; 0x40
  402d6a:	bd70      	pop	{r4, r5, r6, pc}

00402d6c <__smakebuf_r>:
  402d6c:	898a      	ldrh	r2, [r1, #12]
  402d6e:	0792      	lsls	r2, r2, #30
  402d70:	460b      	mov	r3, r1
  402d72:	d506      	bpl.n	402d82 <__smakebuf_r+0x16>
  402d74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402d78:	2101      	movs	r1, #1
  402d7a:	601a      	str	r2, [r3, #0]
  402d7c:	611a      	str	r2, [r3, #16]
  402d7e:	6159      	str	r1, [r3, #20]
  402d80:	4770      	bx	lr
  402d82:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d84:	b083      	sub	sp, #12
  402d86:	ab01      	add	r3, sp, #4
  402d88:	466a      	mov	r2, sp
  402d8a:	460c      	mov	r4, r1
  402d8c:	4606      	mov	r6, r0
  402d8e:	f7ff ffbf 	bl	402d10 <__swhatbuf_r>
  402d92:	9900      	ldr	r1, [sp, #0]
  402d94:	4605      	mov	r5, r0
  402d96:	4630      	mov	r0, r6
  402d98:	f000 f83a 	bl	402e10 <_malloc_r>
  402d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402da0:	b1d8      	cbz	r0, 402dda <__smakebuf_r+0x6e>
  402da2:	9a01      	ldr	r2, [sp, #4]
  402da4:	4f15      	ldr	r7, [pc, #84]	; (402dfc <__smakebuf_r+0x90>)
  402da6:	9900      	ldr	r1, [sp, #0]
  402da8:	63f7      	str	r7, [r6, #60]	; 0x3c
  402daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402dae:	81a3      	strh	r3, [r4, #12]
  402db0:	6020      	str	r0, [r4, #0]
  402db2:	6120      	str	r0, [r4, #16]
  402db4:	6161      	str	r1, [r4, #20]
  402db6:	b91a      	cbnz	r2, 402dc0 <__smakebuf_r+0x54>
  402db8:	432b      	orrs	r3, r5
  402dba:	81a3      	strh	r3, [r4, #12]
  402dbc:	b003      	add	sp, #12
  402dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402dc0:	4630      	mov	r0, r6
  402dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402dc6:	f000 ffd1 	bl	403d6c <_isatty_r>
  402dca:	b1a0      	cbz	r0, 402df6 <__smakebuf_r+0x8a>
  402dcc:	89a3      	ldrh	r3, [r4, #12]
  402dce:	f023 0303 	bic.w	r3, r3, #3
  402dd2:	f043 0301 	orr.w	r3, r3, #1
  402dd6:	b21b      	sxth	r3, r3
  402dd8:	e7ee      	b.n	402db8 <__smakebuf_r+0x4c>
  402dda:	059a      	lsls	r2, r3, #22
  402ddc:	d4ee      	bmi.n	402dbc <__smakebuf_r+0x50>
  402dde:	f023 0303 	bic.w	r3, r3, #3
  402de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402de6:	f043 0302 	orr.w	r3, r3, #2
  402dea:	2101      	movs	r1, #1
  402dec:	81a3      	strh	r3, [r4, #12]
  402dee:	6022      	str	r2, [r4, #0]
  402df0:	6122      	str	r2, [r4, #16]
  402df2:	6161      	str	r1, [r4, #20]
  402df4:	e7e2      	b.n	402dbc <__smakebuf_r+0x50>
  402df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402dfa:	e7dd      	b.n	402db8 <__smakebuf_r+0x4c>
  402dfc:	0040252d 	.word	0x0040252d

00402e00 <malloc>:
  402e00:	4b02      	ldr	r3, [pc, #8]	; (402e0c <malloc+0xc>)
  402e02:	4601      	mov	r1, r0
  402e04:	6818      	ldr	r0, [r3, #0]
  402e06:	f000 b803 	b.w	402e10 <_malloc_r>
  402e0a:	bf00      	nop
  402e0c:	20400008 	.word	0x20400008

00402e10 <_malloc_r>:
  402e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e14:	f101 060b 	add.w	r6, r1, #11
  402e18:	2e16      	cmp	r6, #22
  402e1a:	b083      	sub	sp, #12
  402e1c:	4605      	mov	r5, r0
  402e1e:	f240 809e 	bls.w	402f5e <_malloc_r+0x14e>
  402e22:	f036 0607 	bics.w	r6, r6, #7
  402e26:	f100 80bd 	bmi.w	402fa4 <_malloc_r+0x194>
  402e2a:	42b1      	cmp	r1, r6
  402e2c:	f200 80ba 	bhi.w	402fa4 <_malloc_r+0x194>
  402e30:	f000 fc04 	bl	40363c <__malloc_lock>
  402e34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402e38:	f0c0 8293 	bcc.w	403362 <_malloc_r+0x552>
  402e3c:	0a73      	lsrs	r3, r6, #9
  402e3e:	f000 80b8 	beq.w	402fb2 <_malloc_r+0x1a2>
  402e42:	2b04      	cmp	r3, #4
  402e44:	f200 8179 	bhi.w	40313a <_malloc_r+0x32a>
  402e48:	09b3      	lsrs	r3, r6, #6
  402e4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402e4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402e52:	00c3      	lsls	r3, r0, #3
  402e54:	4fbf      	ldr	r7, [pc, #764]	; (403154 <_malloc_r+0x344>)
  402e56:	443b      	add	r3, r7
  402e58:	f1a3 0108 	sub.w	r1, r3, #8
  402e5c:	685c      	ldr	r4, [r3, #4]
  402e5e:	42a1      	cmp	r1, r4
  402e60:	d106      	bne.n	402e70 <_malloc_r+0x60>
  402e62:	e00c      	b.n	402e7e <_malloc_r+0x6e>
  402e64:	2a00      	cmp	r2, #0
  402e66:	f280 80aa 	bge.w	402fbe <_malloc_r+0x1ae>
  402e6a:	68e4      	ldr	r4, [r4, #12]
  402e6c:	42a1      	cmp	r1, r4
  402e6e:	d006      	beq.n	402e7e <_malloc_r+0x6e>
  402e70:	6863      	ldr	r3, [r4, #4]
  402e72:	f023 0303 	bic.w	r3, r3, #3
  402e76:	1b9a      	subs	r2, r3, r6
  402e78:	2a0f      	cmp	r2, #15
  402e7a:	ddf3      	ble.n	402e64 <_malloc_r+0x54>
  402e7c:	4670      	mov	r0, lr
  402e7e:	693c      	ldr	r4, [r7, #16]
  402e80:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403168 <_malloc_r+0x358>
  402e84:	4574      	cmp	r4, lr
  402e86:	f000 81ab 	beq.w	4031e0 <_malloc_r+0x3d0>
  402e8a:	6863      	ldr	r3, [r4, #4]
  402e8c:	f023 0303 	bic.w	r3, r3, #3
  402e90:	1b9a      	subs	r2, r3, r6
  402e92:	2a0f      	cmp	r2, #15
  402e94:	f300 8190 	bgt.w	4031b8 <_malloc_r+0x3a8>
  402e98:	2a00      	cmp	r2, #0
  402e9a:	f8c7 e014 	str.w	lr, [r7, #20]
  402e9e:	f8c7 e010 	str.w	lr, [r7, #16]
  402ea2:	f280 809d 	bge.w	402fe0 <_malloc_r+0x1d0>
  402ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402eaa:	f080 8161 	bcs.w	403170 <_malloc_r+0x360>
  402eae:	08db      	lsrs	r3, r3, #3
  402eb0:	f103 0c01 	add.w	ip, r3, #1
  402eb4:	1099      	asrs	r1, r3, #2
  402eb6:	687a      	ldr	r2, [r7, #4]
  402eb8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402ebc:	f8c4 8008 	str.w	r8, [r4, #8]
  402ec0:	2301      	movs	r3, #1
  402ec2:	408b      	lsls	r3, r1
  402ec4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402ec8:	4313      	orrs	r3, r2
  402eca:	3908      	subs	r1, #8
  402ecc:	60e1      	str	r1, [r4, #12]
  402ece:	607b      	str	r3, [r7, #4]
  402ed0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402ed4:	f8c8 400c 	str.w	r4, [r8, #12]
  402ed8:	1082      	asrs	r2, r0, #2
  402eda:	2401      	movs	r4, #1
  402edc:	4094      	lsls	r4, r2
  402ede:	429c      	cmp	r4, r3
  402ee0:	f200 808b 	bhi.w	402ffa <_malloc_r+0x1ea>
  402ee4:	421c      	tst	r4, r3
  402ee6:	d106      	bne.n	402ef6 <_malloc_r+0xe6>
  402ee8:	f020 0003 	bic.w	r0, r0, #3
  402eec:	0064      	lsls	r4, r4, #1
  402eee:	421c      	tst	r4, r3
  402ef0:	f100 0004 	add.w	r0, r0, #4
  402ef4:	d0fa      	beq.n	402eec <_malloc_r+0xdc>
  402ef6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402efa:	46cc      	mov	ip, r9
  402efc:	4680      	mov	r8, r0
  402efe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402f02:	459c      	cmp	ip, r3
  402f04:	d107      	bne.n	402f16 <_malloc_r+0x106>
  402f06:	e16d      	b.n	4031e4 <_malloc_r+0x3d4>
  402f08:	2a00      	cmp	r2, #0
  402f0a:	f280 817b 	bge.w	403204 <_malloc_r+0x3f4>
  402f0e:	68db      	ldr	r3, [r3, #12]
  402f10:	459c      	cmp	ip, r3
  402f12:	f000 8167 	beq.w	4031e4 <_malloc_r+0x3d4>
  402f16:	6859      	ldr	r1, [r3, #4]
  402f18:	f021 0103 	bic.w	r1, r1, #3
  402f1c:	1b8a      	subs	r2, r1, r6
  402f1e:	2a0f      	cmp	r2, #15
  402f20:	ddf2      	ble.n	402f08 <_malloc_r+0xf8>
  402f22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402f26:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402f2a:	9300      	str	r3, [sp, #0]
  402f2c:	199c      	adds	r4, r3, r6
  402f2e:	4628      	mov	r0, r5
  402f30:	f046 0601 	orr.w	r6, r6, #1
  402f34:	f042 0501 	orr.w	r5, r2, #1
  402f38:	605e      	str	r6, [r3, #4]
  402f3a:	f8c8 c00c 	str.w	ip, [r8, #12]
  402f3e:	f8cc 8008 	str.w	r8, [ip, #8]
  402f42:	617c      	str	r4, [r7, #20]
  402f44:	613c      	str	r4, [r7, #16]
  402f46:	f8c4 e00c 	str.w	lr, [r4, #12]
  402f4a:	f8c4 e008 	str.w	lr, [r4, #8]
  402f4e:	6065      	str	r5, [r4, #4]
  402f50:	505a      	str	r2, [r3, r1]
  402f52:	f000 fb79 	bl	403648 <__malloc_unlock>
  402f56:	9b00      	ldr	r3, [sp, #0]
  402f58:	f103 0408 	add.w	r4, r3, #8
  402f5c:	e01e      	b.n	402f9c <_malloc_r+0x18c>
  402f5e:	2910      	cmp	r1, #16
  402f60:	d820      	bhi.n	402fa4 <_malloc_r+0x194>
  402f62:	f000 fb6b 	bl	40363c <__malloc_lock>
  402f66:	2610      	movs	r6, #16
  402f68:	2318      	movs	r3, #24
  402f6a:	2002      	movs	r0, #2
  402f6c:	4f79      	ldr	r7, [pc, #484]	; (403154 <_malloc_r+0x344>)
  402f6e:	443b      	add	r3, r7
  402f70:	f1a3 0208 	sub.w	r2, r3, #8
  402f74:	685c      	ldr	r4, [r3, #4]
  402f76:	4294      	cmp	r4, r2
  402f78:	f000 813d 	beq.w	4031f6 <_malloc_r+0x3e6>
  402f7c:	6863      	ldr	r3, [r4, #4]
  402f7e:	68e1      	ldr	r1, [r4, #12]
  402f80:	68a6      	ldr	r6, [r4, #8]
  402f82:	f023 0303 	bic.w	r3, r3, #3
  402f86:	4423      	add	r3, r4
  402f88:	4628      	mov	r0, r5
  402f8a:	685a      	ldr	r2, [r3, #4]
  402f8c:	60f1      	str	r1, [r6, #12]
  402f8e:	f042 0201 	orr.w	r2, r2, #1
  402f92:	608e      	str	r6, [r1, #8]
  402f94:	605a      	str	r2, [r3, #4]
  402f96:	f000 fb57 	bl	403648 <__malloc_unlock>
  402f9a:	3408      	adds	r4, #8
  402f9c:	4620      	mov	r0, r4
  402f9e:	b003      	add	sp, #12
  402fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fa4:	2400      	movs	r4, #0
  402fa6:	230c      	movs	r3, #12
  402fa8:	4620      	mov	r0, r4
  402faa:	602b      	str	r3, [r5, #0]
  402fac:	b003      	add	sp, #12
  402fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fb2:	2040      	movs	r0, #64	; 0x40
  402fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
  402fb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402fbc:	e74a      	b.n	402e54 <_malloc_r+0x44>
  402fbe:	4423      	add	r3, r4
  402fc0:	68e1      	ldr	r1, [r4, #12]
  402fc2:	685a      	ldr	r2, [r3, #4]
  402fc4:	68a6      	ldr	r6, [r4, #8]
  402fc6:	f042 0201 	orr.w	r2, r2, #1
  402fca:	60f1      	str	r1, [r6, #12]
  402fcc:	4628      	mov	r0, r5
  402fce:	608e      	str	r6, [r1, #8]
  402fd0:	605a      	str	r2, [r3, #4]
  402fd2:	f000 fb39 	bl	403648 <__malloc_unlock>
  402fd6:	3408      	adds	r4, #8
  402fd8:	4620      	mov	r0, r4
  402fda:	b003      	add	sp, #12
  402fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fe0:	4423      	add	r3, r4
  402fe2:	4628      	mov	r0, r5
  402fe4:	685a      	ldr	r2, [r3, #4]
  402fe6:	f042 0201 	orr.w	r2, r2, #1
  402fea:	605a      	str	r2, [r3, #4]
  402fec:	f000 fb2c 	bl	403648 <__malloc_unlock>
  402ff0:	3408      	adds	r4, #8
  402ff2:	4620      	mov	r0, r4
  402ff4:	b003      	add	sp, #12
  402ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ffa:	68bc      	ldr	r4, [r7, #8]
  402ffc:	6863      	ldr	r3, [r4, #4]
  402ffe:	f023 0803 	bic.w	r8, r3, #3
  403002:	45b0      	cmp	r8, r6
  403004:	d304      	bcc.n	403010 <_malloc_r+0x200>
  403006:	eba8 0306 	sub.w	r3, r8, r6
  40300a:	2b0f      	cmp	r3, #15
  40300c:	f300 8085 	bgt.w	40311a <_malloc_r+0x30a>
  403010:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40316c <_malloc_r+0x35c>
  403014:	4b50      	ldr	r3, [pc, #320]	; (403158 <_malloc_r+0x348>)
  403016:	f8d9 2000 	ldr.w	r2, [r9]
  40301a:	681b      	ldr	r3, [r3, #0]
  40301c:	3201      	adds	r2, #1
  40301e:	4433      	add	r3, r6
  403020:	eb04 0a08 	add.w	sl, r4, r8
  403024:	f000 8155 	beq.w	4032d2 <_malloc_r+0x4c2>
  403028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40302c:	330f      	adds	r3, #15
  40302e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403032:	f02b 0b0f 	bic.w	fp, fp, #15
  403036:	4659      	mov	r1, fp
  403038:	4628      	mov	r0, r5
  40303a:	f000 fcb1 	bl	4039a0 <_sbrk_r>
  40303e:	1c41      	adds	r1, r0, #1
  403040:	4602      	mov	r2, r0
  403042:	f000 80fc 	beq.w	40323e <_malloc_r+0x42e>
  403046:	4582      	cmp	sl, r0
  403048:	f200 80f7 	bhi.w	40323a <_malloc_r+0x42a>
  40304c:	4b43      	ldr	r3, [pc, #268]	; (40315c <_malloc_r+0x34c>)
  40304e:	6819      	ldr	r1, [r3, #0]
  403050:	4459      	add	r1, fp
  403052:	6019      	str	r1, [r3, #0]
  403054:	f000 814d 	beq.w	4032f2 <_malloc_r+0x4e2>
  403058:	f8d9 0000 	ldr.w	r0, [r9]
  40305c:	3001      	adds	r0, #1
  40305e:	bf1b      	ittet	ne
  403060:	eba2 0a0a 	subne.w	sl, r2, sl
  403064:	4451      	addne	r1, sl
  403066:	f8c9 2000 	streq.w	r2, [r9]
  40306a:	6019      	strne	r1, [r3, #0]
  40306c:	f012 0107 	ands.w	r1, r2, #7
  403070:	f000 8115 	beq.w	40329e <_malloc_r+0x48e>
  403074:	f1c1 0008 	rsb	r0, r1, #8
  403078:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40307c:	4402      	add	r2, r0
  40307e:	3108      	adds	r1, #8
  403080:	eb02 090b 	add.w	r9, r2, fp
  403084:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403088:	eba1 0909 	sub.w	r9, r1, r9
  40308c:	4649      	mov	r1, r9
  40308e:	4628      	mov	r0, r5
  403090:	9301      	str	r3, [sp, #4]
  403092:	9200      	str	r2, [sp, #0]
  403094:	f000 fc84 	bl	4039a0 <_sbrk_r>
  403098:	1c43      	adds	r3, r0, #1
  40309a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40309e:	f000 8143 	beq.w	403328 <_malloc_r+0x518>
  4030a2:	1a80      	subs	r0, r0, r2
  4030a4:	4448      	add	r0, r9
  4030a6:	f040 0001 	orr.w	r0, r0, #1
  4030aa:	6819      	ldr	r1, [r3, #0]
  4030ac:	60ba      	str	r2, [r7, #8]
  4030ae:	4449      	add	r1, r9
  4030b0:	42bc      	cmp	r4, r7
  4030b2:	6050      	str	r0, [r2, #4]
  4030b4:	6019      	str	r1, [r3, #0]
  4030b6:	d017      	beq.n	4030e8 <_malloc_r+0x2d8>
  4030b8:	f1b8 0f0f 	cmp.w	r8, #15
  4030bc:	f240 80fb 	bls.w	4032b6 <_malloc_r+0x4a6>
  4030c0:	6860      	ldr	r0, [r4, #4]
  4030c2:	f1a8 020c 	sub.w	r2, r8, #12
  4030c6:	f022 0207 	bic.w	r2, r2, #7
  4030ca:	eb04 0e02 	add.w	lr, r4, r2
  4030ce:	f000 0001 	and.w	r0, r0, #1
  4030d2:	f04f 0c05 	mov.w	ip, #5
  4030d6:	4310      	orrs	r0, r2
  4030d8:	2a0f      	cmp	r2, #15
  4030da:	6060      	str	r0, [r4, #4]
  4030dc:	f8ce c004 	str.w	ip, [lr, #4]
  4030e0:	f8ce c008 	str.w	ip, [lr, #8]
  4030e4:	f200 8117 	bhi.w	403316 <_malloc_r+0x506>
  4030e8:	4b1d      	ldr	r3, [pc, #116]	; (403160 <_malloc_r+0x350>)
  4030ea:	68bc      	ldr	r4, [r7, #8]
  4030ec:	681a      	ldr	r2, [r3, #0]
  4030ee:	4291      	cmp	r1, r2
  4030f0:	bf88      	it	hi
  4030f2:	6019      	strhi	r1, [r3, #0]
  4030f4:	4b1b      	ldr	r3, [pc, #108]	; (403164 <_malloc_r+0x354>)
  4030f6:	681a      	ldr	r2, [r3, #0]
  4030f8:	4291      	cmp	r1, r2
  4030fa:	6862      	ldr	r2, [r4, #4]
  4030fc:	bf88      	it	hi
  4030fe:	6019      	strhi	r1, [r3, #0]
  403100:	f022 0203 	bic.w	r2, r2, #3
  403104:	4296      	cmp	r6, r2
  403106:	eba2 0306 	sub.w	r3, r2, r6
  40310a:	d801      	bhi.n	403110 <_malloc_r+0x300>
  40310c:	2b0f      	cmp	r3, #15
  40310e:	dc04      	bgt.n	40311a <_malloc_r+0x30a>
  403110:	4628      	mov	r0, r5
  403112:	f000 fa99 	bl	403648 <__malloc_unlock>
  403116:	2400      	movs	r4, #0
  403118:	e740      	b.n	402f9c <_malloc_r+0x18c>
  40311a:	19a2      	adds	r2, r4, r6
  40311c:	f043 0301 	orr.w	r3, r3, #1
  403120:	f046 0601 	orr.w	r6, r6, #1
  403124:	6066      	str	r6, [r4, #4]
  403126:	4628      	mov	r0, r5
  403128:	60ba      	str	r2, [r7, #8]
  40312a:	6053      	str	r3, [r2, #4]
  40312c:	f000 fa8c 	bl	403648 <__malloc_unlock>
  403130:	3408      	adds	r4, #8
  403132:	4620      	mov	r0, r4
  403134:	b003      	add	sp, #12
  403136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40313a:	2b14      	cmp	r3, #20
  40313c:	d971      	bls.n	403222 <_malloc_r+0x412>
  40313e:	2b54      	cmp	r3, #84	; 0x54
  403140:	f200 80a3 	bhi.w	40328a <_malloc_r+0x47a>
  403144:	0b33      	lsrs	r3, r6, #12
  403146:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40314a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40314e:	00c3      	lsls	r3, r0, #3
  403150:	e680      	b.n	402e54 <_malloc_r+0x44>
  403152:	bf00      	nop
  403154:	204005a8 	.word	0x204005a8
  403158:	20400a84 	.word	0x20400a84
  40315c:	20400a54 	.word	0x20400a54
  403160:	20400a7c 	.word	0x20400a7c
  403164:	20400a80 	.word	0x20400a80
  403168:	204005b0 	.word	0x204005b0
  40316c:	204009b0 	.word	0x204009b0
  403170:	0a5a      	lsrs	r2, r3, #9
  403172:	2a04      	cmp	r2, #4
  403174:	d95b      	bls.n	40322e <_malloc_r+0x41e>
  403176:	2a14      	cmp	r2, #20
  403178:	f200 80ae 	bhi.w	4032d8 <_malloc_r+0x4c8>
  40317c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403180:	00c9      	lsls	r1, r1, #3
  403182:	325b      	adds	r2, #91	; 0x5b
  403184:	eb07 0c01 	add.w	ip, r7, r1
  403188:	5879      	ldr	r1, [r7, r1]
  40318a:	f1ac 0c08 	sub.w	ip, ip, #8
  40318e:	458c      	cmp	ip, r1
  403190:	f000 8088 	beq.w	4032a4 <_malloc_r+0x494>
  403194:	684a      	ldr	r2, [r1, #4]
  403196:	f022 0203 	bic.w	r2, r2, #3
  40319a:	4293      	cmp	r3, r2
  40319c:	d273      	bcs.n	403286 <_malloc_r+0x476>
  40319e:	6889      	ldr	r1, [r1, #8]
  4031a0:	458c      	cmp	ip, r1
  4031a2:	d1f7      	bne.n	403194 <_malloc_r+0x384>
  4031a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4031a8:	687b      	ldr	r3, [r7, #4]
  4031aa:	60e2      	str	r2, [r4, #12]
  4031ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4031b0:	6094      	str	r4, [r2, #8]
  4031b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4031b6:	e68f      	b.n	402ed8 <_malloc_r+0xc8>
  4031b8:	19a1      	adds	r1, r4, r6
  4031ba:	f046 0c01 	orr.w	ip, r6, #1
  4031be:	f042 0601 	orr.w	r6, r2, #1
  4031c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4031c6:	4628      	mov	r0, r5
  4031c8:	6179      	str	r1, [r7, #20]
  4031ca:	6139      	str	r1, [r7, #16]
  4031cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4031d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4031d4:	604e      	str	r6, [r1, #4]
  4031d6:	50e2      	str	r2, [r4, r3]
  4031d8:	f000 fa36 	bl	403648 <__malloc_unlock>
  4031dc:	3408      	adds	r4, #8
  4031de:	e6dd      	b.n	402f9c <_malloc_r+0x18c>
  4031e0:	687b      	ldr	r3, [r7, #4]
  4031e2:	e679      	b.n	402ed8 <_malloc_r+0xc8>
  4031e4:	f108 0801 	add.w	r8, r8, #1
  4031e8:	f018 0f03 	tst.w	r8, #3
  4031ec:	f10c 0c08 	add.w	ip, ip, #8
  4031f0:	f47f ae85 	bne.w	402efe <_malloc_r+0xee>
  4031f4:	e02d      	b.n	403252 <_malloc_r+0x442>
  4031f6:	68dc      	ldr	r4, [r3, #12]
  4031f8:	42a3      	cmp	r3, r4
  4031fa:	bf08      	it	eq
  4031fc:	3002      	addeq	r0, #2
  4031fe:	f43f ae3e 	beq.w	402e7e <_malloc_r+0x6e>
  403202:	e6bb      	b.n	402f7c <_malloc_r+0x16c>
  403204:	4419      	add	r1, r3
  403206:	461c      	mov	r4, r3
  403208:	684a      	ldr	r2, [r1, #4]
  40320a:	68db      	ldr	r3, [r3, #12]
  40320c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403210:	f042 0201 	orr.w	r2, r2, #1
  403214:	604a      	str	r2, [r1, #4]
  403216:	4628      	mov	r0, r5
  403218:	60f3      	str	r3, [r6, #12]
  40321a:	609e      	str	r6, [r3, #8]
  40321c:	f000 fa14 	bl	403648 <__malloc_unlock>
  403220:	e6bc      	b.n	402f9c <_malloc_r+0x18c>
  403222:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403226:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40322a:	00c3      	lsls	r3, r0, #3
  40322c:	e612      	b.n	402e54 <_malloc_r+0x44>
  40322e:	099a      	lsrs	r2, r3, #6
  403230:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403234:	00c9      	lsls	r1, r1, #3
  403236:	3238      	adds	r2, #56	; 0x38
  403238:	e7a4      	b.n	403184 <_malloc_r+0x374>
  40323a:	42bc      	cmp	r4, r7
  40323c:	d054      	beq.n	4032e8 <_malloc_r+0x4d8>
  40323e:	68bc      	ldr	r4, [r7, #8]
  403240:	6862      	ldr	r2, [r4, #4]
  403242:	f022 0203 	bic.w	r2, r2, #3
  403246:	e75d      	b.n	403104 <_malloc_r+0x2f4>
  403248:	f859 3908 	ldr.w	r3, [r9], #-8
  40324c:	4599      	cmp	r9, r3
  40324e:	f040 8086 	bne.w	40335e <_malloc_r+0x54e>
  403252:	f010 0f03 	tst.w	r0, #3
  403256:	f100 30ff 	add.w	r0, r0, #4294967295
  40325a:	d1f5      	bne.n	403248 <_malloc_r+0x438>
  40325c:	687b      	ldr	r3, [r7, #4]
  40325e:	ea23 0304 	bic.w	r3, r3, r4
  403262:	607b      	str	r3, [r7, #4]
  403264:	0064      	lsls	r4, r4, #1
  403266:	429c      	cmp	r4, r3
  403268:	f63f aec7 	bhi.w	402ffa <_malloc_r+0x1ea>
  40326c:	2c00      	cmp	r4, #0
  40326e:	f43f aec4 	beq.w	402ffa <_malloc_r+0x1ea>
  403272:	421c      	tst	r4, r3
  403274:	4640      	mov	r0, r8
  403276:	f47f ae3e 	bne.w	402ef6 <_malloc_r+0xe6>
  40327a:	0064      	lsls	r4, r4, #1
  40327c:	421c      	tst	r4, r3
  40327e:	f100 0004 	add.w	r0, r0, #4
  403282:	d0fa      	beq.n	40327a <_malloc_r+0x46a>
  403284:	e637      	b.n	402ef6 <_malloc_r+0xe6>
  403286:	468c      	mov	ip, r1
  403288:	e78c      	b.n	4031a4 <_malloc_r+0x394>
  40328a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40328e:	d815      	bhi.n	4032bc <_malloc_r+0x4ac>
  403290:	0bf3      	lsrs	r3, r6, #15
  403292:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403296:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40329a:	00c3      	lsls	r3, r0, #3
  40329c:	e5da      	b.n	402e54 <_malloc_r+0x44>
  40329e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4032a2:	e6ed      	b.n	403080 <_malloc_r+0x270>
  4032a4:	687b      	ldr	r3, [r7, #4]
  4032a6:	1092      	asrs	r2, r2, #2
  4032a8:	2101      	movs	r1, #1
  4032aa:	fa01 f202 	lsl.w	r2, r1, r2
  4032ae:	4313      	orrs	r3, r2
  4032b0:	607b      	str	r3, [r7, #4]
  4032b2:	4662      	mov	r2, ip
  4032b4:	e779      	b.n	4031aa <_malloc_r+0x39a>
  4032b6:	2301      	movs	r3, #1
  4032b8:	6053      	str	r3, [r2, #4]
  4032ba:	e729      	b.n	403110 <_malloc_r+0x300>
  4032bc:	f240 5254 	movw	r2, #1364	; 0x554
  4032c0:	4293      	cmp	r3, r2
  4032c2:	d822      	bhi.n	40330a <_malloc_r+0x4fa>
  4032c4:	0cb3      	lsrs	r3, r6, #18
  4032c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4032ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4032ce:	00c3      	lsls	r3, r0, #3
  4032d0:	e5c0      	b.n	402e54 <_malloc_r+0x44>
  4032d2:	f103 0b10 	add.w	fp, r3, #16
  4032d6:	e6ae      	b.n	403036 <_malloc_r+0x226>
  4032d8:	2a54      	cmp	r2, #84	; 0x54
  4032da:	d829      	bhi.n	403330 <_malloc_r+0x520>
  4032dc:	0b1a      	lsrs	r2, r3, #12
  4032de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4032e2:	00c9      	lsls	r1, r1, #3
  4032e4:	326e      	adds	r2, #110	; 0x6e
  4032e6:	e74d      	b.n	403184 <_malloc_r+0x374>
  4032e8:	4b20      	ldr	r3, [pc, #128]	; (40336c <_malloc_r+0x55c>)
  4032ea:	6819      	ldr	r1, [r3, #0]
  4032ec:	4459      	add	r1, fp
  4032ee:	6019      	str	r1, [r3, #0]
  4032f0:	e6b2      	b.n	403058 <_malloc_r+0x248>
  4032f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4032f6:	2800      	cmp	r0, #0
  4032f8:	f47f aeae 	bne.w	403058 <_malloc_r+0x248>
  4032fc:	eb08 030b 	add.w	r3, r8, fp
  403300:	68ba      	ldr	r2, [r7, #8]
  403302:	f043 0301 	orr.w	r3, r3, #1
  403306:	6053      	str	r3, [r2, #4]
  403308:	e6ee      	b.n	4030e8 <_malloc_r+0x2d8>
  40330a:	207f      	movs	r0, #127	; 0x7f
  40330c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403310:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403314:	e59e      	b.n	402e54 <_malloc_r+0x44>
  403316:	f104 0108 	add.w	r1, r4, #8
  40331a:	4628      	mov	r0, r5
  40331c:	9300      	str	r3, [sp, #0]
  40331e:	f7ff fa59 	bl	4027d4 <_free_r>
  403322:	9b00      	ldr	r3, [sp, #0]
  403324:	6819      	ldr	r1, [r3, #0]
  403326:	e6df      	b.n	4030e8 <_malloc_r+0x2d8>
  403328:	2001      	movs	r0, #1
  40332a:	f04f 0900 	mov.w	r9, #0
  40332e:	e6bc      	b.n	4030aa <_malloc_r+0x29a>
  403330:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403334:	d805      	bhi.n	403342 <_malloc_r+0x532>
  403336:	0bda      	lsrs	r2, r3, #15
  403338:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40333c:	00c9      	lsls	r1, r1, #3
  40333e:	3277      	adds	r2, #119	; 0x77
  403340:	e720      	b.n	403184 <_malloc_r+0x374>
  403342:	f240 5154 	movw	r1, #1364	; 0x554
  403346:	428a      	cmp	r2, r1
  403348:	d805      	bhi.n	403356 <_malloc_r+0x546>
  40334a:	0c9a      	lsrs	r2, r3, #18
  40334c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403350:	00c9      	lsls	r1, r1, #3
  403352:	327c      	adds	r2, #124	; 0x7c
  403354:	e716      	b.n	403184 <_malloc_r+0x374>
  403356:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40335a:	227e      	movs	r2, #126	; 0x7e
  40335c:	e712      	b.n	403184 <_malloc_r+0x374>
  40335e:	687b      	ldr	r3, [r7, #4]
  403360:	e780      	b.n	403264 <_malloc_r+0x454>
  403362:	08f0      	lsrs	r0, r6, #3
  403364:	f106 0308 	add.w	r3, r6, #8
  403368:	e600      	b.n	402f6c <_malloc_r+0x15c>
  40336a:	bf00      	nop
  40336c:	20400a54 	.word	0x20400a54

00403370 <__ascii_mbtowc>:
  403370:	b082      	sub	sp, #8
  403372:	b149      	cbz	r1, 403388 <__ascii_mbtowc+0x18>
  403374:	b15a      	cbz	r2, 40338e <__ascii_mbtowc+0x1e>
  403376:	b16b      	cbz	r3, 403394 <__ascii_mbtowc+0x24>
  403378:	7813      	ldrb	r3, [r2, #0]
  40337a:	600b      	str	r3, [r1, #0]
  40337c:	7812      	ldrb	r2, [r2, #0]
  40337e:	1c10      	adds	r0, r2, #0
  403380:	bf18      	it	ne
  403382:	2001      	movne	r0, #1
  403384:	b002      	add	sp, #8
  403386:	4770      	bx	lr
  403388:	a901      	add	r1, sp, #4
  40338a:	2a00      	cmp	r2, #0
  40338c:	d1f3      	bne.n	403376 <__ascii_mbtowc+0x6>
  40338e:	4610      	mov	r0, r2
  403390:	b002      	add	sp, #8
  403392:	4770      	bx	lr
  403394:	f06f 0001 	mvn.w	r0, #1
  403398:	e7f4      	b.n	403384 <__ascii_mbtowc+0x14>
  40339a:	bf00      	nop
  40339c:	0000      	movs	r0, r0
	...

004033a0 <memchr>:
  4033a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033a4:	2a10      	cmp	r2, #16
  4033a6:	db2b      	blt.n	403400 <memchr+0x60>
  4033a8:	f010 0f07 	tst.w	r0, #7
  4033ac:	d008      	beq.n	4033c0 <memchr+0x20>
  4033ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4033b2:	3a01      	subs	r2, #1
  4033b4:	428b      	cmp	r3, r1
  4033b6:	d02d      	beq.n	403414 <memchr+0x74>
  4033b8:	f010 0f07 	tst.w	r0, #7
  4033bc:	b342      	cbz	r2, 403410 <memchr+0x70>
  4033be:	d1f6      	bne.n	4033ae <memchr+0xe>
  4033c0:	b4f0      	push	{r4, r5, r6, r7}
  4033c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4033c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4033ca:	f022 0407 	bic.w	r4, r2, #7
  4033ce:	f07f 0700 	mvns.w	r7, #0
  4033d2:	2300      	movs	r3, #0
  4033d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4033d8:	3c08      	subs	r4, #8
  4033da:	ea85 0501 	eor.w	r5, r5, r1
  4033de:	ea86 0601 	eor.w	r6, r6, r1
  4033e2:	fa85 f547 	uadd8	r5, r5, r7
  4033e6:	faa3 f587 	sel	r5, r3, r7
  4033ea:	fa86 f647 	uadd8	r6, r6, r7
  4033ee:	faa5 f687 	sel	r6, r5, r7
  4033f2:	b98e      	cbnz	r6, 403418 <memchr+0x78>
  4033f4:	d1ee      	bne.n	4033d4 <memchr+0x34>
  4033f6:	bcf0      	pop	{r4, r5, r6, r7}
  4033f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033fc:	f002 0207 	and.w	r2, r2, #7
  403400:	b132      	cbz	r2, 403410 <memchr+0x70>
  403402:	f810 3b01 	ldrb.w	r3, [r0], #1
  403406:	3a01      	subs	r2, #1
  403408:	ea83 0301 	eor.w	r3, r3, r1
  40340c:	b113      	cbz	r3, 403414 <memchr+0x74>
  40340e:	d1f8      	bne.n	403402 <memchr+0x62>
  403410:	2000      	movs	r0, #0
  403412:	4770      	bx	lr
  403414:	3801      	subs	r0, #1
  403416:	4770      	bx	lr
  403418:	2d00      	cmp	r5, #0
  40341a:	bf06      	itte	eq
  40341c:	4635      	moveq	r5, r6
  40341e:	3803      	subeq	r0, #3
  403420:	3807      	subne	r0, #7
  403422:	f015 0f01 	tst.w	r5, #1
  403426:	d107      	bne.n	403438 <memchr+0x98>
  403428:	3001      	adds	r0, #1
  40342a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40342e:	bf02      	ittt	eq
  403430:	3001      	addeq	r0, #1
  403432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403436:	3001      	addeq	r0, #1
  403438:	bcf0      	pop	{r4, r5, r6, r7}
  40343a:	3801      	subs	r0, #1
  40343c:	4770      	bx	lr
  40343e:	bf00      	nop

00403440 <memcpy>:
  403440:	4684      	mov	ip, r0
  403442:	ea41 0300 	orr.w	r3, r1, r0
  403446:	f013 0303 	ands.w	r3, r3, #3
  40344a:	d16d      	bne.n	403528 <memcpy+0xe8>
  40344c:	3a40      	subs	r2, #64	; 0x40
  40344e:	d341      	bcc.n	4034d4 <memcpy+0x94>
  403450:	f851 3b04 	ldr.w	r3, [r1], #4
  403454:	f840 3b04 	str.w	r3, [r0], #4
  403458:	f851 3b04 	ldr.w	r3, [r1], #4
  40345c:	f840 3b04 	str.w	r3, [r0], #4
  403460:	f851 3b04 	ldr.w	r3, [r1], #4
  403464:	f840 3b04 	str.w	r3, [r0], #4
  403468:	f851 3b04 	ldr.w	r3, [r1], #4
  40346c:	f840 3b04 	str.w	r3, [r0], #4
  403470:	f851 3b04 	ldr.w	r3, [r1], #4
  403474:	f840 3b04 	str.w	r3, [r0], #4
  403478:	f851 3b04 	ldr.w	r3, [r1], #4
  40347c:	f840 3b04 	str.w	r3, [r0], #4
  403480:	f851 3b04 	ldr.w	r3, [r1], #4
  403484:	f840 3b04 	str.w	r3, [r0], #4
  403488:	f851 3b04 	ldr.w	r3, [r1], #4
  40348c:	f840 3b04 	str.w	r3, [r0], #4
  403490:	f851 3b04 	ldr.w	r3, [r1], #4
  403494:	f840 3b04 	str.w	r3, [r0], #4
  403498:	f851 3b04 	ldr.w	r3, [r1], #4
  40349c:	f840 3b04 	str.w	r3, [r0], #4
  4034a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034a4:	f840 3b04 	str.w	r3, [r0], #4
  4034a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034ac:	f840 3b04 	str.w	r3, [r0], #4
  4034b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034b4:	f840 3b04 	str.w	r3, [r0], #4
  4034b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034bc:	f840 3b04 	str.w	r3, [r0], #4
  4034c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034c4:	f840 3b04 	str.w	r3, [r0], #4
  4034c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034cc:	f840 3b04 	str.w	r3, [r0], #4
  4034d0:	3a40      	subs	r2, #64	; 0x40
  4034d2:	d2bd      	bcs.n	403450 <memcpy+0x10>
  4034d4:	3230      	adds	r2, #48	; 0x30
  4034d6:	d311      	bcc.n	4034fc <memcpy+0xbc>
  4034d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034dc:	f840 3b04 	str.w	r3, [r0], #4
  4034e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034e4:	f840 3b04 	str.w	r3, [r0], #4
  4034e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034ec:	f840 3b04 	str.w	r3, [r0], #4
  4034f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f4:	f840 3b04 	str.w	r3, [r0], #4
  4034f8:	3a10      	subs	r2, #16
  4034fa:	d2ed      	bcs.n	4034d8 <memcpy+0x98>
  4034fc:	320c      	adds	r2, #12
  4034fe:	d305      	bcc.n	40350c <memcpy+0xcc>
  403500:	f851 3b04 	ldr.w	r3, [r1], #4
  403504:	f840 3b04 	str.w	r3, [r0], #4
  403508:	3a04      	subs	r2, #4
  40350a:	d2f9      	bcs.n	403500 <memcpy+0xc0>
  40350c:	3204      	adds	r2, #4
  40350e:	d008      	beq.n	403522 <memcpy+0xe2>
  403510:	07d2      	lsls	r2, r2, #31
  403512:	bf1c      	itt	ne
  403514:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403518:	f800 3b01 	strbne.w	r3, [r0], #1
  40351c:	d301      	bcc.n	403522 <memcpy+0xe2>
  40351e:	880b      	ldrh	r3, [r1, #0]
  403520:	8003      	strh	r3, [r0, #0]
  403522:	4660      	mov	r0, ip
  403524:	4770      	bx	lr
  403526:	bf00      	nop
  403528:	2a08      	cmp	r2, #8
  40352a:	d313      	bcc.n	403554 <memcpy+0x114>
  40352c:	078b      	lsls	r3, r1, #30
  40352e:	d08d      	beq.n	40344c <memcpy+0xc>
  403530:	f010 0303 	ands.w	r3, r0, #3
  403534:	d08a      	beq.n	40344c <memcpy+0xc>
  403536:	f1c3 0304 	rsb	r3, r3, #4
  40353a:	1ad2      	subs	r2, r2, r3
  40353c:	07db      	lsls	r3, r3, #31
  40353e:	bf1c      	itt	ne
  403540:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403544:	f800 3b01 	strbne.w	r3, [r0], #1
  403548:	d380      	bcc.n	40344c <memcpy+0xc>
  40354a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40354e:	f820 3b02 	strh.w	r3, [r0], #2
  403552:	e77b      	b.n	40344c <memcpy+0xc>
  403554:	3a04      	subs	r2, #4
  403556:	d3d9      	bcc.n	40350c <memcpy+0xcc>
  403558:	3a01      	subs	r2, #1
  40355a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40355e:	f800 3b01 	strb.w	r3, [r0], #1
  403562:	d2f9      	bcs.n	403558 <memcpy+0x118>
  403564:	780b      	ldrb	r3, [r1, #0]
  403566:	7003      	strb	r3, [r0, #0]
  403568:	784b      	ldrb	r3, [r1, #1]
  40356a:	7043      	strb	r3, [r0, #1]
  40356c:	788b      	ldrb	r3, [r1, #2]
  40356e:	7083      	strb	r3, [r0, #2]
  403570:	4660      	mov	r0, ip
  403572:	4770      	bx	lr

00403574 <memmove>:
  403574:	4288      	cmp	r0, r1
  403576:	b5f0      	push	{r4, r5, r6, r7, lr}
  403578:	d90d      	bls.n	403596 <memmove+0x22>
  40357a:	188b      	adds	r3, r1, r2
  40357c:	4298      	cmp	r0, r3
  40357e:	d20a      	bcs.n	403596 <memmove+0x22>
  403580:	1884      	adds	r4, r0, r2
  403582:	2a00      	cmp	r2, #0
  403584:	d051      	beq.n	40362a <memmove+0xb6>
  403586:	4622      	mov	r2, r4
  403588:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40358c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403590:	4299      	cmp	r1, r3
  403592:	d1f9      	bne.n	403588 <memmove+0x14>
  403594:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403596:	2a0f      	cmp	r2, #15
  403598:	d948      	bls.n	40362c <memmove+0xb8>
  40359a:	ea41 0300 	orr.w	r3, r1, r0
  40359e:	079b      	lsls	r3, r3, #30
  4035a0:	d146      	bne.n	403630 <memmove+0xbc>
  4035a2:	f100 0410 	add.w	r4, r0, #16
  4035a6:	f101 0310 	add.w	r3, r1, #16
  4035aa:	4615      	mov	r5, r2
  4035ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4035b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4035b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4035b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4035bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4035c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4035c4:	3d10      	subs	r5, #16
  4035c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4035ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4035ce:	2d0f      	cmp	r5, #15
  4035d0:	f103 0310 	add.w	r3, r3, #16
  4035d4:	f104 0410 	add.w	r4, r4, #16
  4035d8:	d8e8      	bhi.n	4035ac <memmove+0x38>
  4035da:	f1a2 0310 	sub.w	r3, r2, #16
  4035de:	f023 030f 	bic.w	r3, r3, #15
  4035e2:	f002 0e0f 	and.w	lr, r2, #15
  4035e6:	3310      	adds	r3, #16
  4035e8:	f1be 0f03 	cmp.w	lr, #3
  4035ec:	4419      	add	r1, r3
  4035ee:	4403      	add	r3, r0
  4035f0:	d921      	bls.n	403636 <memmove+0xc2>
  4035f2:	1f1e      	subs	r6, r3, #4
  4035f4:	460d      	mov	r5, r1
  4035f6:	4674      	mov	r4, lr
  4035f8:	3c04      	subs	r4, #4
  4035fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4035fe:	f846 7f04 	str.w	r7, [r6, #4]!
  403602:	2c03      	cmp	r4, #3
  403604:	d8f8      	bhi.n	4035f8 <memmove+0x84>
  403606:	f1ae 0404 	sub.w	r4, lr, #4
  40360a:	f024 0403 	bic.w	r4, r4, #3
  40360e:	3404      	adds	r4, #4
  403610:	4421      	add	r1, r4
  403612:	4423      	add	r3, r4
  403614:	f002 0203 	and.w	r2, r2, #3
  403618:	b162      	cbz	r2, 403634 <memmove+0xc0>
  40361a:	3b01      	subs	r3, #1
  40361c:	440a      	add	r2, r1
  40361e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403622:	f803 4f01 	strb.w	r4, [r3, #1]!
  403626:	428a      	cmp	r2, r1
  403628:	d1f9      	bne.n	40361e <memmove+0xaa>
  40362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40362c:	4603      	mov	r3, r0
  40362e:	e7f3      	b.n	403618 <memmove+0xa4>
  403630:	4603      	mov	r3, r0
  403632:	e7f2      	b.n	40361a <memmove+0xa6>
  403634:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403636:	4672      	mov	r2, lr
  403638:	e7ee      	b.n	403618 <memmove+0xa4>
  40363a:	bf00      	nop

0040363c <__malloc_lock>:
  40363c:	4801      	ldr	r0, [pc, #4]	; (403644 <__malloc_lock+0x8>)
  40363e:	f7ff bb63 	b.w	402d08 <__retarget_lock_acquire_recursive>
  403642:	bf00      	nop
  403644:	20400b2c 	.word	0x20400b2c

00403648 <__malloc_unlock>:
  403648:	4801      	ldr	r0, [pc, #4]	; (403650 <__malloc_unlock+0x8>)
  40364a:	f7ff bb5f 	b.w	402d0c <__retarget_lock_release_recursive>
  40364e:	bf00      	nop
  403650:	20400b2c 	.word	0x20400b2c

00403654 <_realloc_r>:
  403654:	2900      	cmp	r1, #0
  403656:	f000 8095 	beq.w	403784 <_realloc_r+0x130>
  40365a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40365e:	460d      	mov	r5, r1
  403660:	4616      	mov	r6, r2
  403662:	b083      	sub	sp, #12
  403664:	4680      	mov	r8, r0
  403666:	f106 070b 	add.w	r7, r6, #11
  40366a:	f7ff ffe7 	bl	40363c <__malloc_lock>
  40366e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403672:	2f16      	cmp	r7, #22
  403674:	f02e 0403 	bic.w	r4, lr, #3
  403678:	f1a5 0908 	sub.w	r9, r5, #8
  40367c:	d83c      	bhi.n	4036f8 <_realloc_r+0xa4>
  40367e:	2210      	movs	r2, #16
  403680:	4617      	mov	r7, r2
  403682:	42be      	cmp	r6, r7
  403684:	d83d      	bhi.n	403702 <_realloc_r+0xae>
  403686:	4294      	cmp	r4, r2
  403688:	da43      	bge.n	403712 <_realloc_r+0xbe>
  40368a:	4bc4      	ldr	r3, [pc, #784]	; (40399c <_realloc_r+0x348>)
  40368c:	6899      	ldr	r1, [r3, #8]
  40368e:	eb09 0004 	add.w	r0, r9, r4
  403692:	4288      	cmp	r0, r1
  403694:	f000 80b4 	beq.w	403800 <_realloc_r+0x1ac>
  403698:	6843      	ldr	r3, [r0, #4]
  40369a:	f023 0101 	bic.w	r1, r3, #1
  40369e:	4401      	add	r1, r0
  4036a0:	6849      	ldr	r1, [r1, #4]
  4036a2:	07c9      	lsls	r1, r1, #31
  4036a4:	d54c      	bpl.n	403740 <_realloc_r+0xec>
  4036a6:	f01e 0f01 	tst.w	lr, #1
  4036aa:	f000 809b 	beq.w	4037e4 <_realloc_r+0x190>
  4036ae:	4631      	mov	r1, r6
  4036b0:	4640      	mov	r0, r8
  4036b2:	f7ff fbad 	bl	402e10 <_malloc_r>
  4036b6:	4606      	mov	r6, r0
  4036b8:	2800      	cmp	r0, #0
  4036ba:	d03a      	beq.n	403732 <_realloc_r+0xde>
  4036bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4036c0:	f023 0301 	bic.w	r3, r3, #1
  4036c4:	444b      	add	r3, r9
  4036c6:	f1a0 0208 	sub.w	r2, r0, #8
  4036ca:	429a      	cmp	r2, r3
  4036cc:	f000 8121 	beq.w	403912 <_realloc_r+0x2be>
  4036d0:	1f22      	subs	r2, r4, #4
  4036d2:	2a24      	cmp	r2, #36	; 0x24
  4036d4:	f200 8107 	bhi.w	4038e6 <_realloc_r+0x292>
  4036d8:	2a13      	cmp	r2, #19
  4036da:	f200 80db 	bhi.w	403894 <_realloc_r+0x240>
  4036de:	4603      	mov	r3, r0
  4036e0:	462a      	mov	r2, r5
  4036e2:	6811      	ldr	r1, [r2, #0]
  4036e4:	6019      	str	r1, [r3, #0]
  4036e6:	6851      	ldr	r1, [r2, #4]
  4036e8:	6059      	str	r1, [r3, #4]
  4036ea:	6892      	ldr	r2, [r2, #8]
  4036ec:	609a      	str	r2, [r3, #8]
  4036ee:	4629      	mov	r1, r5
  4036f0:	4640      	mov	r0, r8
  4036f2:	f7ff f86f 	bl	4027d4 <_free_r>
  4036f6:	e01c      	b.n	403732 <_realloc_r+0xde>
  4036f8:	f027 0707 	bic.w	r7, r7, #7
  4036fc:	2f00      	cmp	r7, #0
  4036fe:	463a      	mov	r2, r7
  403700:	dabf      	bge.n	403682 <_realloc_r+0x2e>
  403702:	2600      	movs	r6, #0
  403704:	230c      	movs	r3, #12
  403706:	4630      	mov	r0, r6
  403708:	f8c8 3000 	str.w	r3, [r8]
  40370c:	b003      	add	sp, #12
  40370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403712:	462e      	mov	r6, r5
  403714:	1be3      	subs	r3, r4, r7
  403716:	2b0f      	cmp	r3, #15
  403718:	d81e      	bhi.n	403758 <_realloc_r+0x104>
  40371a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40371e:	f003 0301 	and.w	r3, r3, #1
  403722:	4323      	orrs	r3, r4
  403724:	444c      	add	r4, r9
  403726:	f8c9 3004 	str.w	r3, [r9, #4]
  40372a:	6863      	ldr	r3, [r4, #4]
  40372c:	f043 0301 	orr.w	r3, r3, #1
  403730:	6063      	str	r3, [r4, #4]
  403732:	4640      	mov	r0, r8
  403734:	f7ff ff88 	bl	403648 <__malloc_unlock>
  403738:	4630      	mov	r0, r6
  40373a:	b003      	add	sp, #12
  40373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403740:	f023 0303 	bic.w	r3, r3, #3
  403744:	18e1      	adds	r1, r4, r3
  403746:	4291      	cmp	r1, r2
  403748:	db1f      	blt.n	40378a <_realloc_r+0x136>
  40374a:	68c3      	ldr	r3, [r0, #12]
  40374c:	6882      	ldr	r2, [r0, #8]
  40374e:	462e      	mov	r6, r5
  403750:	60d3      	str	r3, [r2, #12]
  403752:	460c      	mov	r4, r1
  403754:	609a      	str	r2, [r3, #8]
  403756:	e7dd      	b.n	403714 <_realloc_r+0xc0>
  403758:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40375c:	eb09 0107 	add.w	r1, r9, r7
  403760:	f002 0201 	and.w	r2, r2, #1
  403764:	444c      	add	r4, r9
  403766:	f043 0301 	orr.w	r3, r3, #1
  40376a:	4317      	orrs	r7, r2
  40376c:	f8c9 7004 	str.w	r7, [r9, #4]
  403770:	604b      	str	r3, [r1, #4]
  403772:	6863      	ldr	r3, [r4, #4]
  403774:	f043 0301 	orr.w	r3, r3, #1
  403778:	3108      	adds	r1, #8
  40377a:	6063      	str	r3, [r4, #4]
  40377c:	4640      	mov	r0, r8
  40377e:	f7ff f829 	bl	4027d4 <_free_r>
  403782:	e7d6      	b.n	403732 <_realloc_r+0xde>
  403784:	4611      	mov	r1, r2
  403786:	f7ff bb43 	b.w	402e10 <_malloc_r>
  40378a:	f01e 0f01 	tst.w	lr, #1
  40378e:	d18e      	bne.n	4036ae <_realloc_r+0x5a>
  403790:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403794:	eba9 0a01 	sub.w	sl, r9, r1
  403798:	f8da 1004 	ldr.w	r1, [sl, #4]
  40379c:	f021 0103 	bic.w	r1, r1, #3
  4037a0:	440b      	add	r3, r1
  4037a2:	4423      	add	r3, r4
  4037a4:	4293      	cmp	r3, r2
  4037a6:	db25      	blt.n	4037f4 <_realloc_r+0x1a0>
  4037a8:	68c2      	ldr	r2, [r0, #12]
  4037aa:	6881      	ldr	r1, [r0, #8]
  4037ac:	4656      	mov	r6, sl
  4037ae:	60ca      	str	r2, [r1, #12]
  4037b0:	6091      	str	r1, [r2, #8]
  4037b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4037b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4037ba:	1f22      	subs	r2, r4, #4
  4037bc:	2a24      	cmp	r2, #36	; 0x24
  4037be:	60c1      	str	r1, [r0, #12]
  4037c0:	6088      	str	r0, [r1, #8]
  4037c2:	f200 8094 	bhi.w	4038ee <_realloc_r+0x29a>
  4037c6:	2a13      	cmp	r2, #19
  4037c8:	d96f      	bls.n	4038aa <_realloc_r+0x256>
  4037ca:	6829      	ldr	r1, [r5, #0]
  4037cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4037d0:	6869      	ldr	r1, [r5, #4]
  4037d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4037d6:	2a1b      	cmp	r2, #27
  4037d8:	f200 80a2 	bhi.w	403920 <_realloc_r+0x2cc>
  4037dc:	3508      	adds	r5, #8
  4037de:	f10a 0210 	add.w	r2, sl, #16
  4037e2:	e063      	b.n	4038ac <_realloc_r+0x258>
  4037e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4037e8:	eba9 0a03 	sub.w	sl, r9, r3
  4037ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4037f0:	f021 0103 	bic.w	r1, r1, #3
  4037f4:	1863      	adds	r3, r4, r1
  4037f6:	4293      	cmp	r3, r2
  4037f8:	f6ff af59 	blt.w	4036ae <_realloc_r+0x5a>
  4037fc:	4656      	mov	r6, sl
  4037fe:	e7d8      	b.n	4037b2 <_realloc_r+0x15e>
  403800:	6841      	ldr	r1, [r0, #4]
  403802:	f021 0b03 	bic.w	fp, r1, #3
  403806:	44a3      	add	fp, r4
  403808:	f107 0010 	add.w	r0, r7, #16
  40380c:	4583      	cmp	fp, r0
  40380e:	da56      	bge.n	4038be <_realloc_r+0x26a>
  403810:	f01e 0f01 	tst.w	lr, #1
  403814:	f47f af4b 	bne.w	4036ae <_realloc_r+0x5a>
  403818:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40381c:	eba9 0a01 	sub.w	sl, r9, r1
  403820:	f8da 1004 	ldr.w	r1, [sl, #4]
  403824:	f021 0103 	bic.w	r1, r1, #3
  403828:	448b      	add	fp, r1
  40382a:	4558      	cmp	r0, fp
  40382c:	dce2      	bgt.n	4037f4 <_realloc_r+0x1a0>
  40382e:	4656      	mov	r6, sl
  403830:	f8da 100c 	ldr.w	r1, [sl, #12]
  403834:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403838:	1f22      	subs	r2, r4, #4
  40383a:	2a24      	cmp	r2, #36	; 0x24
  40383c:	60c1      	str	r1, [r0, #12]
  40383e:	6088      	str	r0, [r1, #8]
  403840:	f200 808f 	bhi.w	403962 <_realloc_r+0x30e>
  403844:	2a13      	cmp	r2, #19
  403846:	f240 808a 	bls.w	40395e <_realloc_r+0x30a>
  40384a:	6829      	ldr	r1, [r5, #0]
  40384c:	f8ca 1008 	str.w	r1, [sl, #8]
  403850:	6869      	ldr	r1, [r5, #4]
  403852:	f8ca 100c 	str.w	r1, [sl, #12]
  403856:	2a1b      	cmp	r2, #27
  403858:	f200 808a 	bhi.w	403970 <_realloc_r+0x31c>
  40385c:	3508      	adds	r5, #8
  40385e:	f10a 0210 	add.w	r2, sl, #16
  403862:	6829      	ldr	r1, [r5, #0]
  403864:	6011      	str	r1, [r2, #0]
  403866:	6869      	ldr	r1, [r5, #4]
  403868:	6051      	str	r1, [r2, #4]
  40386a:	68a9      	ldr	r1, [r5, #8]
  40386c:	6091      	str	r1, [r2, #8]
  40386e:	eb0a 0107 	add.w	r1, sl, r7
  403872:	ebab 0207 	sub.w	r2, fp, r7
  403876:	f042 0201 	orr.w	r2, r2, #1
  40387a:	6099      	str	r1, [r3, #8]
  40387c:	604a      	str	r2, [r1, #4]
  40387e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403882:	f003 0301 	and.w	r3, r3, #1
  403886:	431f      	orrs	r7, r3
  403888:	4640      	mov	r0, r8
  40388a:	f8ca 7004 	str.w	r7, [sl, #4]
  40388e:	f7ff fedb 	bl	403648 <__malloc_unlock>
  403892:	e751      	b.n	403738 <_realloc_r+0xe4>
  403894:	682b      	ldr	r3, [r5, #0]
  403896:	6003      	str	r3, [r0, #0]
  403898:	686b      	ldr	r3, [r5, #4]
  40389a:	6043      	str	r3, [r0, #4]
  40389c:	2a1b      	cmp	r2, #27
  40389e:	d82d      	bhi.n	4038fc <_realloc_r+0x2a8>
  4038a0:	f100 0308 	add.w	r3, r0, #8
  4038a4:	f105 0208 	add.w	r2, r5, #8
  4038a8:	e71b      	b.n	4036e2 <_realloc_r+0x8e>
  4038aa:	4632      	mov	r2, r6
  4038ac:	6829      	ldr	r1, [r5, #0]
  4038ae:	6011      	str	r1, [r2, #0]
  4038b0:	6869      	ldr	r1, [r5, #4]
  4038b2:	6051      	str	r1, [r2, #4]
  4038b4:	68a9      	ldr	r1, [r5, #8]
  4038b6:	6091      	str	r1, [r2, #8]
  4038b8:	461c      	mov	r4, r3
  4038ba:	46d1      	mov	r9, sl
  4038bc:	e72a      	b.n	403714 <_realloc_r+0xc0>
  4038be:	eb09 0107 	add.w	r1, r9, r7
  4038c2:	ebab 0b07 	sub.w	fp, fp, r7
  4038c6:	f04b 0201 	orr.w	r2, fp, #1
  4038ca:	6099      	str	r1, [r3, #8]
  4038cc:	604a      	str	r2, [r1, #4]
  4038ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4038d2:	f003 0301 	and.w	r3, r3, #1
  4038d6:	431f      	orrs	r7, r3
  4038d8:	4640      	mov	r0, r8
  4038da:	f845 7c04 	str.w	r7, [r5, #-4]
  4038de:	f7ff feb3 	bl	403648 <__malloc_unlock>
  4038e2:	462e      	mov	r6, r5
  4038e4:	e728      	b.n	403738 <_realloc_r+0xe4>
  4038e6:	4629      	mov	r1, r5
  4038e8:	f7ff fe44 	bl	403574 <memmove>
  4038ec:	e6ff      	b.n	4036ee <_realloc_r+0x9a>
  4038ee:	4629      	mov	r1, r5
  4038f0:	4630      	mov	r0, r6
  4038f2:	461c      	mov	r4, r3
  4038f4:	46d1      	mov	r9, sl
  4038f6:	f7ff fe3d 	bl	403574 <memmove>
  4038fa:	e70b      	b.n	403714 <_realloc_r+0xc0>
  4038fc:	68ab      	ldr	r3, [r5, #8]
  4038fe:	6083      	str	r3, [r0, #8]
  403900:	68eb      	ldr	r3, [r5, #12]
  403902:	60c3      	str	r3, [r0, #12]
  403904:	2a24      	cmp	r2, #36	; 0x24
  403906:	d017      	beq.n	403938 <_realloc_r+0x2e4>
  403908:	f100 0310 	add.w	r3, r0, #16
  40390c:	f105 0210 	add.w	r2, r5, #16
  403910:	e6e7      	b.n	4036e2 <_realloc_r+0x8e>
  403912:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403916:	f023 0303 	bic.w	r3, r3, #3
  40391a:	441c      	add	r4, r3
  40391c:	462e      	mov	r6, r5
  40391e:	e6f9      	b.n	403714 <_realloc_r+0xc0>
  403920:	68a9      	ldr	r1, [r5, #8]
  403922:	f8ca 1010 	str.w	r1, [sl, #16]
  403926:	68e9      	ldr	r1, [r5, #12]
  403928:	f8ca 1014 	str.w	r1, [sl, #20]
  40392c:	2a24      	cmp	r2, #36	; 0x24
  40392e:	d00c      	beq.n	40394a <_realloc_r+0x2f6>
  403930:	3510      	adds	r5, #16
  403932:	f10a 0218 	add.w	r2, sl, #24
  403936:	e7b9      	b.n	4038ac <_realloc_r+0x258>
  403938:	692b      	ldr	r3, [r5, #16]
  40393a:	6103      	str	r3, [r0, #16]
  40393c:	696b      	ldr	r3, [r5, #20]
  40393e:	6143      	str	r3, [r0, #20]
  403940:	f105 0218 	add.w	r2, r5, #24
  403944:	f100 0318 	add.w	r3, r0, #24
  403948:	e6cb      	b.n	4036e2 <_realloc_r+0x8e>
  40394a:	692a      	ldr	r2, [r5, #16]
  40394c:	f8ca 2018 	str.w	r2, [sl, #24]
  403950:	696a      	ldr	r2, [r5, #20]
  403952:	f8ca 201c 	str.w	r2, [sl, #28]
  403956:	3518      	adds	r5, #24
  403958:	f10a 0220 	add.w	r2, sl, #32
  40395c:	e7a6      	b.n	4038ac <_realloc_r+0x258>
  40395e:	4632      	mov	r2, r6
  403960:	e77f      	b.n	403862 <_realloc_r+0x20e>
  403962:	4629      	mov	r1, r5
  403964:	4630      	mov	r0, r6
  403966:	9301      	str	r3, [sp, #4]
  403968:	f7ff fe04 	bl	403574 <memmove>
  40396c:	9b01      	ldr	r3, [sp, #4]
  40396e:	e77e      	b.n	40386e <_realloc_r+0x21a>
  403970:	68a9      	ldr	r1, [r5, #8]
  403972:	f8ca 1010 	str.w	r1, [sl, #16]
  403976:	68e9      	ldr	r1, [r5, #12]
  403978:	f8ca 1014 	str.w	r1, [sl, #20]
  40397c:	2a24      	cmp	r2, #36	; 0x24
  40397e:	d003      	beq.n	403988 <_realloc_r+0x334>
  403980:	3510      	adds	r5, #16
  403982:	f10a 0218 	add.w	r2, sl, #24
  403986:	e76c      	b.n	403862 <_realloc_r+0x20e>
  403988:	692a      	ldr	r2, [r5, #16]
  40398a:	f8ca 2018 	str.w	r2, [sl, #24]
  40398e:	696a      	ldr	r2, [r5, #20]
  403990:	f8ca 201c 	str.w	r2, [sl, #28]
  403994:	3518      	adds	r5, #24
  403996:	f10a 0220 	add.w	r2, sl, #32
  40399a:	e762      	b.n	403862 <_realloc_r+0x20e>
  40399c:	204005a8 	.word	0x204005a8

004039a0 <_sbrk_r>:
  4039a0:	b538      	push	{r3, r4, r5, lr}
  4039a2:	4c07      	ldr	r4, [pc, #28]	; (4039c0 <_sbrk_r+0x20>)
  4039a4:	2300      	movs	r3, #0
  4039a6:	4605      	mov	r5, r0
  4039a8:	4608      	mov	r0, r1
  4039aa:	6023      	str	r3, [r4, #0]
  4039ac:	f7fd f99c 	bl	400ce8 <_sbrk>
  4039b0:	1c43      	adds	r3, r0, #1
  4039b2:	d000      	beq.n	4039b6 <_sbrk_r+0x16>
  4039b4:	bd38      	pop	{r3, r4, r5, pc}
  4039b6:	6823      	ldr	r3, [r4, #0]
  4039b8:	2b00      	cmp	r3, #0
  4039ba:	d0fb      	beq.n	4039b4 <_sbrk_r+0x14>
  4039bc:	602b      	str	r3, [r5, #0]
  4039be:	bd38      	pop	{r3, r4, r5, pc}
  4039c0:	20400b40 	.word	0x20400b40

004039c4 <__sread>:
  4039c4:	b510      	push	{r4, lr}
  4039c6:	460c      	mov	r4, r1
  4039c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4039cc:	f000 f9f6 	bl	403dbc <_read_r>
  4039d0:	2800      	cmp	r0, #0
  4039d2:	db03      	blt.n	4039dc <__sread+0x18>
  4039d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4039d6:	4403      	add	r3, r0
  4039d8:	6523      	str	r3, [r4, #80]	; 0x50
  4039da:	bd10      	pop	{r4, pc}
  4039dc:	89a3      	ldrh	r3, [r4, #12]
  4039de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4039e2:	81a3      	strh	r3, [r4, #12]
  4039e4:	bd10      	pop	{r4, pc}
  4039e6:	bf00      	nop

004039e8 <__swrite>:
  4039e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039ec:	4616      	mov	r6, r2
  4039ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4039f2:	461f      	mov	r7, r3
  4039f4:	05d3      	lsls	r3, r2, #23
  4039f6:	460c      	mov	r4, r1
  4039f8:	4605      	mov	r5, r0
  4039fa:	d507      	bpl.n	403a0c <__swrite+0x24>
  4039fc:	2200      	movs	r2, #0
  4039fe:	2302      	movs	r3, #2
  403a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a04:	f000 f9c4 	bl	403d90 <_lseek_r>
  403a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403a14:	81a2      	strh	r2, [r4, #12]
  403a16:	463b      	mov	r3, r7
  403a18:	4632      	mov	r2, r6
  403a1a:	4628      	mov	r0, r5
  403a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403a20:	f000 b8a4 	b.w	403b6c <_write_r>

00403a24 <__sseek>:
  403a24:	b510      	push	{r4, lr}
  403a26:	460c      	mov	r4, r1
  403a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a2c:	f000 f9b0 	bl	403d90 <_lseek_r>
  403a30:	89a3      	ldrh	r3, [r4, #12]
  403a32:	1c42      	adds	r2, r0, #1
  403a34:	bf0e      	itee	eq
  403a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403a3e:	6520      	strne	r0, [r4, #80]	; 0x50
  403a40:	81a3      	strh	r3, [r4, #12]
  403a42:	bd10      	pop	{r4, pc}

00403a44 <__sclose>:
  403a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a48:	f000 b908 	b.w	403c5c <_close_r>

00403a4c <__swbuf_r>:
  403a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a4e:	460d      	mov	r5, r1
  403a50:	4614      	mov	r4, r2
  403a52:	4606      	mov	r6, r0
  403a54:	b110      	cbz	r0, 403a5c <__swbuf_r+0x10>
  403a56:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a58:	2b00      	cmp	r3, #0
  403a5a:	d04b      	beq.n	403af4 <__swbuf_r+0xa8>
  403a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a60:	69a3      	ldr	r3, [r4, #24]
  403a62:	60a3      	str	r3, [r4, #8]
  403a64:	b291      	uxth	r1, r2
  403a66:	0708      	lsls	r0, r1, #28
  403a68:	d539      	bpl.n	403ade <__swbuf_r+0x92>
  403a6a:	6923      	ldr	r3, [r4, #16]
  403a6c:	2b00      	cmp	r3, #0
  403a6e:	d036      	beq.n	403ade <__swbuf_r+0x92>
  403a70:	b2ed      	uxtb	r5, r5
  403a72:	0489      	lsls	r1, r1, #18
  403a74:	462f      	mov	r7, r5
  403a76:	d515      	bpl.n	403aa4 <__swbuf_r+0x58>
  403a78:	6822      	ldr	r2, [r4, #0]
  403a7a:	6961      	ldr	r1, [r4, #20]
  403a7c:	1ad3      	subs	r3, r2, r3
  403a7e:	428b      	cmp	r3, r1
  403a80:	da1c      	bge.n	403abc <__swbuf_r+0x70>
  403a82:	3301      	adds	r3, #1
  403a84:	68a1      	ldr	r1, [r4, #8]
  403a86:	1c50      	adds	r0, r2, #1
  403a88:	3901      	subs	r1, #1
  403a8a:	60a1      	str	r1, [r4, #8]
  403a8c:	6020      	str	r0, [r4, #0]
  403a8e:	7015      	strb	r5, [r2, #0]
  403a90:	6962      	ldr	r2, [r4, #20]
  403a92:	429a      	cmp	r2, r3
  403a94:	d01a      	beq.n	403acc <__swbuf_r+0x80>
  403a96:	89a3      	ldrh	r3, [r4, #12]
  403a98:	07db      	lsls	r3, r3, #31
  403a9a:	d501      	bpl.n	403aa0 <__swbuf_r+0x54>
  403a9c:	2d0a      	cmp	r5, #10
  403a9e:	d015      	beq.n	403acc <__swbuf_r+0x80>
  403aa0:	4638      	mov	r0, r7
  403aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403aa4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403aaa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403aae:	81a2      	strh	r2, [r4, #12]
  403ab0:	6822      	ldr	r2, [r4, #0]
  403ab2:	6661      	str	r1, [r4, #100]	; 0x64
  403ab4:	6961      	ldr	r1, [r4, #20]
  403ab6:	1ad3      	subs	r3, r2, r3
  403ab8:	428b      	cmp	r3, r1
  403aba:	dbe2      	blt.n	403a82 <__swbuf_r+0x36>
  403abc:	4621      	mov	r1, r4
  403abe:	4630      	mov	r0, r6
  403ac0:	f7fe fd0a 	bl	4024d8 <_fflush_r>
  403ac4:	b940      	cbnz	r0, 403ad8 <__swbuf_r+0x8c>
  403ac6:	6822      	ldr	r2, [r4, #0]
  403ac8:	2301      	movs	r3, #1
  403aca:	e7db      	b.n	403a84 <__swbuf_r+0x38>
  403acc:	4621      	mov	r1, r4
  403ace:	4630      	mov	r0, r6
  403ad0:	f7fe fd02 	bl	4024d8 <_fflush_r>
  403ad4:	2800      	cmp	r0, #0
  403ad6:	d0e3      	beq.n	403aa0 <__swbuf_r+0x54>
  403ad8:	f04f 37ff 	mov.w	r7, #4294967295
  403adc:	e7e0      	b.n	403aa0 <__swbuf_r+0x54>
  403ade:	4621      	mov	r1, r4
  403ae0:	4630      	mov	r0, r6
  403ae2:	f7fe fbe5 	bl	4022b0 <__swsetup_r>
  403ae6:	2800      	cmp	r0, #0
  403ae8:	d1f6      	bne.n	403ad8 <__swbuf_r+0x8c>
  403aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403aee:	6923      	ldr	r3, [r4, #16]
  403af0:	b291      	uxth	r1, r2
  403af2:	e7bd      	b.n	403a70 <__swbuf_r+0x24>
  403af4:	f7fe fd48 	bl	402588 <__sinit>
  403af8:	e7b0      	b.n	403a5c <__swbuf_r+0x10>
  403afa:	bf00      	nop

00403afc <_wcrtomb_r>:
  403afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  403afe:	4606      	mov	r6, r0
  403b00:	b085      	sub	sp, #20
  403b02:	461f      	mov	r7, r3
  403b04:	b189      	cbz	r1, 403b2a <_wcrtomb_r+0x2e>
  403b06:	4c10      	ldr	r4, [pc, #64]	; (403b48 <_wcrtomb_r+0x4c>)
  403b08:	4d10      	ldr	r5, [pc, #64]	; (403b4c <_wcrtomb_r+0x50>)
  403b0a:	6824      	ldr	r4, [r4, #0]
  403b0c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403b0e:	2c00      	cmp	r4, #0
  403b10:	bf08      	it	eq
  403b12:	462c      	moveq	r4, r5
  403b14:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403b18:	47a0      	blx	r4
  403b1a:	1c43      	adds	r3, r0, #1
  403b1c:	d103      	bne.n	403b26 <_wcrtomb_r+0x2a>
  403b1e:	2200      	movs	r2, #0
  403b20:	238a      	movs	r3, #138	; 0x8a
  403b22:	603a      	str	r2, [r7, #0]
  403b24:	6033      	str	r3, [r6, #0]
  403b26:	b005      	add	sp, #20
  403b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b2a:	460c      	mov	r4, r1
  403b2c:	4906      	ldr	r1, [pc, #24]	; (403b48 <_wcrtomb_r+0x4c>)
  403b2e:	4a07      	ldr	r2, [pc, #28]	; (403b4c <_wcrtomb_r+0x50>)
  403b30:	6809      	ldr	r1, [r1, #0]
  403b32:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403b34:	2900      	cmp	r1, #0
  403b36:	bf08      	it	eq
  403b38:	4611      	moveq	r1, r2
  403b3a:	4622      	mov	r2, r4
  403b3c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403b40:	a901      	add	r1, sp, #4
  403b42:	47a0      	blx	r4
  403b44:	e7e9      	b.n	403b1a <_wcrtomb_r+0x1e>
  403b46:	bf00      	nop
  403b48:	20400008 	.word	0x20400008
  403b4c:	2040043c 	.word	0x2040043c

00403b50 <__ascii_wctomb>:
  403b50:	b121      	cbz	r1, 403b5c <__ascii_wctomb+0xc>
  403b52:	2aff      	cmp	r2, #255	; 0xff
  403b54:	d804      	bhi.n	403b60 <__ascii_wctomb+0x10>
  403b56:	700a      	strb	r2, [r1, #0]
  403b58:	2001      	movs	r0, #1
  403b5a:	4770      	bx	lr
  403b5c:	4608      	mov	r0, r1
  403b5e:	4770      	bx	lr
  403b60:	238a      	movs	r3, #138	; 0x8a
  403b62:	6003      	str	r3, [r0, #0]
  403b64:	f04f 30ff 	mov.w	r0, #4294967295
  403b68:	4770      	bx	lr
  403b6a:	bf00      	nop

00403b6c <_write_r>:
  403b6c:	b570      	push	{r4, r5, r6, lr}
  403b6e:	460d      	mov	r5, r1
  403b70:	4c08      	ldr	r4, [pc, #32]	; (403b94 <_write_r+0x28>)
  403b72:	4611      	mov	r1, r2
  403b74:	4606      	mov	r6, r0
  403b76:	461a      	mov	r2, r3
  403b78:	4628      	mov	r0, r5
  403b7a:	2300      	movs	r3, #0
  403b7c:	6023      	str	r3, [r4, #0]
  403b7e:	f7fc fb33 	bl	4001e8 <_write>
  403b82:	1c43      	adds	r3, r0, #1
  403b84:	d000      	beq.n	403b88 <_write_r+0x1c>
  403b86:	bd70      	pop	{r4, r5, r6, pc}
  403b88:	6823      	ldr	r3, [r4, #0]
  403b8a:	2b00      	cmp	r3, #0
  403b8c:	d0fb      	beq.n	403b86 <_write_r+0x1a>
  403b8e:	6033      	str	r3, [r6, #0]
  403b90:	bd70      	pop	{r4, r5, r6, pc}
  403b92:	bf00      	nop
  403b94:	20400b40 	.word	0x20400b40

00403b98 <__register_exitproc>:
  403b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403b9c:	4d2c      	ldr	r5, [pc, #176]	; (403c50 <__register_exitproc+0xb8>)
  403b9e:	4606      	mov	r6, r0
  403ba0:	6828      	ldr	r0, [r5, #0]
  403ba2:	4698      	mov	r8, r3
  403ba4:	460f      	mov	r7, r1
  403ba6:	4691      	mov	r9, r2
  403ba8:	f7ff f8ae 	bl	402d08 <__retarget_lock_acquire_recursive>
  403bac:	4b29      	ldr	r3, [pc, #164]	; (403c54 <__register_exitproc+0xbc>)
  403bae:	681c      	ldr	r4, [r3, #0]
  403bb0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	d03e      	beq.n	403c36 <__register_exitproc+0x9e>
  403bb8:	685a      	ldr	r2, [r3, #4]
  403bba:	2a1f      	cmp	r2, #31
  403bbc:	dc1c      	bgt.n	403bf8 <__register_exitproc+0x60>
  403bbe:	f102 0e01 	add.w	lr, r2, #1
  403bc2:	b176      	cbz	r6, 403be2 <__register_exitproc+0x4a>
  403bc4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403bc8:	2401      	movs	r4, #1
  403bca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403bce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403bd2:	4094      	lsls	r4, r2
  403bd4:	4320      	orrs	r0, r4
  403bd6:	2e02      	cmp	r6, #2
  403bd8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403bdc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403be0:	d023      	beq.n	403c2a <__register_exitproc+0x92>
  403be2:	3202      	adds	r2, #2
  403be4:	f8c3 e004 	str.w	lr, [r3, #4]
  403be8:	6828      	ldr	r0, [r5, #0]
  403bea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403bee:	f7ff f88d 	bl	402d0c <__retarget_lock_release_recursive>
  403bf2:	2000      	movs	r0, #0
  403bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403bf8:	4b17      	ldr	r3, [pc, #92]	; (403c58 <__register_exitproc+0xc0>)
  403bfa:	b30b      	cbz	r3, 403c40 <__register_exitproc+0xa8>
  403bfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403c00:	f7ff f8fe 	bl	402e00 <malloc>
  403c04:	4603      	mov	r3, r0
  403c06:	b1d8      	cbz	r0, 403c40 <__register_exitproc+0xa8>
  403c08:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403c0c:	6002      	str	r2, [r0, #0]
  403c0e:	2100      	movs	r1, #0
  403c10:	6041      	str	r1, [r0, #4]
  403c12:	460a      	mov	r2, r1
  403c14:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403c18:	f04f 0e01 	mov.w	lr, #1
  403c1c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403c20:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403c24:	2e00      	cmp	r6, #0
  403c26:	d0dc      	beq.n	403be2 <__register_exitproc+0x4a>
  403c28:	e7cc      	b.n	403bc4 <__register_exitproc+0x2c>
  403c2a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403c2e:	430c      	orrs	r4, r1
  403c30:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403c34:	e7d5      	b.n	403be2 <__register_exitproc+0x4a>
  403c36:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403c3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403c3e:	e7bb      	b.n	403bb8 <__register_exitproc+0x20>
  403c40:	6828      	ldr	r0, [r5, #0]
  403c42:	f7ff f863 	bl	402d0c <__retarget_lock_release_recursive>
  403c46:	f04f 30ff 	mov.w	r0, #4294967295
  403c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c4e:	bf00      	nop
  403c50:	20400438 	.word	0x20400438
  403c54:	00404118 	.word	0x00404118
  403c58:	00402e01 	.word	0x00402e01

00403c5c <_close_r>:
  403c5c:	b538      	push	{r3, r4, r5, lr}
  403c5e:	4c07      	ldr	r4, [pc, #28]	; (403c7c <_close_r+0x20>)
  403c60:	2300      	movs	r3, #0
  403c62:	4605      	mov	r5, r0
  403c64:	4608      	mov	r0, r1
  403c66:	6023      	str	r3, [r4, #0]
  403c68:	f7fd f85a 	bl	400d20 <_close>
  403c6c:	1c43      	adds	r3, r0, #1
  403c6e:	d000      	beq.n	403c72 <_close_r+0x16>
  403c70:	bd38      	pop	{r3, r4, r5, pc}
  403c72:	6823      	ldr	r3, [r4, #0]
  403c74:	2b00      	cmp	r3, #0
  403c76:	d0fb      	beq.n	403c70 <_close_r+0x14>
  403c78:	602b      	str	r3, [r5, #0]
  403c7a:	bd38      	pop	{r3, r4, r5, pc}
  403c7c:	20400b40 	.word	0x20400b40

00403c80 <_fclose_r>:
  403c80:	b570      	push	{r4, r5, r6, lr}
  403c82:	b159      	cbz	r1, 403c9c <_fclose_r+0x1c>
  403c84:	4605      	mov	r5, r0
  403c86:	460c      	mov	r4, r1
  403c88:	b110      	cbz	r0, 403c90 <_fclose_r+0x10>
  403c8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c8c:	2b00      	cmp	r3, #0
  403c8e:	d03c      	beq.n	403d0a <_fclose_r+0x8a>
  403c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c92:	07d8      	lsls	r0, r3, #31
  403c94:	d505      	bpl.n	403ca2 <_fclose_r+0x22>
  403c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c9a:	b92b      	cbnz	r3, 403ca8 <_fclose_r+0x28>
  403c9c:	2600      	movs	r6, #0
  403c9e:	4630      	mov	r0, r6
  403ca0:	bd70      	pop	{r4, r5, r6, pc}
  403ca2:	89a3      	ldrh	r3, [r4, #12]
  403ca4:	0599      	lsls	r1, r3, #22
  403ca6:	d53c      	bpl.n	403d22 <_fclose_r+0xa2>
  403ca8:	4621      	mov	r1, r4
  403caa:	4628      	mov	r0, r5
  403cac:	f7fe fb74 	bl	402398 <__sflush_r>
  403cb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403cb2:	4606      	mov	r6, r0
  403cb4:	b133      	cbz	r3, 403cc4 <_fclose_r+0x44>
  403cb6:	69e1      	ldr	r1, [r4, #28]
  403cb8:	4628      	mov	r0, r5
  403cba:	4798      	blx	r3
  403cbc:	2800      	cmp	r0, #0
  403cbe:	bfb8      	it	lt
  403cc0:	f04f 36ff 	movlt.w	r6, #4294967295
  403cc4:	89a3      	ldrh	r3, [r4, #12]
  403cc6:	061a      	lsls	r2, r3, #24
  403cc8:	d422      	bmi.n	403d10 <_fclose_r+0x90>
  403cca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403ccc:	b141      	cbz	r1, 403ce0 <_fclose_r+0x60>
  403cce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403cd2:	4299      	cmp	r1, r3
  403cd4:	d002      	beq.n	403cdc <_fclose_r+0x5c>
  403cd6:	4628      	mov	r0, r5
  403cd8:	f7fe fd7c 	bl	4027d4 <_free_r>
  403cdc:	2300      	movs	r3, #0
  403cde:	6323      	str	r3, [r4, #48]	; 0x30
  403ce0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403ce2:	b121      	cbz	r1, 403cee <_fclose_r+0x6e>
  403ce4:	4628      	mov	r0, r5
  403ce6:	f7fe fd75 	bl	4027d4 <_free_r>
  403cea:	2300      	movs	r3, #0
  403cec:	6463      	str	r3, [r4, #68]	; 0x44
  403cee:	f7fe fc77 	bl	4025e0 <__sfp_lock_acquire>
  403cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403cf4:	2200      	movs	r2, #0
  403cf6:	07db      	lsls	r3, r3, #31
  403cf8:	81a2      	strh	r2, [r4, #12]
  403cfa:	d50e      	bpl.n	403d1a <_fclose_r+0x9a>
  403cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403cfe:	f7ff f801 	bl	402d04 <__retarget_lock_close_recursive>
  403d02:	f7fe fc73 	bl	4025ec <__sfp_lock_release>
  403d06:	4630      	mov	r0, r6
  403d08:	bd70      	pop	{r4, r5, r6, pc}
  403d0a:	f7fe fc3d 	bl	402588 <__sinit>
  403d0e:	e7bf      	b.n	403c90 <_fclose_r+0x10>
  403d10:	6921      	ldr	r1, [r4, #16]
  403d12:	4628      	mov	r0, r5
  403d14:	f7fe fd5e 	bl	4027d4 <_free_r>
  403d18:	e7d7      	b.n	403cca <_fclose_r+0x4a>
  403d1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d1c:	f7fe fff6 	bl	402d0c <__retarget_lock_release_recursive>
  403d20:	e7ec      	b.n	403cfc <_fclose_r+0x7c>
  403d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d24:	f7fe fff0 	bl	402d08 <__retarget_lock_acquire_recursive>
  403d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d1bb      	bne.n	403ca8 <_fclose_r+0x28>
  403d30:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403d32:	f016 0601 	ands.w	r6, r6, #1
  403d36:	d1b1      	bne.n	403c9c <_fclose_r+0x1c>
  403d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d3a:	f7fe ffe7 	bl	402d0c <__retarget_lock_release_recursive>
  403d3e:	4630      	mov	r0, r6
  403d40:	bd70      	pop	{r4, r5, r6, pc}
  403d42:	bf00      	nop

00403d44 <_fstat_r>:
  403d44:	b538      	push	{r3, r4, r5, lr}
  403d46:	460b      	mov	r3, r1
  403d48:	4c07      	ldr	r4, [pc, #28]	; (403d68 <_fstat_r+0x24>)
  403d4a:	4605      	mov	r5, r0
  403d4c:	4611      	mov	r1, r2
  403d4e:	4618      	mov	r0, r3
  403d50:	2300      	movs	r3, #0
  403d52:	6023      	str	r3, [r4, #0]
  403d54:	f7fc ffe7 	bl	400d26 <_fstat>
  403d58:	1c43      	adds	r3, r0, #1
  403d5a:	d000      	beq.n	403d5e <_fstat_r+0x1a>
  403d5c:	bd38      	pop	{r3, r4, r5, pc}
  403d5e:	6823      	ldr	r3, [r4, #0]
  403d60:	2b00      	cmp	r3, #0
  403d62:	d0fb      	beq.n	403d5c <_fstat_r+0x18>
  403d64:	602b      	str	r3, [r5, #0]
  403d66:	bd38      	pop	{r3, r4, r5, pc}
  403d68:	20400b40 	.word	0x20400b40

00403d6c <_isatty_r>:
  403d6c:	b538      	push	{r3, r4, r5, lr}
  403d6e:	4c07      	ldr	r4, [pc, #28]	; (403d8c <_isatty_r+0x20>)
  403d70:	2300      	movs	r3, #0
  403d72:	4605      	mov	r5, r0
  403d74:	4608      	mov	r0, r1
  403d76:	6023      	str	r3, [r4, #0]
  403d78:	f7fc ffda 	bl	400d30 <_isatty>
  403d7c:	1c43      	adds	r3, r0, #1
  403d7e:	d000      	beq.n	403d82 <_isatty_r+0x16>
  403d80:	bd38      	pop	{r3, r4, r5, pc}
  403d82:	6823      	ldr	r3, [r4, #0]
  403d84:	2b00      	cmp	r3, #0
  403d86:	d0fb      	beq.n	403d80 <_isatty_r+0x14>
  403d88:	602b      	str	r3, [r5, #0]
  403d8a:	bd38      	pop	{r3, r4, r5, pc}
  403d8c:	20400b40 	.word	0x20400b40

00403d90 <_lseek_r>:
  403d90:	b570      	push	{r4, r5, r6, lr}
  403d92:	460d      	mov	r5, r1
  403d94:	4c08      	ldr	r4, [pc, #32]	; (403db8 <_lseek_r+0x28>)
  403d96:	4611      	mov	r1, r2
  403d98:	4606      	mov	r6, r0
  403d9a:	461a      	mov	r2, r3
  403d9c:	4628      	mov	r0, r5
  403d9e:	2300      	movs	r3, #0
  403da0:	6023      	str	r3, [r4, #0]
  403da2:	f7fc ffc7 	bl	400d34 <_lseek>
  403da6:	1c43      	adds	r3, r0, #1
  403da8:	d000      	beq.n	403dac <_lseek_r+0x1c>
  403daa:	bd70      	pop	{r4, r5, r6, pc}
  403dac:	6823      	ldr	r3, [r4, #0]
  403dae:	2b00      	cmp	r3, #0
  403db0:	d0fb      	beq.n	403daa <_lseek_r+0x1a>
  403db2:	6033      	str	r3, [r6, #0]
  403db4:	bd70      	pop	{r4, r5, r6, pc}
  403db6:	bf00      	nop
  403db8:	20400b40 	.word	0x20400b40

00403dbc <_read_r>:
  403dbc:	b570      	push	{r4, r5, r6, lr}
  403dbe:	460d      	mov	r5, r1
  403dc0:	4c08      	ldr	r4, [pc, #32]	; (403de4 <_read_r+0x28>)
  403dc2:	4611      	mov	r1, r2
  403dc4:	4606      	mov	r6, r0
  403dc6:	461a      	mov	r2, r3
  403dc8:	4628      	mov	r0, r5
  403dca:	2300      	movs	r3, #0
  403dcc:	6023      	str	r3, [r4, #0]
  403dce:	f7fc f9ed 	bl	4001ac <_read>
  403dd2:	1c43      	adds	r3, r0, #1
  403dd4:	d000      	beq.n	403dd8 <_read_r+0x1c>
  403dd6:	bd70      	pop	{r4, r5, r6, pc}
  403dd8:	6823      	ldr	r3, [r4, #0]
  403dda:	2b00      	cmp	r3, #0
  403ddc:	d0fb      	beq.n	403dd6 <_read_r+0x1a>
  403dde:	6033      	str	r3, [r6, #0]
  403de0:	bd70      	pop	{r4, r5, r6, pc}
  403de2:	bf00      	nop
  403de4:	20400b40 	.word	0x20400b40

00403de8 <__aeabi_uldivmod>:
  403de8:	b953      	cbnz	r3, 403e00 <__aeabi_uldivmod+0x18>
  403dea:	b94a      	cbnz	r2, 403e00 <__aeabi_uldivmod+0x18>
  403dec:	2900      	cmp	r1, #0
  403dee:	bf08      	it	eq
  403df0:	2800      	cmpeq	r0, #0
  403df2:	bf1c      	itt	ne
  403df4:	f04f 31ff 	movne.w	r1, #4294967295
  403df8:	f04f 30ff 	movne.w	r0, #4294967295
  403dfc:	f000 b97a 	b.w	4040f4 <__aeabi_idiv0>
  403e00:	f1ad 0c08 	sub.w	ip, sp, #8
  403e04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403e08:	f000 f806 	bl	403e18 <__udivmoddi4>
  403e0c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403e14:	b004      	add	sp, #16
  403e16:	4770      	bx	lr

00403e18 <__udivmoddi4>:
  403e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e1c:	468c      	mov	ip, r1
  403e1e:	460d      	mov	r5, r1
  403e20:	4604      	mov	r4, r0
  403e22:	9e08      	ldr	r6, [sp, #32]
  403e24:	2b00      	cmp	r3, #0
  403e26:	d151      	bne.n	403ecc <__udivmoddi4+0xb4>
  403e28:	428a      	cmp	r2, r1
  403e2a:	4617      	mov	r7, r2
  403e2c:	d96d      	bls.n	403f0a <__udivmoddi4+0xf2>
  403e2e:	fab2 fe82 	clz	lr, r2
  403e32:	f1be 0f00 	cmp.w	lr, #0
  403e36:	d00b      	beq.n	403e50 <__udivmoddi4+0x38>
  403e38:	f1ce 0c20 	rsb	ip, lr, #32
  403e3c:	fa01 f50e 	lsl.w	r5, r1, lr
  403e40:	fa20 fc0c 	lsr.w	ip, r0, ip
  403e44:	fa02 f70e 	lsl.w	r7, r2, lr
  403e48:	ea4c 0c05 	orr.w	ip, ip, r5
  403e4c:	fa00 f40e 	lsl.w	r4, r0, lr
  403e50:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403e54:	0c25      	lsrs	r5, r4, #16
  403e56:	fbbc f8fa 	udiv	r8, ip, sl
  403e5a:	fa1f f987 	uxth.w	r9, r7
  403e5e:	fb0a cc18 	mls	ip, sl, r8, ip
  403e62:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403e66:	fb08 f309 	mul.w	r3, r8, r9
  403e6a:	42ab      	cmp	r3, r5
  403e6c:	d90a      	bls.n	403e84 <__udivmoddi4+0x6c>
  403e6e:	19ed      	adds	r5, r5, r7
  403e70:	f108 32ff 	add.w	r2, r8, #4294967295
  403e74:	f080 8123 	bcs.w	4040be <__udivmoddi4+0x2a6>
  403e78:	42ab      	cmp	r3, r5
  403e7a:	f240 8120 	bls.w	4040be <__udivmoddi4+0x2a6>
  403e7e:	f1a8 0802 	sub.w	r8, r8, #2
  403e82:	443d      	add	r5, r7
  403e84:	1aed      	subs	r5, r5, r3
  403e86:	b2a4      	uxth	r4, r4
  403e88:	fbb5 f0fa 	udiv	r0, r5, sl
  403e8c:	fb0a 5510 	mls	r5, sl, r0, r5
  403e90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403e94:	fb00 f909 	mul.w	r9, r0, r9
  403e98:	45a1      	cmp	r9, r4
  403e9a:	d909      	bls.n	403eb0 <__udivmoddi4+0x98>
  403e9c:	19e4      	adds	r4, r4, r7
  403e9e:	f100 33ff 	add.w	r3, r0, #4294967295
  403ea2:	f080 810a 	bcs.w	4040ba <__udivmoddi4+0x2a2>
  403ea6:	45a1      	cmp	r9, r4
  403ea8:	f240 8107 	bls.w	4040ba <__udivmoddi4+0x2a2>
  403eac:	3802      	subs	r0, #2
  403eae:	443c      	add	r4, r7
  403eb0:	eba4 0409 	sub.w	r4, r4, r9
  403eb4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403eb8:	2100      	movs	r1, #0
  403eba:	2e00      	cmp	r6, #0
  403ebc:	d061      	beq.n	403f82 <__udivmoddi4+0x16a>
  403ebe:	fa24 f40e 	lsr.w	r4, r4, lr
  403ec2:	2300      	movs	r3, #0
  403ec4:	6034      	str	r4, [r6, #0]
  403ec6:	6073      	str	r3, [r6, #4]
  403ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ecc:	428b      	cmp	r3, r1
  403ece:	d907      	bls.n	403ee0 <__udivmoddi4+0xc8>
  403ed0:	2e00      	cmp	r6, #0
  403ed2:	d054      	beq.n	403f7e <__udivmoddi4+0x166>
  403ed4:	2100      	movs	r1, #0
  403ed6:	e886 0021 	stmia.w	r6, {r0, r5}
  403eda:	4608      	mov	r0, r1
  403edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ee0:	fab3 f183 	clz	r1, r3
  403ee4:	2900      	cmp	r1, #0
  403ee6:	f040 808e 	bne.w	404006 <__udivmoddi4+0x1ee>
  403eea:	42ab      	cmp	r3, r5
  403eec:	d302      	bcc.n	403ef4 <__udivmoddi4+0xdc>
  403eee:	4282      	cmp	r2, r0
  403ef0:	f200 80fa 	bhi.w	4040e8 <__udivmoddi4+0x2d0>
  403ef4:	1a84      	subs	r4, r0, r2
  403ef6:	eb65 0503 	sbc.w	r5, r5, r3
  403efa:	2001      	movs	r0, #1
  403efc:	46ac      	mov	ip, r5
  403efe:	2e00      	cmp	r6, #0
  403f00:	d03f      	beq.n	403f82 <__udivmoddi4+0x16a>
  403f02:	e886 1010 	stmia.w	r6, {r4, ip}
  403f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f0a:	b912      	cbnz	r2, 403f12 <__udivmoddi4+0xfa>
  403f0c:	2701      	movs	r7, #1
  403f0e:	fbb7 f7f2 	udiv	r7, r7, r2
  403f12:	fab7 fe87 	clz	lr, r7
  403f16:	f1be 0f00 	cmp.w	lr, #0
  403f1a:	d134      	bne.n	403f86 <__udivmoddi4+0x16e>
  403f1c:	1beb      	subs	r3, r5, r7
  403f1e:	0c3a      	lsrs	r2, r7, #16
  403f20:	fa1f fc87 	uxth.w	ip, r7
  403f24:	2101      	movs	r1, #1
  403f26:	fbb3 f8f2 	udiv	r8, r3, r2
  403f2a:	0c25      	lsrs	r5, r4, #16
  403f2c:	fb02 3318 	mls	r3, r2, r8, r3
  403f30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403f34:	fb0c f308 	mul.w	r3, ip, r8
  403f38:	42ab      	cmp	r3, r5
  403f3a:	d907      	bls.n	403f4c <__udivmoddi4+0x134>
  403f3c:	19ed      	adds	r5, r5, r7
  403f3e:	f108 30ff 	add.w	r0, r8, #4294967295
  403f42:	d202      	bcs.n	403f4a <__udivmoddi4+0x132>
  403f44:	42ab      	cmp	r3, r5
  403f46:	f200 80d1 	bhi.w	4040ec <__udivmoddi4+0x2d4>
  403f4a:	4680      	mov	r8, r0
  403f4c:	1aed      	subs	r5, r5, r3
  403f4e:	b2a3      	uxth	r3, r4
  403f50:	fbb5 f0f2 	udiv	r0, r5, r2
  403f54:	fb02 5510 	mls	r5, r2, r0, r5
  403f58:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403f5c:	fb0c fc00 	mul.w	ip, ip, r0
  403f60:	45a4      	cmp	ip, r4
  403f62:	d907      	bls.n	403f74 <__udivmoddi4+0x15c>
  403f64:	19e4      	adds	r4, r4, r7
  403f66:	f100 33ff 	add.w	r3, r0, #4294967295
  403f6a:	d202      	bcs.n	403f72 <__udivmoddi4+0x15a>
  403f6c:	45a4      	cmp	ip, r4
  403f6e:	f200 80b8 	bhi.w	4040e2 <__udivmoddi4+0x2ca>
  403f72:	4618      	mov	r0, r3
  403f74:	eba4 040c 	sub.w	r4, r4, ip
  403f78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403f7c:	e79d      	b.n	403eba <__udivmoddi4+0xa2>
  403f7e:	4631      	mov	r1, r6
  403f80:	4630      	mov	r0, r6
  403f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f86:	f1ce 0420 	rsb	r4, lr, #32
  403f8a:	fa05 f30e 	lsl.w	r3, r5, lr
  403f8e:	fa07 f70e 	lsl.w	r7, r7, lr
  403f92:	fa20 f804 	lsr.w	r8, r0, r4
  403f96:	0c3a      	lsrs	r2, r7, #16
  403f98:	fa25 f404 	lsr.w	r4, r5, r4
  403f9c:	ea48 0803 	orr.w	r8, r8, r3
  403fa0:	fbb4 f1f2 	udiv	r1, r4, r2
  403fa4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403fa8:	fb02 4411 	mls	r4, r2, r1, r4
  403fac:	fa1f fc87 	uxth.w	ip, r7
  403fb0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403fb4:	fb01 f30c 	mul.w	r3, r1, ip
  403fb8:	42ab      	cmp	r3, r5
  403fba:	fa00 f40e 	lsl.w	r4, r0, lr
  403fbe:	d909      	bls.n	403fd4 <__udivmoddi4+0x1bc>
  403fc0:	19ed      	adds	r5, r5, r7
  403fc2:	f101 30ff 	add.w	r0, r1, #4294967295
  403fc6:	f080 808a 	bcs.w	4040de <__udivmoddi4+0x2c6>
  403fca:	42ab      	cmp	r3, r5
  403fcc:	f240 8087 	bls.w	4040de <__udivmoddi4+0x2c6>
  403fd0:	3902      	subs	r1, #2
  403fd2:	443d      	add	r5, r7
  403fd4:	1aeb      	subs	r3, r5, r3
  403fd6:	fa1f f588 	uxth.w	r5, r8
  403fda:	fbb3 f0f2 	udiv	r0, r3, r2
  403fde:	fb02 3310 	mls	r3, r2, r0, r3
  403fe2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403fe6:	fb00 f30c 	mul.w	r3, r0, ip
  403fea:	42ab      	cmp	r3, r5
  403fec:	d907      	bls.n	403ffe <__udivmoddi4+0x1e6>
  403fee:	19ed      	adds	r5, r5, r7
  403ff0:	f100 38ff 	add.w	r8, r0, #4294967295
  403ff4:	d26f      	bcs.n	4040d6 <__udivmoddi4+0x2be>
  403ff6:	42ab      	cmp	r3, r5
  403ff8:	d96d      	bls.n	4040d6 <__udivmoddi4+0x2be>
  403ffa:	3802      	subs	r0, #2
  403ffc:	443d      	add	r5, r7
  403ffe:	1aeb      	subs	r3, r5, r3
  404000:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404004:	e78f      	b.n	403f26 <__udivmoddi4+0x10e>
  404006:	f1c1 0720 	rsb	r7, r1, #32
  40400a:	fa22 f807 	lsr.w	r8, r2, r7
  40400e:	408b      	lsls	r3, r1
  404010:	fa05 f401 	lsl.w	r4, r5, r1
  404014:	ea48 0303 	orr.w	r3, r8, r3
  404018:	fa20 fe07 	lsr.w	lr, r0, r7
  40401c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404020:	40fd      	lsrs	r5, r7
  404022:	ea4e 0e04 	orr.w	lr, lr, r4
  404026:	fbb5 f9fc 	udiv	r9, r5, ip
  40402a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40402e:	fb0c 5519 	mls	r5, ip, r9, r5
  404032:	fa1f f883 	uxth.w	r8, r3
  404036:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40403a:	fb09 f408 	mul.w	r4, r9, r8
  40403e:	42ac      	cmp	r4, r5
  404040:	fa02 f201 	lsl.w	r2, r2, r1
  404044:	fa00 fa01 	lsl.w	sl, r0, r1
  404048:	d908      	bls.n	40405c <__udivmoddi4+0x244>
  40404a:	18ed      	adds	r5, r5, r3
  40404c:	f109 30ff 	add.w	r0, r9, #4294967295
  404050:	d243      	bcs.n	4040da <__udivmoddi4+0x2c2>
  404052:	42ac      	cmp	r4, r5
  404054:	d941      	bls.n	4040da <__udivmoddi4+0x2c2>
  404056:	f1a9 0902 	sub.w	r9, r9, #2
  40405a:	441d      	add	r5, r3
  40405c:	1b2d      	subs	r5, r5, r4
  40405e:	fa1f fe8e 	uxth.w	lr, lr
  404062:	fbb5 f0fc 	udiv	r0, r5, ip
  404066:	fb0c 5510 	mls	r5, ip, r0, r5
  40406a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40406e:	fb00 f808 	mul.w	r8, r0, r8
  404072:	45a0      	cmp	r8, r4
  404074:	d907      	bls.n	404086 <__udivmoddi4+0x26e>
  404076:	18e4      	adds	r4, r4, r3
  404078:	f100 35ff 	add.w	r5, r0, #4294967295
  40407c:	d229      	bcs.n	4040d2 <__udivmoddi4+0x2ba>
  40407e:	45a0      	cmp	r8, r4
  404080:	d927      	bls.n	4040d2 <__udivmoddi4+0x2ba>
  404082:	3802      	subs	r0, #2
  404084:	441c      	add	r4, r3
  404086:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40408a:	eba4 0408 	sub.w	r4, r4, r8
  40408e:	fba0 8902 	umull	r8, r9, r0, r2
  404092:	454c      	cmp	r4, r9
  404094:	46c6      	mov	lr, r8
  404096:	464d      	mov	r5, r9
  404098:	d315      	bcc.n	4040c6 <__udivmoddi4+0x2ae>
  40409a:	d012      	beq.n	4040c2 <__udivmoddi4+0x2aa>
  40409c:	b156      	cbz	r6, 4040b4 <__udivmoddi4+0x29c>
  40409e:	ebba 030e 	subs.w	r3, sl, lr
  4040a2:	eb64 0405 	sbc.w	r4, r4, r5
  4040a6:	fa04 f707 	lsl.w	r7, r4, r7
  4040aa:	40cb      	lsrs	r3, r1
  4040ac:	431f      	orrs	r7, r3
  4040ae:	40cc      	lsrs	r4, r1
  4040b0:	6037      	str	r7, [r6, #0]
  4040b2:	6074      	str	r4, [r6, #4]
  4040b4:	2100      	movs	r1, #0
  4040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4040ba:	4618      	mov	r0, r3
  4040bc:	e6f8      	b.n	403eb0 <__udivmoddi4+0x98>
  4040be:	4690      	mov	r8, r2
  4040c0:	e6e0      	b.n	403e84 <__udivmoddi4+0x6c>
  4040c2:	45c2      	cmp	sl, r8
  4040c4:	d2ea      	bcs.n	40409c <__udivmoddi4+0x284>
  4040c6:	ebb8 0e02 	subs.w	lr, r8, r2
  4040ca:	eb69 0503 	sbc.w	r5, r9, r3
  4040ce:	3801      	subs	r0, #1
  4040d0:	e7e4      	b.n	40409c <__udivmoddi4+0x284>
  4040d2:	4628      	mov	r0, r5
  4040d4:	e7d7      	b.n	404086 <__udivmoddi4+0x26e>
  4040d6:	4640      	mov	r0, r8
  4040d8:	e791      	b.n	403ffe <__udivmoddi4+0x1e6>
  4040da:	4681      	mov	r9, r0
  4040dc:	e7be      	b.n	40405c <__udivmoddi4+0x244>
  4040de:	4601      	mov	r1, r0
  4040e0:	e778      	b.n	403fd4 <__udivmoddi4+0x1bc>
  4040e2:	3802      	subs	r0, #2
  4040e4:	443c      	add	r4, r7
  4040e6:	e745      	b.n	403f74 <__udivmoddi4+0x15c>
  4040e8:	4608      	mov	r0, r1
  4040ea:	e708      	b.n	403efe <__udivmoddi4+0xe6>
  4040ec:	f1a8 0802 	sub.w	r8, r8, #2
  4040f0:	443d      	add	r5, r7
  4040f2:	e72b      	b.n	403f4c <__udivmoddi4+0x134>

004040f4 <__aeabi_idiv0>:
  4040f4:	4770      	bx	lr
  4040f6:	bf00      	nop
  4040f8:	54534554 	.word	0x54534554
  4040fc:	4d4c2045 	.word	0x4d4c2045
  404100:	5a443533 	.word	0x5a443533
  404104:	00000a0d 	.word	0x00000a0d
  404108:	706d6574 	.word	0x706d6574
  40410c:	3a203020 	.word	0x3a203020
  404110:	0d642520 	.word	0x0d642520
  404114:	0000000a 	.word	0x0000000a

00404118 <_global_impure_ptr>:
  404118:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  404128:	46454443 00000000 33323130 37363534     CDEF....01234567
  404138:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404148:	0000296c                                l)..

0040414c <blanks.7217>:
  40414c:	20202020 20202020 20202020 20202020                     

0040415c <zeroes.7218>:
  40415c:	30303030 30303030 30303030 30303030     0000000000000000
  40416c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040417c <_ctype_>:
  40417c:	20202000 20202020 28282020 20282828     .         ((((( 
  40418c:	20202020 20202020 20202020 20202020                     
  40419c:	10108820 10101010 10101010 10101010      ...............
  4041ac:	04040410 04040404 10040404 10101010     ................
  4041bc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4041cc:	01010101 01010101 01010101 10101010     ................
  4041dc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4041ec:	02020202 02020202 02020202 10101010     ................
  4041fc:	00000020 00000000 00000000 00000000      ...............
	...

00404280 <_init>:
  404280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404282:	bf00      	nop
  404284:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404286:	bc08      	pop	{r3}
  404288:	469e      	mov	lr, r3
  40428a:	4770      	bx	lr

0040428c <__init_array_start>:
  40428c:	00402379 	.word	0x00402379

00404290 <__frame_dummy_init_array_entry>:
  404290:	00400165                                e.@.

00404294 <_fini>:
  404294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404296:	bf00      	nop
  404298:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40429a:	bc08      	pop	{r3}
  40429c:	469e      	mov	lr, r3
  40429e:	4770      	bx	lr

004042a0 <__fini_array_start>:
  4042a0:	00400141 	.word	0x00400141
